<idea-plugin>
    <id>io.intino.plugin</id>
    <name>Intino</name>
    <version>4.1.0</version>
    <vendor email="info@intino.io" url="http://www.intino.io">intino.io</vendor>

    <description><![CDATA[
        intino integrates several tools for automated software solutions development and deployment. It supports the creation of software production lines that involves:
        platform and product modeling, a layered architecture (including graphical user interface, rest services, persistence, event sourcing...) and continuous integration based on both source code and artifact repositories.
        intino provides several Domain Specific Languages (dsl): proteo dsl for product modeling, meta dsl for platform modeling,
        konos dsl for layered architecture modeling and legio dsl for continuos integration modeling.
    ]]></description>

    <depends>io.intino.tara</depends>
    <depends>com.intellij.modules.java</depends>
    <idea-version since-build="192.3645"/>
    <extensions defaultExtensionNs="com.intellij">
        <httpRequestHandler implementation="io.intino.plugin.codeinsight.linemarkers.konos.WebModelingServer"/>
        <runConfigurationProducer implementation="io.intino.plugin.project.run.IntinoConfigurationProducer"/>
        <configurationType implementation="io.intino.plugin.project.run.IntinoConfigurationType"/>
        <codeInsight.lineMarkerProvider language="Tara"
                                        implementationClass="io.intino.plugin.codeinsight.linemarkers.RunLineMarkerProvider"/>
        <codeInsight.lineMarkerProvider language="Tara"
                                        implementationClass="io.intino.plugin.codeinsight.linemarkers.konos.ProcessLineMarkerProvider"/>
        <fileDocumentManagerListener
                implementation="io.intino.plugin.toolwindows.project.FileDocumentManagerListener"/>
        <annotator language="Tara" implementationClass="io.intino.plugin.codeinsight.annotators.DependencyAnnotator"/>
        <annotator language="Tara"
                   implementationClass="io.intino.plugin.codeinsight.annotators.BoxVersionAnnotator"/>
        <annotator language="Tara"
                   implementationClass="io.intino.plugin.codeinsight.annotators.ArtifactParametersAnnotator"/>
        <annotator language="Tara"
                   implementationClass="io.intino.plugin.codeinsight.annotators.ArtifactParameterAnnotator"/>
        <annotator language="Tara"
                   implementationClass="io.intino.plugin.codeinsight.annotators.RunConfigurationAnnotator"/>
        <annotator language="Tara" implementationClass="io.intino.plugin.codeinsight.annotators.MainClassAnnotator"/>
        <annotator language="Tara"
                   implementationClass="io.intino.plugin.codeinsight.annotators.LanguageDeclarationAnnotator"/>
        <annotator language="Tara"
                   implementationClass="io.intino.plugin.codeinsight.annotators.DuplicatedRepositoryAnnotator"/>
        <intentionAction>
            <className>io.intino.plugin.codeinsight.intentions.RemoveFromLocalRepository</className>
            <category>Remove version from local repository</category>
            <descriptionDirectoryName>RemoveFromLocalRepository</descriptionDirectoryName>
        </intentionAction>
        <projectService serviceImplementation="io.intino.plugin.settings.IntinoSettings"/>
        <projectConfigurable instance="io.intino.plugin.settings.IntinoSettingsComponent"/>
        <attachSourcesProvider
                implementation="io.intino.plugin.codeinsight.notifications.AttachSourcesFromExternalArtifactoryProvider"/>
        <fileDocumentManagerListener
                implementation="io.intino.plugin.project.ConfigurationListener"/>
        <!--        <fileType name="Konos" implementationClass="io.intino.plugin.file.konos.KonosFileType"/>-->
        <!--        <fileType name="Legio" implementationClass="io.intino.plugin.file.legio.LegioFileType"/>-->
        <!--        <fileType name="itrules" implementationClass="io.intino.plugin.itrules.lang.file.ItrulesFileType"/>-->
        <fileTypeFactory implementation="io.intino.plugin.file.IntinoFileTypeFactory"/>
        <fileTypeFactory implementation="io.intino.plugin.itrules.lang.file.ItrulesFileTypeFactory"/>
        <errorHandler implementation="io.intino.plugin.errorreporting.LegioErrorReportSubmitter"/>
        <copyPastePreProcessor implementation="io.intino.plugin.file.legio.LegioDependencyPasteProcessor"/>
        <problemFileHighlightFilter
                implementation="io.intino.plugin.codeinsight.annotators.LegioProblemFileHighlightFilter"/>
        <moduleBuilder builderClass="io.intino.plugin.project.IntinoModuleBuilder"/>
        <completion.contributor language="Tara"
                                implementationClass="io.intino.plugin.codeinsight.completion.LegioCompletionContributor"/>
        <codeInsight.lineMarkerProvider language="Tara"
                                        implementationClass="io.intino.plugin.codeinsight.linemarkers.InterfaceToJavaImplementation"/>
        <consoleActionsPostProcessor
                implementation="io.intino.plugin.toolwindows.output.ConsoleActionsProcessor"/>

        <fileDocumentManagerListener
                implementation="io.intino.plugin.actions.itrules.ItrFileDocumentManagerListener"/>
        <lang.parserDefinition language="Itrules"
                               implementationClass="io.intino.plugin.itrules.lang.parser.ItrulesParserDefinition"/>
        <lang.syntaxHighlighterFactory language="Itrules"
                                       implementationClass="io.intino.plugin.itrules.highlighting.ItrulesSyntaxHighlighterFactory"/>
        <lang.braceMatcher language="Itrules"
                           implementationClass="io.intino.plugin.itrules.highlighting.ItrulesBraceMatcher"/>
        <treeStructureProvider implementation="io.intino.plugin.itrules.project.view.ItrulesTreeStructureProvider"/>
        <!--        <webBrowserUrlProvider implementation="io.intino.plugin.codeinsight.linemarkers.WebBrowserProvider"/>-->
    </extensions>

    <actions>
        <group id="intino" text="Intino" popup="true" class="io.intino.plugin.actions.IntinoActionGroup">
            <add-to-group group-id="ToolsMenu" anchor="last"/>
        </group>
        <action id="NewTaraFile" class="io.intino.plugin.actions.CreateModelFileAction">
            <add-to-group group-id="NewGroup" anchor="first"/>
        </action>
        <action id="IntinoGenerate"
                class="io.intino.plugin.actions.IntinoGenerationAction"
                text="Generate intino code"
                description="generates all intino source code">
            <keyboard-shortcut first-keystroke="control alt G" keymap="$default"/>
            <add-to-group group-id="ToolbarMakeGroup" anchor="first"/>
        </action>
        <action id="InterfaceGeneration"
                class="io.intino.plugin.actions.InterfaceGenerationAction"
                text="Generate konos interface code"
                description="generates interface intino source code">
            <keyboard-shortcut first-keystroke="control alt k" keymap="$default"/>
        </action>
        <action id="PurgeAndReloadConfigurationAction"
                class="io.intino.plugin.actions.PurgeAndReloadConfigurationAction"
                text="Purge and reload Legio Configuration"
                description="Purge and reload configuration of project modules">
        </action>
        <action id="ReloadConfigurationAction"
                class="io.intino.plugin.actions.ReloadConfigurationAction" text="Reload Legio Configuration"
                description="Reload configuration of project modules">
            <keyboard-shortcut first-keystroke="control alt E" keymap="$default"/>
            <!--<add-to-group group-id="intino"/>-->
        </action>
        <action id="JoinToLegio" class="io.intino.plugin.actions.JoinToLegioAction"
                text="Join to Intino"
                description="Join module to legio or convert from maven">
            <add-to-group group-id="ProjectViewPopupMenu" anchor="last"/>
        </action>

        <action id="io.intino.plugin.actions.SubmitFeedbackAction"
                class="io.intino.plugin.actions.SubmitFeedbackAction"
                text="Submit Tara Feedback" description="You can report a bug or suggestion of plugin">
            <add-to-group group-id="HelpMenu" anchor="before" relative-to-action="TechnicalSupport"/>
        </action>

        <action id="NewItrFile" class="io.intino.plugin.actions.itrules.CreateItrFileAction">
            <add-to-group group-id="NewGroup" anchor="after" relative-to-action="NewFile"/>
        </action>

        <group id="ItrulesMenu" text="Itrules" description="Itrules Menu">
            <action id="itrules.toClass" class="io.intino.plugin.actions.itrules.TemplateGeneration"
                    text="Generate Java Template"
                    description="Generates the corresponding Java representation of the template">
                <keyboard-shortcut keymap="$default" first-keystroke="control shift G"/>
                <add-to-group group-id="EditorPopupMenu" anchor="last"/>
                <add-to-group group-id="ToolsMenu" anchor="last"/>
            </action>
        </group>
    </actions>

    <application-components>
        <component>
            <implementation-class>io.intino.plugin.project.LegioAppComponent</implementation-class>
        </component>

        <component>
            <implementation-class>io.intino.plugin.itrules.project.FileListener</implementation-class>
        </component>
    </application-components>
    <project-components>
        <component>
            <implementation-class>io.intino.plugin.toolwindows.cesarbot.CesarBotWindowComponent</implementation-class>
        </component>
        <component>
            <implementation-class>io.intino.plugin.settings.IntinoSettingsComponent</implementation-class>
        </component>
        <component>
            <implementation-class>io.intino.plugin.toolwindows.project.IntinoFactoryComponent</implementation-class>
        </component>
        <component>
            <implementation-class>io.intino.plugin.toolwindows.output.ConsoleWindowComponent</implementation-class>
        </component>
        <component>
            <implementation-class>io.intino.plugin.toolwindows.store.IntinoStoreComponent</implementation-class>
        </component>
        <component>
            <implementation-class>io.intino.plugin.toolwindows.dependencytree.DependencyTreeComponent
            </implementation-class>
        </component>
    </project-components>
</idea-plugin>