package io.intino.plugin.build.maven;

import io.intino.itrules.template.Rule;
import io.intino.itrules.template.Template;

import java.util.ArrayList;
import java.util.List;

import static io.intino.itrules.template.condition.predicates.Predicates.*;
import static io.intino.itrules.template.outputs.Outputs.*;

public class PomTemplate extends Template {

	public List<Rule> ruleSet() {
		List<Rule> rules = new ArrayList<>();
		rules.add(rule().condition(all(allTypes("pom"), allTypes("deployFile"))).output(literal("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n\t xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n<modelVersion>4.0.0</modelVersion>\n\t<groupId>")).output(placeholder("groupId", "lowercase")).output(literal("</groupId>\n\t<artifactId>")).output(placeholder("artifactId", "lowercase")).output(literal("</artifactId>\n\t<name>")).output(placeholder("artifactId", "lowercase")).output(literal("</name>\n\t<version>")).output(placeholder("version")).output(literal("</version>\n\t<repositories>\n\t    ")).output(placeholder("repository", "release").multiple("\n")).output(literal("\n\t</repositories>\n\t")).output(expression().output(literal("<dependencies")).output(literal(">")).output(literal("\n")).output(literal("\t")).output(placeholder("dependency").multiple("\n")).output(literal("\n")).output(literal("</dependencies")).output(literal(">"))).output(literal("\n</project>")));
		rules.add(rule().condition(allTypes("pom")).output(literal("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n\t\t xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<groupId>")).output(placeholder("groupId", "lowercase")).output(literal("</groupId>\n\t<artifactId>")).output(placeholder("artifactId", "lowercase")).output(literal("</artifactId>\n\t<name>")).output(placeholder("artifactId", "lowercase")).output(literal("</name>\n\t<version>")).output(placeholder("version")).output(literal("</version>\n\t<packaging>jar</packaging>\n\t")).output(expression().output(literal("<url")).output(literal(">")).output(placeholder("url")).output(literal("</url")).output(literal(">"))).output(literal("\n\t")).output(expression().output(literal("<description")).output(literal(">")).output(placeholder("description")).output(literal("</description")).output(literal(">"))).output(literal("\n\t")).output(expression().output(literal("<licenses")).output(literal(">")).output(literal("\n")).output(literal("\t")).output(placeholder("license")).output(literal("\n")).output(literal("</licenses")).output(literal(">"))).output(literal("\n\t")).output(expression().output(placeholder("scm"))).output(literal("\n\t")).output(expression().output(literal("<developers")).output(literal(">")).output(literal("\n")).output(literal("\t")).output(placeholder("developer").multiple("\n")).output(literal("\n")).output(literal("</developers")).output(literal(">"))).output(literal("\n\t<properties>\n\t\t<maven.compiler.source>")).output(placeholder("sdk")).output(literal("</maven.compiler.source>\n\t\t<maven.compiler.target>")).output(placeholder("sdk")).output(literal("</maven.compiler.target>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t</properties>\n\n\t<build>\n\t\t")).output(expression().output(literal("<testSourceDirectory")).output(literal(">")).output(literal("test</testSourceDirectory")).output(literal(">")).output(literal("\n")).output(literal("<outputDirectory")).output(literal(">")).output(placeholder("outDirectory")).output(literal("</outputDirectory")).output(literal(">")).output(literal("\n")).output(literal("<testOutputDirectory")).output(literal(">")).output(placeholder("testOutDirectory")).output(literal("</testOutputDirectory")).output(literal(">")).output(literal("\n")).output(literal("<directory")).output(literal(">")).output(placeholder("buildDirectory")).output(placeholder("artifactId", "lowercase")).output(literal("</directory")).output(literal(">"))).output(literal("\n\t\t")).output(expression().output(literal("<resources")).output(literal(">")).output(literal("\n")).output(literal("\t")).output(placeholder("resourceDirectory").multiple("\n")).output(literal("\n")).output(literal("</resources")).output(literal(">"))).output(literal("\n\t\t")).output(expression().output(literal("<testResources")).output(literal(">")).output(literal("\n")).output(literal("\t")).output(placeholder("resourceTestDirectory").multiple("\n")).output(literal("\n")).output(literal("</testResources")).output(literal(">"))).output(literal("\n\t\t<plugins>\n\t\t\t")).output(placeholder("dependencyCheck")).output(literal("\n\t\t\t<plugin>\n\t\t\t\t  <artifactId>maven-clean-plugin</artifactId>\n\t\t\t\t  <version>3.0.0</version>\n\t\t\t\t  <configuration>\n\t\t\t\t\t<skip>true</skip>\n\t\t\t\t  </configuration>\n\t\t\t\t</plugin>\n\t\t\t")).output(expression().output(placeholder("compile")).output(literal("<plugin")).output(literal(">")).output(literal("\n")).output(literal("\t<groupId")).output(literal(">")).output(literal("org.apache.maven.plugins</groupId")).output(literal(">")).output(literal("\n")).output(literal("\t<artifactId")).output(literal(">")).output(literal("maven-compiler-plugin</artifactId")).output(literal(">")).output(literal("\n")).output(literal("\t<version")).output(literal(">")).output(literal("3.11.0</version")).output(literal(">")).output(literal("\n")).output(literal("\t<executions")).output(literal(">")).output(literal("\n")).output(literal("\t\t<execution")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<id")).output(literal(">")).output(literal("default-compile</id")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<phase")).output(literal(">")).output(literal("compile</phase")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<goals")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t<goal")).output(literal(">")).output(literal("compile</goal")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t</goals")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<configuration")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t<skipMain")).output(literal(">")).output(literal("true</skipMain")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t</configuration")).output(literal(">")).output(literal("\n")).output(literal("\t\t</execution")).output(literal(">")).output(literal("\n")).output(literal("\t</executions")).output(literal(">")).output(literal("\n")).output(literal("</plugin")).output(literal(">"))).output(literal("\n\t\t\t")).output(expression().output(literal("\n")).output(literal("")).output(placeholder("extractedLibraries")).output(literal("\n")).output(literal("<plugin")).output(literal(">")).output(literal("\n")).output(literal("\t<groupId")).output(literal(">")).output(literal("org.apache.maven.plugins</groupId")).output(literal(">")).output(literal("\n")).output(literal("\t<artifactId")).output(literal(">")).output(literal("maven-shade-plugin</artifactId")).output(literal(">")).output(literal("\n")).output(literal("\t<version")).output(literal(">")).output(literal("3.5.1</version")).output(literal(">")).output(literal("\n")).output(literal("\t<executions")).output(literal(">")).output(literal("\n")).output(literal("\t\t<execution")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<phase")).output(literal(">")).output(literal("package</phase")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<goals")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t<goal")).output(literal(">")).output(literal("shade</goal")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t</goals")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<configuration")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t<artifactSet")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t\t<excludes")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t\t\t<exclude")).output(literal(">")).output(literal("junit:junit</exclude")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t\t\t<exclude")).output(literal(">")).output(literal("jmock:*</exclude")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t\t\t<exclude")).output(literal(">")).output(literal("org.apache.maven:lib:tests</exclude")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t\t</excludes")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t  \t</artifactSet")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<filters")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t<filter")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t\t<artifact")).output(literal(">")).output(literal("*:*</artifact")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t\t<excludes")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t\t\t<exclude")).output(literal(">")).output(literal("META-INF/*.SF</exclude")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t\t\t<exclude")).output(literal(">")).output(literal("META-INF/*.DSA</exclude")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t\t\t<exclude")).output(literal(">")).output(literal("META-INF/*.RSA</exclude")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t\t</excludes")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t</filter")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t</filters")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t</configuration")).output(literal(">")).output(literal("\n")).output(literal("\t\t</execution")).output(literal(">")).output(literal("\n")).output(literal("\t</executions")).output(literal(">")).output(literal("\n")).output(literal("</plugin")).output(literal(">")).output(literal("\n")).output(literal(""))).output(literal("<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-jar-plugin</artifactId>\n\t\t\t\t<version>3.3.0</version>\n\t\t\t\t<configuration>\n\t\t\t\t\t")).output(expression().output(literal("<finalName")).output(literal(">")).output(placeholder("finalName")).output(literal("</finalName")).output(literal(">"))).output(literal("\n\t\t\t\t\t<archive>\n\t\t\t\t\t\t<manifest>\n\t\t\t\t\t\t\t<addDefaultImplementationEntries>true</addDefaultImplementationEntries>\n\t\t\t\t\t\t\t<addClasspath>")).output(expression().output(placeholder("linkLibraries")).next(expression().output(literal("false")))).output(literal("</addClasspath>")).output(expression().output(literal("\n")).output(literal("<mainClass")).output(literal(">")).output(placeholder("mainClass")).output(literal("</mainClass")).output(literal(">"))).output(expression().output(literal("\n")).output(literal("<packageName")).output(literal(">")).output(placeholder("groupId", "lowercase")).output(literal("</packageName")).output(literal(">"))).output(literal("\n\t\t\t\t\t\t\t")).output(expression().output(placeholder("copyDependencies", "classpath"))).output(literal("\n\t\t\t\t\t\t</manifest>\n\t\t\t\t\t\t")).output(expression().output(literal("<manifestEntries")).output(literal(">")).output(literal("\n")).output(literal("\t<description")).output(literal(">")).output(placeholder("description")).output(literal("</description")).output(literal(">")).output(literal("\n")).output(literal("</manifestEntries")).output(literal(">"))).output(literal("\n\t\t\t\t\t\t<manifestSections>\n\t\t\t\t\t\t\t")).output(expression().output(literal("<manifestSection")).output(literal(">")).output(literal("\n")).output(literal("\t<name")).output(literal(">")).output(literal("parameters</name")).output(literal(">")).output(literal("\n")).output(literal("\t<manifestEntries")).output(literal(">")).output(literal("\n")).output(literal("\t  ")).output(placeholder("parameter").multiple("\n")).output(literal("\n")).output(literal("\t</manifestEntries")).output(literal(">")).output(literal("\n")).output(literal("</manifestSection")).output(literal(">"))).output(literal("\n\t\t\t\t\t\t\t")).output(expression().output(literal("<manifestSection")).output(literal(">")).output(literal("\n")).output(literal("\t<name")).output(literal(">")).output(literal("vmoptions</name")).output(literal(">")).output(literal("\n")).output(literal("\t<manifestEntries")).output(literal(">")).output(literal("\n")).output(literal("\t\t<value")).output(literal(">")).output(placeholder("vmOptions")).output(literal("</value")).output(literal(">")).output(literal("\n")).output(literal("\t</manifestEntries")).output(literal(">")).output(literal("\n")).output(literal("</manifestSection")).output(literal(">"))).output(literal("\n\t\t\t\t\t\t</manifestSections>\n\t\t\t\t\t</archive>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t\t")).output(expression().output(placeholder("copyDependencies"))).output(literal("\n\t\t\t")).output(expression().output(literal("\n")).output(literal("<plugin")).output(literal(">")).output(literal("\n")).output(literal("\t<groupId")).output(literal(">")).output(literal("org.codehaus.mojo</groupId")).output(literal(">")).output(literal("\n")).output(literal("\t<artifactId")).output(literal(">")).output(literal("build-helper-maven-plugin</artifactId")).output(literal(">")).output(literal("\n")).output(literal("\t<version")).output(literal(">")).output(literal("3.4.0</version")).output(literal(">")).output(literal("\n")).output(literal("\t<executions")).output(literal(">")).output(literal("\n")).output(literal("\t\t<execution")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<id")).output(literal(">")).output(literal("add-source</id")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<phase")).output(literal(">")).output(literal("generate-sources</phase")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<goals")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t<goal")).output(literal(">")).output(literal("add-source</goal")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t</goals")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<configuration")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t<sources")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t\t")).output(placeholder("sourceDirectory").multiple("\n")).output(literal("\n")).output(literal("\t\t\t\t\t")).output(placeholder("moduleDependency").multiple("\n")).output(literal("\n")).output(literal("\t\t\t\t</sources")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t</configuration")).output(literal(">")).output(literal("\n")).output(literal("\t\t</execution")).output(literal(">")).output(literal("\n")).output(literal("\t\t<execution")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<id")).output(literal(">")).output(literal("add-test-source</id")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<phase")).output(literal(">")).output(literal("generate-test-sources</phase")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<goals")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t<goal")).output(literal(">")).output(literal("add-test-source</goal")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t</goals")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<configuration")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t<sources")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t\t<source")).output(literal(">")).output(literal("test</source")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t\t<source")).output(literal(">")).output(literal("test-gen</source")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t\t")).output(placeholder("testModuleDependency").multiple("\n")).output(literal("\n")).output(literal("\t\t\t\t</sources")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t</configuration")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t</execution")).output(literal(">")).output(literal("\n")).output(literal("\t</executions")).output(literal(">")).output(literal("\n")).output(literal("</plugin")).output(literal(">"))).output(literal("\n\t\t\t")).output(expression().output(placeholder("gpgSign")).output(literal("<plugin")).output(literal(">")).output(literal("\n")).output(literal("\t<groupId")).output(literal(">")).output(literal("org.apache.maven.plugins</groupId")).output(literal(">")).output(literal("\n")).output(literal("\t<artifactId")).output(literal(">")).output(literal("maven-gpg-plugin</artifactId")).output(literal(">")).output(literal("\n")).output(literal("\t<version")).output(literal(">")).output(literal("3.2.7</version")).output(literal(">")).output(literal("\n")).output(literal("\t<executions")).output(literal(">")).output(literal("\n")).output(literal("\t\t<execution")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<id")).output(literal(">")).output(literal("sign-artifacts</id")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<phase")).output(literal(">")).output(literal("verify</phase")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<goals")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t<goal")).output(literal(">")).output(literal("sign</goal")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t</goals")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<configuration")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t<keyname")).output(literal(">")).output(literal("$")).output(literal("{gpg.keyname}</keyname")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t<passphraseServerId")).output(literal(">")).output(literal("$")).output(literal("{gpg.keyname}</passphraseServerId")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t</configuration")).output(literal(">")).output(literal("\n")).output(literal("\t\t</execution")).output(literal(">")).output(literal("\n")).output(literal("\t</executions")).output(literal(">")).output(literal("\n")).output(literal("</plugin")).output(literal(">"))).output(literal("\n\t\t\t")).output(expression().output(placeholder("attachSources")).output(literal("<plugin")).output(literal(">")).output(literal("\n")).output(literal("\t<groupId")).output(literal(">")).output(literal("org.apache.maven.plugins</groupId")).output(literal(">")).output(literal("\n")).output(literal("\t<artifactId")).output(literal(">")).output(literal("maven-source-plugin</artifactId")).output(literal(">")).output(literal("\n")).output(literal("\t<version")).output(literal(">")).output(literal("3.3.1</version")).output(literal(">")).output(literal("\n")).output(literal("\t<executions")).output(literal(">")).output(literal("\n")).output(literal("\t\t<execution")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<id")).output(literal(">")).output(literal("attach-sources</id")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<goals")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t<goal")).output(literal(">")).output(literal("jar-no-fork</goal")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t</goals")).output(literal(">")).output(literal("\n")).output(literal("\t\t</execution")).output(literal(">")).output(literal("\n")).output(literal("\t</executions")).output(literal(">")).output(literal("\n")).output(literal("</plugin")).output(literal(">"))).output(literal("\n\t\t\t")).output(expression().output(placeholder("attachJavaDoc")).output(literal("<plugin")).output(literal(">")).output(literal("\n")).output(literal("\t<groupId")).output(literal(">")).output(literal("org.apache.maven.plugins</groupId")).output(literal(">")).output(literal("\n")).output(literal("\t<artifactId")).output(literal(">")).output(literal("maven-javadoc-plugin</artifactId")).output(literal(">")).output(literal("\n")).output(literal("\t<version")).output(literal(">")).output(literal("3.11.2</version")).output(literal(">")).output(literal("\n")).output(literal("\t<executions")).output(literal(">")).output(literal("\n")).output(literal("\t\t<execution")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<id")).output(literal(">")).output(literal("attach-javadocs</id")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t<goals")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t\t<goal")).output(literal(">")).output(literal("jar</goal")).output(literal(">")).output(literal("\n")).output(literal("\t\t\t</goals")).output(literal(">")).output(literal("\n")).output(literal("\t\t</execution")).output(literal(">")).output(literal("\n")).output(literal("\t</executions")).output(literal(">")).output(literal("\n")).output(literal("\t</plugin")).output(literal(">"))).output(literal("\n\t\t\t")).output(expression().output(literal("<plugin")).output(literal(">")).output(literal("\n")).output(literal("\t<groupId")).output(literal(">")).output(literal("org.sonatype.central</groupId")).output(literal(">")).output(literal("\n")).output(literal("\t<artifactId")).output(literal(">")).output(literal("central-publishing-maven-plugin</artifactId")).output(literal(">")).output(literal("\n")).output(literal("\t<version")).output(literal(">")).output(literal("0.7.0</version")).output(literal(">")).output(literal("\n")).output(literal("\t<extensions")).output(literal(">")).output(literal("true</extensions")).output(literal(">")).output(literal("\n")).output(literal("\t<configuration")).output(literal(">")).output(literal("\n")).output(literal("\t\t<publishingServerId")).output(literal(">")).output(placeholder("sonatype")).output(literal("</publishingServerId")).output(literal(">")).output(literal("\n")).output(literal("\t\t <autoPublish")).output(literal(">")).output(literal("true</autoPublish")).output(literal(">")).output(literal("\n")).output(literal("\t</configuration")).output(literal(">")).output(literal("\n")).output(literal("</plugin")).output(literal(">"))).output(literal("\n\t\t\t")).output(expression().output(placeholder("osx"))).output(literal("\n\t\t\t")).output(expression().output(placeholder("windows"))).output(literal("\n\t\t\t")).output(expression().output(placeholder("mavenPlugin").multiple("\n"))).output(literal("\n\t\t</plugins>\n\t</build>\n\n\t<repositories>\n\t\t")).output(placeholder("repository", "release").multiple("\n")).output(literal("\n\t</repositories>\n\n\t")).output(expression().output(literal("<distributionManagement")).output(literal(">")).output(literal("\n")).output(literal("\t")).output(placeholder("repository", "distribution").multiple("\n")).output(literal("\n")).output(literal("</distributionManagement")).output(literal(">"))).output(literal("\n\n\t<dependencies>\n\t\t")).output(placeholder("dependency").multiple("\n")).output(literal("\n\t</dependencies>\n</project>")));
		rules.add(rule().condition(trigger("sourcedirectory")).output(literal("<source>")).output(placeholder("")).output(literal("</source>")));
		rules.add(rule().condition(trigger("testmoduledependency")).output(literal("<source>")).output(placeholder("")).output(literal("</source>")));
		rules.add(rule().condition(trigger("moduledependency")).output(literal("<source>")).output(placeholder("")).output(literal("</source>")));
		rules.add(rule().condition(trigger("identifier")).output(placeholder("identifier")));
		rules.add(rule().condition(trigger("dependencycheck")).output(literal("<plugin>\n\t<groupId>org.owasp</groupId>\n\t<artifactId>dependency-check-maven</artifactId>\n\t<version>7.4.4</version>\n\t<configuration>\n\t\t<cveStartYear>2012</cveStartYear>\n\t\t<cveValidForHours>24</cveValidForHours>\n\t\t<failOnError>false</failOnError>\n\t</configuration>\n\t<executions>\n\t\t<execution>\n\t\t\t<goals>\n\t\t\t\t<goal>check</goal>\n\t\t\t</goals>\n\t\t</execution>\n\t</executions>\n</plugin>")));
		rules.add(rule().condition(trigger("resourcedirectory")).output(literal("<resource><directory>")).output(placeholder("")).output(literal("</directory></resource>")));
		rules.add(rule().condition(trigger("resourcetestdirectory")).output(literal("<testResource><directory>")).output(placeholder("")).output(literal("</directory></testResource>")));
		rules.add(rule().condition(all(all(allTypes("repository"), allTypes("Distribution")), trigger("distribution"))).output(literal("<repository>\n\t<id>")).output(placeholder("name")).output(literal("</id>\n\t<name>")).output(placeholder("name")).output(literal("</name>\n\t<url>")).output(placeholder("url")).output(literal("</url>\n</repository>")));
		rules.add(rule().condition(trigger("developer")).output(literal(" <developer>\n\t <name>")).output(placeholder("name")).output(literal("</name>\n\t <email>")).output(placeholder("email")).output(literal("</email>\n\t <organization>")).output(placeholder("organization")).output(literal("</organization>\n\t <organizationUrl>")).output(placeholder("organizationUrl")).output(literal("</organizationUrl>\n</developer>")));
		rules.add(rule().condition(trigger("distribution")));
		rules.add(rule().condition(all(all(allTypes("repository"), not(allTypes("Distribution"))), trigger("release"))).output(literal("<repository>\n\t<id>")).output(placeholder("name")).output(placeholder("type")).output(literal("</id>\n\t<url>")).output(placeholder("url")).output(literal("</url>\n\t")).output(expression().output(literal("<snapshots")).output(literal(">")).output(literal("<enabled")).output(literal(">")).output(placeholder("snapshot")).output(literal("</enabled")).output(literal(">")).output(literal("</snapshots")).output(literal(">"))).output(literal("\n</repository>")));
		rules.add(rule().condition(trigger("parameter")).output(literal("<")).output(placeholder("name")).output(literal("_name>")).output(placeholder("name")).output(literal("</")).output(placeholder("name")).output(literal("_name>\n<")).output(placeholder("name")).output(literal("_description>")).output(expression().output(placeholder("description")).next(expression().output(literal("no description")))).output(literal("</")).output(placeholder("name")).output(literal("_description>\n<")).output(placeholder("name")).output(literal("_required>")).output(expression().output(placeholder("required")).next(expression().output(literal("false")))).output(literal("</")).output(placeholder("name")).output(literal("_required>\n<")).output(placeholder("name")).output(literal("_defaultValue>")).output(expression().output(placeholder("value"))).output(literal("</")).output(placeholder("name")).output(literal("_defaultValue>")));
		rules.add(rule().condition(all(allTypes("dependency"), trigger("dependency"))).output(literal("<dependency>\n\t<groupId>")).output(placeholder("groupId")).output(literal("</groupId>\n\t<artifactId>")).output(placeholder("artifactId")).output(literal("</artifactId>\n\t<scope>")).output(placeholder("scope", "lowercase")).output(literal("</scope>\n\t<version>")).output(placeholder("version")).output(literal("</version>\n\t")).output(expression().output(literal("<exclusions")).output(literal(">")).output(literal("\n")).output(literal("\t")).output(placeholder("exclusion").multiple("\n")).output(literal("\n")).output(literal("</exclusions")).output(literal(">"))).output(literal("\n</dependency>")));
		rules.add(rule().condition(trigger("exclusion")).output(literal("<exclusion>\n\t<groupId>")).output(placeholder("groupId")).output(literal("</groupId>\n\t<artifactId>")).output(placeholder("artifactId")).output(literal("</artifactId>\n</exclusion>")));
		rules.add(rule().condition(trigger("scm")).output(literal("<scm>\n\t<url>")).output(placeholder("url")).output(literal("</url>\n\t<connection>")).output(placeholder("connection")).output(literal("</connection>\n\t<developerConnection>")).output(placeholder("developerConnection")).output(literal("</developerConnection>\n\t<tag>")).output(placeholder("tag")).output(literal("</tag>\n</scm>\n")));
		rules.add(rule().condition(all(allTypes("GPL"), trigger("license"))).output(literal("<license>\n\t<name>The GNU General Public License v3.0</name>\n\t<url>https://www.gnu.org/licenses/gpl-3.0.txt</url>\n</license>")));
		rules.add(rule().condition(all(allTypes("LGPL"), trigger("license"))).output(literal("<license>\n\t<name>GNU Lesser General Public License v3.0</name>\n\t<url>https://www.gnu.org/licenses/lgpl-3.0.txt</url>\n</license>")));
		rules.add(rule().condition(all(allTypes("BSD"), trigger("license"))).output(literal("<license>\n\t<name>BSD 3-Clause License</name>\n\t<url>https://opensource.org/licenses/BSD-3-Clause</url>\n</license>")));
		rules.add(rule().condition(trigger("osx")).output(literal("<plugin>\n\t<groupId>sh.tak.appbundler</groupId>\n\t<artifactId>appbundle-maven-plugin</artifactId>\n\t<version>1.2.0</version>\n\t<configuration>\n\t\t<mainClass>")).output(placeholder("mainClass")).output(literal("</mainClass>\n\t\t")).output(expression().output(literal("<iconFile")).output(literal(">")).output(placeholder("icon")).output(literal("</iconFile")).output(literal(">"))).output(literal("\n\t\t<jvmVersion>1.8+</jvmVersion>\n\t</configuration>\n\t<executions>\n\t\t<execution>\n\t\t\t<phase>package</phase>\n\t\t\t<goals>\n\t\t\t\t<goal>bundle</goal>\n\t\t\t</goals>\n\t\t</execution>\n\t</executions>\n</plugin>")));
		rules.add(rule().condition(trigger("windows")).output(literal("<plugin>\n\t<groupId>com.akathist.maven.plugins.launch4j</groupId>\n\t<artifactId>launch4j-maven-plugin</artifactId>\n\t<executions>\n\t\t<execution>\n\t\t<id>l4j-clui</id>\n\t\t<phase>package</phase>\n\t\t<goals><goal>launch4j</goal></goals>\n\t\t\t<configuration>\n\t\t\t\t<headerType>console</headerType>\n\t\t\t\t<outfile>")).output(placeholder("out")).output(literal("${project.build.finalName}.exe</outfile>\n\t\t\t\t<icon>")).output(placeholder("icon")).output(literal("</icon>\n\t\t\t\t<jar>")).output(placeholder("out")).output(placeholder("name", "lowercase")).output(literal("/")).output(placeholder("name", "lowercase")).output(literal("-")).output(placeholder("version")).output(literal(".jar</jar>\n\t\t\t\t<errTitle>")).output(placeholder("name")).output(literal("</errTitle>\n\t\t\t\t<classPath>\n\t\t\t\t\t<mainClass>")).output(placeholder("mainClass")).output(literal("</mainClass>\n\t\t\t\t\t<addDependencies>true</addDependencies>\n\t\t\t\t\t<jarLocation>")).output(placeholder("prefix")).output(literal("</jarLocation>\n\t\t\t\t</classPath>\n\t\t\t\t<jre>\n\t\t\t\t\t<minVersion>11</minVersion>\n\t\t\t\t\t<opts>\n\t\t\t\t\t\t<opt>-Djava.endorsed.dirs=./endorsed</opt>\n\t\t\t\t\t</opts>\n\t\t\t\t</jre>\n\t\t\t\t<versionInfo>\n\t\t\t\t\t<fileVersion>")).output(placeholder("version")).output(literal(".0</fileVersion>\n\t\t\t\t\t<txtFileVersion>text</txtFileVersion>\n\t\t\t\t\t<fileDescription>text</fileDescription>\n\t\t\t\t\t<copyright>text</copyright>\n\t\t\t\t\t<productVersion>")).output(placeholder("version")).output(literal(".0</productVersion>\n\t\t\t\t\t<txtProductVersion>text</txtProductVersion>\n\t\t\t\t\t<productName>")).output(placeholder("name")).output(literal("</productName>\n\t\t\t\t\t<internalName>")).output(placeholder("name")).output(literal("</internalName>\n\t\t\t\t\t<originalFilename>")).output(placeholder("name")).output(literal(".exe</originalFilename>\n\t\t\t\t</versionInfo>\n\t\t\t</configuration>\n\t\t</execution>\n\t</executions>\n</plugin>")));
		rules.add(rule().condition(all(allTypes("copyDependencies"), trigger("classpath"))).output(literal("<classpathPrefix>")).output(expression().output(placeholder("classpathPrefix")).next(expression().output(literal("dependency")))).output(literal("/</classpathPrefix>")));
		rules.add(rule().condition(trigger("copydependencies")).output(literal("<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-dependency-plugin</artifactId>\n\t<version>3.6.1</version>\n\t<executions>\n\t\t<execution>\n\t\t\t<id>copy-dependencies</id>\n\t\t\t<phase>package</phase>\n\t\t\t<goals>\n\t\t\t\t<goal>copy-dependencies</goal>\n\t\t\t</goals>\n\t\t\t<configuration>\n\t\t\t\t")).output(expression().output(literal("<outputDirectory")).output(literal(">")).output(literal("$")).output(literal("{project.build.directory}/")).output(placeholder("classpathPrefix")).output(literal("</outputDirectory")).output(literal(">"))).output(literal("\n\t\t\t\t<useBaseVersion>false</useBaseVersion>\n\t\t\t\t<includeScope>runtime</includeScope>\n\t\t\t\t<overWriteReleases>false</overWriteReleases>\n\t\t\t\t<overWriteSnapshots>false</overWriteSnapshots>\n\t\t\t\t<overWriteIfNewer>true</overWriteIfNewer>\n\t\t\t</configuration>\n\t\t</execution>\n\t</executions>\n</plugin>")));
		return rules;
	}

	public String render(Object object) {
		return new io.intino.itrules.Engine(this).render(object);
	}

	public String render(Object object, java.util.Map<String, io.intino.itrules.Formatter> formatters) {
		return new io.intino.itrules.Engine(this).addAll(formatters).render(object);
	}
}