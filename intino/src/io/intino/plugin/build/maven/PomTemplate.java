package io.intino.plugin.build.maven;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class PomTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
				rule().condition((type("pom")), (type("deployFile"))).output(literal("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n\t xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n<modelVersion>4.0.0</modelVersion>\n\t<groupId>")).output(mark("groupId", "lowercase")).output(literal("</groupId>\n\t<artifactId>")).output(mark("artifactId", "lowercase")).output(literal("</artifactId>\n\t<name>")).output(mark("artifactId", "lowercase")).output(literal("</name>\n\t<version>")).output(mark("version")).output(literal("</version>\n\n\t<repositories>\n\t\t\t")).output(mark("repository", "release").multiple("\n")).output(literal("\n\t</repositories>\n</project>")),
				rule().condition((type("pom"))).output(literal("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n\t\t xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<groupId>")).output(mark("groupId", "lowercase")).output(literal("</groupId>\n\t<artifactId>")).output(mark("artifactId", "lowercase")).output(literal("</artifactId>\n\t<name>")).output(mark("artifactId", "lowercase")).output(literal("</name>\n\t<version>")).output(mark("version")).output(literal("</version>\n\t<packaging>jar</packaging>\n\t")).output(expression().output(literal("<url>")).output(mark("url")).output(literal("</url>"))).output(literal("\n\t")).output(expression().output(literal("<description>")).output(mark("description")).output(literal("</description>"))).output(literal("\n\t")).output(expression().output(literal("<licenses>")).output(literal("\n")).output(literal("\t")).output(mark("license")).output(literal("\n")).output(literal("</licenses>"))).output(literal("\n\t")).output(expression().output(mark("scm"))).output(literal("\n\t")).output(expression().output(literal("<developers>")).output(literal("\n")).output(literal("\t")).output(mark("developer").multiple("\n")).output(literal("\n")).output(literal("</developers>"))).output(literal("\n\t")).output(expression().output(literal("<properties>")).output(literal("\n")).output(literal("\t<maven.compiler.source>")).output(mark("sdk")).output(literal("</maven.compiler.source>")).output(literal("\n")).output(literal("\t<maven.compiler.target>")).output(mark("sdk")).output(literal("</maven.compiler.target>")).output(literal("\n")).output(literal("\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>")).output(literal("\n")).output(literal("\t<sonar.language>java</sonar.language>")).output(literal("\n")).output(literal("\t<sonar.login></sonar.login>")).output(literal("\n")).output(literal("\t<sonar.password></sonar.password>")).output(literal("\n")).output(literal("</properties>"))).output(literal("\n\n\t<build>\n\t\t")).output(expression().output(literal("<testSourceDirectory>test</testSourceDirectory>")).output(literal("\n")).output(literal("<outputDirectory>")).output(mark("outDirectory")).output(literal("</outputDirectory>")).output(literal("\n")).output(literal("<testOutputDirectory>")).output(mark("testOutDirectory")).output(literal("</testOutputDirectory>")).output(literal("\n")).output(literal("<directory>")).output(mark("buildDirectory")).output(mark("artifactId", "lowercase")).output(literal("</directory>"))).output(literal("\n\t\t")).output(expression().output(literal("<resources>")).output(literal("\n")).output(literal("\t")).output(mark("resourceDirectory").multiple("\n")).output(literal("\n")).output(literal("</resources>"))).output(literal("\n\t\t")).output(expression().output(literal("<testResources>")).output(literal("\n")).output(literal("\t")).output(mark("resourceTestDirectory").multiple("\n")).output(literal("\n")).output(literal("</testResources>"))).output(literal("\n\t\t<plugins>\n\t\t\t")).output(mark("dependencyCheck")).output(literal("\n\t\t    <plugin>\n                  <artifactId>maven-clean-plugin</artifactId>\n                  <version>3.0.0</version>\n                  <configuration>\n                    <skip>true</skip>\n                  </configuration>\n                </plugin>\n\t\t    ")).output(expression().output(mark("compile")).output(literal("<plugin>")).output(literal("\n")).output(literal("                <groupId>org.apache.maven.plugins</groupId>")).output(literal("\n")).output(literal("                <artifactId>maven-compiler-plugin</artifactId>")).output(literal("\n")).output(literal("                <version>3.8.0</version>")).output(literal("\n")).output(literal("                <executions>")).output(literal("\n")).output(literal("                    <execution>")).output(literal("\n")).output(literal("                        <id>default-compile</id>")).output(literal("\n")).output(literal("                        <phase>compile</phase>")).output(literal("\n")).output(literal("                        <goals>")).output(literal("\n")).output(literal("                            <goal>compile</goal>")).output(literal("\n")).output(literal("                        </goals>")).output(literal("\n")).output(literal("                        <configuration>")).output(literal("\n")).output(literal("                            <skipMain>true</skipMain>")).output(literal("\n")).output(literal("                        </configuration>")).output(literal("\n")).output(literal("                    </execution>")).output(literal("\n")).output(literal("                </executions>")).output(literal("\n")).output(literal("            </plugin>"))).output(literal("\n\t\t    ")).output(expression().output(literal("\n")).output(literal("\t")).output(mark("extractedLibraries")).output(literal("\n")).output(literal("\t<plugin>")).output(literal("\n")).output(literal("\t\t<groupId>org.apache.maven.plugins</groupId>")).output(literal("\n")).output(literal("\t\t<artifactId>maven-shade-plugin</artifactId>")).output(literal("\n")).output(literal("\t\t<version>3.1.0</version>")).output(literal("\n")).output(literal("\t\t<executions>")).output(literal("\n")).output(literal("\t\t\t<execution>")).output(literal("\n")).output(literal("\t\t\t\t<phase>package</phase>")).output(literal("\n")).output(literal("\t\t\t\t<goals>")).output(literal("\n")).output(literal("\t\t\t\t\t<goal>shade</goal>")).output(literal("\n")).output(literal("\t\t\t\t</goals>")).output(literal("\n")).output(literal("\t\t\t\t<configuration>")).output(literal("\n")).output(literal("\t\t\t\t\t<artifactSet>")).output(literal("\n")).output(literal("\t\t\t\t\t\t<excludes>")).output(literal("\n")).output(literal("\t\t\t\t\t\t\t<exclude>junit:junit</exclude>")).output(literal("\n")).output(literal("\t\t\t\t\t\t\t<exclude>jmock:*</exclude>")).output(literal("\n")).output(literal("\t\t\t\t\t\t\t<exclude>org.apache.maven:lib:tests</exclude>")).output(literal("\n")).output(literal("\t\t\t\t\t\t</excludes>")).output(literal("\n")).output(literal("\t\t\t\t  \t</artifactSet>")).output(literal("\n")).output(literal("                        <filters>")).output(literal("\n")).output(literal("                            <filter>")).output(literal("\n")).output(literal("                                <artifact>*:*</artifact>")).output(literal("\n")).output(literal("                                <excludes>")).output(literal("\n")).output(literal("                                    <exclude>META-INF/*.SF</exclude>")).output(literal("\n")).output(literal("                                    <exclude>META-INF/*.DSA</exclude>")).output(literal("\n")).output(literal("                                    <exclude>META-INF/*.RSA</exclude>")).output(literal("\n")).output(literal("                                </excludes>")).output(literal("\n")).output(literal("                            </filter>")).output(literal("\n")).output(literal("                        </filters>")).output(literal("\n")).output(literal("\t\t\t\t</configuration>")).output(literal("\n")).output(literal("\t\t\t</execution>")).output(literal("\n")).output(literal("\t\t</executions>")).output(literal("\n")).output(literal("\t</plugin>")).output(literal("\n")).output(literal("\t"))).output(literal("<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-jar-plugin</artifactId>\n\t\t\t\t<version>3.2.0</version>\n\t\t\t\t<configuration>\n\t\t\t\t\t")).output(expression().output(literal("<finalName>")).output(mark("finalName")).output(literal("</finalName>"))).output(literal("\n\t\t\t\t\t<archive>\n\t\t\t\t\t\t<manifest>\n                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>\n\t\t\t\t\t\t\t<addClasspath>")).output(expression().output(mark("linkLibraries")).next(expression().output(literal("false")))).output(literal("</addClasspath>")).output(expression().output(literal("\n")).output(literal("<mainClass>")).output(mark("mainClass")).output(literal("</mainClass>"))).output(literal("\n\t\t\t\t\t\t\t")).output(expression().output(mark("copyDependencies", "classpath"))).output(literal("\n\t\t\t\t\t\t</manifest>\n\t\t\t\t\t\t<manifestSections>\n                            ")).output(expression().output(literal("<manifestSection>")).output(literal("\n")).output(literal("                                <name>parameters</name>")).output(literal("\n")).output(literal("                                <manifestEntries>")).output(literal("\n")).output(literal("                                  ")).output(mark("parameter").multiple("\n")).output(literal("\n")).output(literal("                                </manifestEntries>")).output(literal("\n")).output(literal("                            </manifestSection>"))).output(literal("\n                            ")).output(expression().output(literal("<manifestSection>")).output(literal("\n")).output(literal("                                <name>vmoptions</name>")).output(literal("\n")).output(literal("                                <manifestEntries>")).output(literal("\n")).output(literal("                                    <value>")).output(mark("vmOptions")).output(literal("</value>")).output(literal("\n")).output(literal("                                </manifestEntries>")).output(literal("\n")).output(literal("                            </manifestSection>"))).output(literal("\n                        </manifestSections>\n\t\t\t\t\t</archive>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t\t")).output(expression().output(mark("copyDependencies"))).output(literal("\n\t\t\t")).output(expression().output(literal("\n")).output(literal("<plugin>")).output(literal("\n")).output(literal("\t<groupId>org.codehaus.mojo</groupId>")).output(literal("\n")).output(literal("\t<artifactId>build-helper-maven-plugin</artifactId>")).output(literal("\n")).output(literal("\t<version>1.9.1</version>")).output(literal("\n")).output(literal("\t<executions>")).output(literal("\n")).output(literal("\t\t<execution>")).output(literal("\n")).output(literal("\t\t\t<id>add-source</id>")).output(literal("\n")).output(literal("\t\t\t<phase>generate-sources</phase>")).output(literal("\n")).output(literal("\t\t\t<goals>")).output(literal("\n")).output(literal("\t\t\t\t<goal>add-source</goal>")).output(literal("\n")).output(literal("\t\t\t</goals>")).output(literal("\n")).output(literal("\t\t\t<configuration>")).output(literal("\n")).output(literal("\t\t\t\t<sources>")).output(literal("\n")).output(literal("\t\t\t\t\t")).output(mark("sourceDirectory").multiple("\n")).output(literal("\n")).output(literal("\t\t\t\t\t")).output(mark("moduleDependency").multiple("\n")).output(literal("\n")).output(literal("\t\t\t\t</sources>")).output(literal("\n")).output(literal("\t\t\t</configuration>")).output(literal("\n")).output(literal("\t\t</execution>")).output(literal("\n")).output(literal("\t\t<execution>")).output(literal("\n")).output(literal("\t\t\t<id>add-test-source</id>")).output(literal("\n")).output(literal("\t\t\t<phase>generate-test-sources</phase>")).output(literal("\n")).output(literal("\t\t\t<goals>")).output(literal("\n")).output(literal("\t\t\t\t<goal>add-test-source</goal>")).output(literal("\n")).output(literal("\t\t\t</goals>")).output(literal("\n")).output(literal("\t\t\t<configuration>")).output(literal("\n")).output(literal("\t\t\t\t<sources>")).output(literal("\n")).output(literal("\t\t\t\t    <source>test</source>")).output(literal("\n")).output(literal("\t\t\t\t\t<source>test-gen</source>")).output(literal("\n")).output(literal("\t\t\t\t\t")).output(mark("testModuleDependency").multiple("\n")).output(literal("\n")).output(literal("\t\t\t\t</sources>")).output(literal("\n")).output(literal("\t\t\t</configuration>")).output(literal("\n")).output(literal("\t\t\t</execution>")).output(literal("\n")).output(literal("\t</executions>")).output(literal("\n")).output(literal("</plugin>"))).output(literal("\n\t\t\t")).output(expression().output(mark("gpgSign")).output(literal("<plugin>")).output(literal("\n")).output(literal("\t<groupId>org.apache.maven.plugins</groupId>")).output(literal("\n")).output(literal("\t<artifactId>maven-gpg-plugin</artifactId>")).output(literal("\n")).output(literal("\t<version>1.5</version>")).output(literal("\n")).output(literal("\t<executions>")).output(literal("\n")).output(literal("\t  <execution>")).output(literal("\n")).output(literal("\t\t<id>sign-artifacts</id>")).output(literal("\n")).output(literal("\t\t<phase>verify</phase>")).output(literal("\n")).output(literal("\t\t<goals>")).output(literal("\n")).output(literal("\t\t  <goal>sign</goal>")).output(literal("\n")).output(literal("\t\t</goals>")).output(literal("\n")).output(literal("\t  </execution>")).output(literal("\n")).output(literal("\t</executions>")).output(literal("\n")).output(literal("</plugin>"))).output(literal("\n\t\t\t")).output(expression().output(mark("attachSources")).output(literal("<plugin>")).output(literal("\n")).output(literal("\t<groupId>org.apache.maven.plugins</groupId>")).output(literal("\n")).output(literal("\t<artifactId>maven-source-plugin</artifactId>")).output(literal("\n")).output(literal("\t<version>3.0.1</version>")).output(literal("\n")).output(literal("\t<executions>")).output(literal("\n")).output(literal("\t\t<execution>")).output(literal("\n")).output(literal("\t\t\t<id>attach-sources</id>")).output(literal("\n")).output(literal("\t\t\t<goals>")).output(literal("\n")).output(literal("\t\t\t\t<goal>jar-no-fork</goal>")).output(literal("\n")).output(literal("\t\t\t</goals>")).output(literal("\n")).output(literal("\t\t</execution>")).output(literal("\n")).output(literal("\t</executions>")).output(literal("\n")).output(literal("</plugin>"))).output(literal("\n\t\t\t")).output(expression().output(mark("attachJavaDoc")).output(literal("<plugin>")).output(literal("\n")).output(literal("\t<groupId>org.apache.maven.plugins</groupId>")).output(literal("\n")).output(literal("\t<artifactId>maven-javadoc-plugin</artifactId>")).output(literal("\n")).output(literal("\t<version>3.2.0</version>")).output(literal("\n")).output(literal("\t<executions>")).output(literal("\n")).output(literal("\t\t<execution>")).output(literal("\n")).output(literal("\t\t\t<id>attach-javadocs</id>")).output(literal("\n")).output(literal("\t\t\t<goals>")).output(literal("\n")).output(literal("\t\t\t\t<goal>jar</goal>")).output(literal("\n")).output(literal("\t\t\t</goals>")).output(literal("\n")).output(literal("\t\t</execution>")).output(literal("\n")).output(literal("\t</executions>")).output(literal("\n")).output(literal("\t</plugin>"))).output(literal("\n\t\t\t")).output(expression().output(mark("osx"))).output(literal("\n\t\t\t")).output(expression().output(mark("windows"))).output(literal("\n\t\t\t")).output(expression().output(mark("mavenPlugin").multiple("\n"))).output(literal("\n\t\t</plugins>\n\t</build>\n\n\n\t<repositories>\n\t\t")).output(mark("repository", "release").multiple("\n")).output(literal("\n\t</repositories>\n\n\t<distributionManagement>\n\t\t")).output(mark("repository", "distribution").multiple("\n")).output(literal("\n\t</distributionManagement>\n\n\t<dependencies>\n\t\t")).output(mark("dependency").multiple("\n")).output(literal("\n\t</dependencies>\n</project>")),
				rule().condition((trigger("sourcedirectory"))).output(literal("<source>")).output(mark("")).output(literal("</source>")),
				rule().condition((trigger("testmoduledependency"))).output(literal("<source>")).output(mark("")).output(literal("</source>")),
				rule().condition((trigger("moduledependency"))).output(literal("<source>")).output(mark("")).output(literal("</source>")),
				rule().condition((trigger("dependencycheck"))).output(literal("<plugin>\n\t<groupId>org.owasp</groupId>\n\t<artifactId>dependency-check-maven</artifactId>\n\t<version>7.1.0</version>\n\t<executions>\n\t\t<execution>\n\t\t\t<goals>\n\t\t\t\t<goal>check</goal>\n\t\t\t</goals>\n\t\t</execution>\n\t</executions>\n</plugin>")),
				rule().condition((trigger("resourcedirectory"))).output(literal("<resource><directory>")).output(mark("")).output(literal("</directory></resource>")),
				rule().condition((trigger("resourcetestdirectory"))).output(literal("<testResource><directory>")).output(mark("")).output(literal("</directory></testResource>")),
				rule().condition((type("repository")), (type("Distribution")), (trigger("distribution"))).output(literal("<repository>\n\t<id>")).output(mark("name")).output(literal("</id>\n\t<name>")).output(mark("name")).output(literal("</name>\n\t<url>")).output(mark("url")).output(literal("</url>\n</repository>")),
				rule().condition((trigger("developer"))).output(literal(" <developer>\n      <name>")).output(mark("name")).output(literal("</name>\n      <email>")).output(mark("email")).output(literal("</email>\n      <organization>")).output(mark("organization")).output(literal("</organization>\n      <organizationUrl>")).output(mark("organizationUrl")).output(literal("</organizationUrl>\n</developer>")),
				rule().condition((trigger("distribution"))),
				rule().condition((type("repository")), not(type("Distribution")), (trigger("release"))).output(literal("<repository>\n\t<id>")).output(mark("name")).output(mark("type")).output(literal("</id>\n\t<url>")).output(mark("url")).output(literal("</url>\n\t")).output(expression().output(literal("<snapshots><enabled>")).output(mark("snapshot")).output(literal("</enabled></snapshots>"))).output(literal("\n</repository>")),
				rule().condition((trigger("parameter"))).output(literal("<_")).output(mark("key")).output(literal(">")).output(mark("")).output(expression().output(literal("##")).output(mark("description"))).output(literal("</_")).output(mark("key")).output(literal(">")),
				rule().condition((type("dependency")), (trigger("dependency"))).output(literal("<dependency>\n\t<groupId>")).output(mark("groupId")).output(literal("</groupId>\n\t<artifactId>")).output(mark("artifactId")).output(literal("</artifactId>\n\t<scope>")).output(mark("scope", "lowercase")).output(literal("</scope>\n\t<version>")).output(mark("version")).output(literal("</version>\n    ")).output(expression().output(literal("<exclusions>")).output(literal("\n")).output(literal("\t    ")).output(mark("exclusion").multiple("\n")).output(literal("\n")).output(literal("    </exclusions>"))).output(literal("\n</dependency>")),
				rule().condition((trigger("exclusion"))).output(literal("<exclusion>\n    <groupId>")).output(mark("groupId")).output(literal("</groupId>\n    <artifactId>")).output(mark("artifactId")).output(literal("</artifactId>\n</exclusion>")),
				rule().condition((trigger("scm"))).output(literal("<scm>\n\t<url>")).output(mark("url")).output(literal("</url>\n    <connection>")).output(mark("connection")).output(literal("</connection>\n    <developerConnection>")).output(mark("developerConnection")).output(literal("</developerConnection>\n    <tag>")).output(mark("tag")).output(literal("</tag>\n</scm>\n")),
				rule().condition((type("GPL")), (trigger("license"))).output(literal("<license>\n\t<name>The GNU General Public License v3.0</name>\n\t<url>https://www.gnu.org/licenses/gpl-3.0.txt</url>\n</license>")),
				rule().condition((type("LGPL")), (trigger("license"))).output(literal("<license>\n\t<name>GNU Lesser General Public License v3.0</name>\n\t<url>https://www.gnu.org/licenses/lgpl-3.0.txt</url>\n</license>")),
				rule().condition((type("BSD")), (trigger("license"))).output(literal("<license>\n\t<name>BSD 3-Clause License</name>\n\t<url>https://opensource.org/licenses/BSD-3-Clause</url>\n</license>")),
				rule().condition((trigger("osx"))).output(literal("<plugin>\n    <groupId>sh.tak.appbundler</groupId>\n    <artifactId>appbundle-maven-plugin</artifactId>\n    <version>1.2.0</version>\n    <configuration>\n        <mainClass>")).output(mark("mainClass")).output(literal("</mainClass>\n        ")).output(expression().output(literal("<iconFile>")).output(mark("icon")).output(literal("</iconFile>"))).output(literal("\n        <jvmVersion>1.8+</jvmVersion>\n    </configuration>\n    <executions>\n        <execution>\n            <phase>package</phase>\n            <goals>\n                <goal>bundle</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>")),
				rule().condition((trigger("windows"))).output(literal("<plugin>\n    <groupId>com.akathist.maven.plugins.launch4j</groupId>\n    <artifactId>launch4j-maven-plugin</artifactId>\n    <executions>\n        <execution>\n        <id>l4j-clui</id>\n        <phase>package</phase>\n        <goals><goal>launch4j</goal></goals>\n            <configuration>\n                <headerType>console</headerType>\n                <outfile>")).output(mark("out")).output(literal("${project.build.finalName}.exe</outfile>\n                <icon>")).output(mark("icon")).output(literal("</icon>\n                <jar>")).output(mark("out")).output(mark("name", "lowercase")).output(literal("/")).output(mark("name", "lowercase")).output(literal("-")).output(mark("version")).output(literal(".jar</jar>\n                <errTitle>")).output(mark("name")).output(literal("</errTitle>\n                <classPath>\n                    <mainClass>")).output(mark("mainClass")).output(literal("</mainClass>\n                    <addDependencies>true</addDependencies>\n                    <jarLocation>")).output(mark("prefix")).output(literal("</jarLocation>\n                </classPath>\n                <jre>\n                    <minVersion>1.8.0</minVersion>\n                    <opts>\n                        <opt>-Djava.endorsed.dirs=./endorsed</opt>\n                    </opts>\n                </jre>\n                <versionInfo>\n                    <fileVersion>")).output(mark("version")).output(literal(".0</fileVersion>\n                    <txtFileVersion>text</txtFileVersion>\n                    <fileDescription>text</fileDescription>\n                    <copyright>text</copyright>\n                    <productVersion>")).output(mark("version")).output(literal(".0</productVersion>\n                    <txtProductVersion>text</txtProductVersion>\n                    <productName>")).output(mark("name")).output(literal("</productName>\n                    <internalName>")).output(mark("name")).output(literal("</internalName>\n                    <originalFilename>")).output(mark("name")).output(literal(".exe</originalFilename>\n                </versionInfo>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>")),
				rule().condition((type("copyDependencies")), (trigger("classpath"))).output(literal("<classpathPrefix>")).output(expression().output(mark("classpathPrefix")).next(expression().output(literal("dependency")))).output(literal("/</classpathPrefix>")),
				rule().condition((trigger("copydependencies"))).output(literal("<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-dependency-plugin</artifactId>\n    <version>2.10</version>\n    <executions>\n        <execution>\n            <id>copy-dependencies</id>\n            <phase>package</phase>\n            <goals>\n                <goal>copy-dependencies</goal>\n            </goals>\n            <configuration>")).output(expression().output(literal("\n")).output(literal("                <outputDirectory>")).output(literal("$")).output(literal("{project.build.directory}/")).output(mark("classpathPrefix")).output(literal("</outputDirectory>"))).output(literal("\n                <useBaseVersion>false</useBaseVersion>\n                <includeScope>runtime</includeScope>\n                <overWriteReleases>false</overWriteReleases>\n                <overWriteSnapshots>false</overWriteSnapshots>\n                <overWriteIfNewer>true</overWriteIfNewer>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>"))
		);
	}
}