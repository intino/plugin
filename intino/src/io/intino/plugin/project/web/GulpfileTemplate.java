package io.intino.plugin.project.web;

import org.siani.itrules.*;

import java.util.Locale;

import static org.siani.itrules.LineSeparator.*;

public class GulpfileTemplate extends Template {

	protected GulpfileTemplate(Locale locale, LineSeparator separator) {
		super(locale, separator);
	}

	public static Template create() {
		return new GulpfileTemplate(Locale.ENGLISH, LF).define();
	}

	public Template define() {
		add(
			rule().add((condition("type", "gulp"))).add(literal("\n'use strict';\n\n// libraries\nconst gulp = require('gulp');\nconst $ = require('gulp-load-plugins')();\nconst del = require('del');\nconst runSequence = require('run-sequence');\nconst merge = require('merge-stream');\nconst path = require('path');\nconst concat = require('gulp-concat');\nconst eventStream = require('event-stream');\nconst console = require('gulp-util');\nconst os = require('os');\nconst rsync = require('gulp-rsync');\nconst fs = require('fs-extra');\nconst OutputPath = '")).add(mark("outDirectory", "path")).add(literal("/www/")).add(mark("activity", "lowercase")).add(literal("';\nconst WorkingDirectory = '")).add(mark("rootDirectory", "path")).add(literal("';\nconst UiName = '")).add(mark("activity", "lowercase")).add(literal("';\nconst WatchPort = 35")).add(mark("port")).add(literal(";\n\n// root tasks\ngulp.task('dev', cb => {\nrunSequence('clean', 'copy-lib-to-output', 'package-dev', 'watch', cb);\n});\n\ngulp.task('deploy', cb => {\nrunSequence('clean', 'package-deploy', cb);\n});\n\n// sub tasks\ngulp.task('clean', () => {\nreturn del([outputPath()], {force:true});\n});\n\ngulp.task('copy-lib-to-output', () => {\nreturn eventStream.concat(\n    unionLibs(workingPath('lib/**/*'), outputPath(\"/lib\"))\n);\n});\n\ngulp.task('package-dev', cb => {\nrunSequence('union-dev', 'resolve-dev-url-dependencies', cb);\n});\n\ngulp.task('union-dev', () => {\nreturn eventStream.concat(\n    unionSource(workingPath('src/fonts/**/*'), outputPath(\"/fonts\"), \"fonts\"),\n    unionSource(workingPath('src/fonts/**/*'), outputPath(\"/src/fonts\"), \"fonts\"),\n    unionSource(workingPath('src/images/**/*'), outputPath(\"/images\"), \"images\"),\n    unionSource(workingPath('src/images/**/*'), outputPath(\"/src/images\"), \"images\"),\n    unionSource(workingPath('src/js/**/*'), outputPath(\"/js\"), \"js\"),\n    unionSource(workingPath('src/js/**/*'), outputPath(\"/src/js\"), \"js\"),\n    unionStyles(workingPath('src/styles/**/*'), outputPath(\"/styles\")),\n    unionSource(workingPath('src/video/**/*'), outputPath(\"/video\"), \"video\"),\n    unionSource(workingPath('src/video/**/*'), outputPath(\"/src/video\"), \"video\"),\n    unionWidgets(workingPath('src/widgets/**/*'), outputPath(\"/src/widgets\")),\n    gulp.src([workingPath('src/*.{html,js}'), '!' + workingPath('**/.DS_Store')]).pipe(rsync({ silent: true, root: 'src', incremental: true, destination: outputPath('')}))\n);\n});\n\ngulp.task('package-deploy', cb => {\nrunSequence('union-deploy', 'resolve-deploy-url-dependencies', cb);\n});\n\ngulp.task('union-deploy', cb => {\nreturn eventStream.concat(\n    unionSource(workingPath('src/fonts/**/*'), outputPath(\"/fonts\"), \"fonts\"),\n    unionSource(workingPath('src/images/**/*'), outputPath(\"/images\"), \"images\"),\n    unionSource(workingPath('src/js/**/*'), outputPath(\"/js\"), \"js\"),\n    unionStyles(workingPath('src/styles/**/*'), outputPath(\"/styles\")),\n    unionSource(workingPath('src/video/**/*'), outputPath(\"/video\"), \"video\"),\n    gulp.src([workingPath('src/*.{html,js}'), '!' + workingPath('src/components.html'), '!' + workingPath('**/.DS_Store')]).pipe(rsync({ silent: true, root: workingPath('src'), incremental: true, destination: outputPath('')})),\n    unionLib(),\n    compileFile(workingPath('src'), '/components.html'),\n    obfuscateFile(outputPath('/components.html'))\n);\n});\n\ngulp.task('resolve-deploy-url-dependencies', () => {\nreturn gulp.src([outputPath('*.html'), '!' + outputPath('/components.html')])\n    .pipe($.replace('src=\"', 'src=\"$url/'))\n    .pipe($.replace('href=\"', 'href=\"$url/'))\n    .pipe($.replace('href-absolute=', 'href='))\n    .pipe(gulp.dest(outputPath()));\n});\n\ngulp.task('resolve-dev-url-dependencies', () => {\ngulp.src([outputPath('*.html'), '!' + outputPath('components.html')])\n.pipe($.replace('src=\"', 'src=\"$url/'))\n.pipe($.replace('href=\"', 'href=\"$url/'))\n.pipe($.replace('href-absolute=', 'href='))\n.pipe(gulp.dest(outputPath()));\ngulp.src(")).add(expression().add(literal("outputPath('components.html')"))).add(literal(")\n.pipe($.replace('src=\"', 'src=\"src/'))\n.pipe($.replace('href=\"', 'href=\"src/'))\n.pipe($.replace('href-absolute=', 'href='))\n.pipe(gulp.dest(outputPath()));\n});\n\ngulp.task('watch', () => {\nconst tasksToLaunch = ['refresh-dev-server'];\n\ngulp.watch([workingPath('src/**/*.html')], tasksToLaunch);\ngulp.watch([workingPath('src/styles/**/*.css')], tasksToLaunch);\ngulp.watch([workingPath('src/widgets/**/*.css')], tasksToLaunch);\ngulp.watch([workingPath('src/widgets/**/*.html')], tasksToLaunch);\ngulp.watch([workingPath('src/components/**/*.css')], tasksToLaunch);\ngulp.watch([workingPath('src/components/**/*.html')], tasksToLaunch);\ngulp.watch([workingPath('src/images/**/*')], tasksToLaunch);\n\n$.livereload.listen({ port: WatchPort, basePath: '.' });\n});\n\ngulp.task('refresh-dev-server', ['package-dev', 'refresh-browser']);\ngulp.task('refresh-browser', () => gulp.src(outputPath('/*.html')).pipe($.livereload()));\n\n// constants\nconst outputPath = subpath => !subpath ? OutputPath : path.join(OutputPath, subpath);\nconst workingPath = subpath => !subpath ? WorkingDirectory : path.join(WorkingDirectory, subpath);\n\nconst compileFile = (path, src) => {\nvar isWin = (os.type().toLowerCase().startsWith() == \"win\");\nvar vulcanizeOptions = { stripComments: true, inlineCss: true, inlineScripts: true };\n\nif (isWin) vulcanizeOptions.abspath = path;\nelse src = path + src;\n\nreturn gulp.src(src)\n    .pipe($.vulcanize(vulcanizeOptions))\n    .pipe($.replace('<iron-a11y-keys target=\"{{}}\" keys=\"space enter\" on-keys-pressed=\"toggleOpened\"><\\/iron-a11y-keys>', '<!--<iron-a11y-keys target=\"{{}}\" keys=\"space enter\" on-keys-pressed=\"toggleOpened\"><\\/iron-a11y-keys>-->')) // fix important paper-chip bug\n    .pipe(gulp.dest(outputPath()))\n    .pipe($.size({title: 'vulcanize'}));\n};\n\nconst obfuscateFile = (src) => {\nreturn gulp.src(src)\n    .pipe($.htmlmin({\n        collapseWhitespace: true,\n        removeComments: true,\n        removeTagWhitespace: true,\n        minifyCSS: true,\n        minifyJS: true,\n        trimCustomFragments : true\n    }))\n    .pipe(gulp.dest(outputPath()));\n};\n\nconst unionLib = () => {\ngulp.src([workingPath('lib/{moment,konos-server-web,alexandria-ui-elements,alexandria-activity-elements}/**/*')])\n    .pipe(gulp.dest(outputPath('lib')));\n\nreturn gulp.src([workingPath('lib/{jquery,webcomponentsjs,numeral,promise-polyfill}/**/*'), workingPath('lib/{cotton-cookies,cotton-push}/*.js')])\n    .pipe(rsync({ silent: true, root: workingPath('lib'), incremental: true, destination: outputPath('lib') }));\n};\n\nconst unionLibs = (src, dest) => {\nreturn gulp.src(src)\n    .pipe(gulp.dest(dest))\n    .pipe($.size({title: 'libs'}));\n};\n\nconst unionStyles = (src, dest) => {\nreturn gulp.src(src)\n    .pipe(gulp.dest(dest))\n    .pipe($.size({title: 'styles'}));\n};\n\nconst unionWidgets = (src, dest) => {\nfs.ensureDir(outputPath(\"src/widgets\"));\nreturn gulp.src(src)\n    .pipe(rsync({ silent: true, root: workingPath('src/widgets'), incremental: true, destination: dest }))\n    .pipe($.size({title: 'widgets'}));\n};\n\nconst unionSource = (src, dest, name) => {\nfs.ensureDir(outputPath(\"src/\" + name));\nreturn gulp.src(src)\n    .pipe(rsync({ silent: true, root: workingPath('src/' + name), incremental: true, destination: dest }))\n    .pipe($.size({title: name}));\n};\n\nrequire('web-component-tester').gulp.init(gulp);"))
		);
		return this;
	}
}