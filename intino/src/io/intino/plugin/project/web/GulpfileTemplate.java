package io.intino.plugin.project.web;

import org.siani.itrules.*;

import java.util.Locale;

import static org.siani.itrules.LineSeparator.*;

public class GulpfileTemplate extends Template {

	protected GulpfileTemplate(Locale locale, LineSeparator separator) {
		super(locale, separator);
	}

	public static Template create() {
		return new GulpfileTemplate(Locale.ENGLISH, LF).define();
	}

	public Template define() {
		add(
			rule().add((condition("type", "gulp"))).add(literal("'use strict';\n\n// libraries\nconst gulp = require('gulp');\nconst $ = require('gulp-load-plugins')();\nconst del = require('del');\nconst runSequence = require('run-sequence');\nconst merge = require('merge-stream');\nconst path = require('path');\nconst concat = require('gulp-concat');\nconst eventStream = require('event-stream');\nconst console = require('gulp-util');\nconst os = require('os');\nconst OutputPath = '")).add(mark("outDirectory", "path")).add(literal("/www/")).add(mark("activity", "lowercase")).add(literal("';\nconst WorkingDirectory = '")).add(mark("rootDirectory", "path")).add(literal("';\nconst WatchPort = 35")).add(mark("port")).add(literal(";\n\n// root tasks\ngulp.task('default', cb => {\n\trunSequence('clean', 'package', 'install', cb);\n});\n\ngulp.task('dev', cb => {\n\trunSequence('default', 'watch', cb);\n});\n\ngulp.task('deploy', cb => {\n\trunSequence('clean', 'package', 'obfuscate', 'install', cb);\n});\n\n// sub tasks\ngulp.task('clean', () => {return del([packagePath()], {force:true}); });\n\ngulp.task('package', cb => {\n\trunSequence('compile', 'clean-compile', 'union', cb);\n});\n\ngulp.task('compile', cb => {\n\trunSequence('prepare-compile', 'do-compile', cb);\n});\n\ngulp.task('prepare-compile', cb => {\n\treturn eventStream.concat(\n\t\tgulp.src(workingPath('src/**/*')).pipe(gulp.dest(packagePath(\"/\"))),\n\t\tgulp.src(workingPath('lib/**/*')).pipe(gulp.dest(packagePath(\"/lib\")))\n\t);\n});\n\ngulp.task('do-compile', cb => {\n\treturn eventStream.concat(\n\t\tcompileFile(packagePath(''), '/components.html')\n\t);\n});\n\ngulp.task('clean-compile', cb => {\n\treturn del([packagePath('/components'), packagePath('/widgets'), packagePath('/widgets.html'), packagePath('/lib')], {force:true});\n});\n\ngulp.task('union', cb => {\n\treturn eventStream.concat(\n\t\tunionFonts(workingPath('src/fonts/**/*'), packagePath(\"/fonts\")),\n\t\tunionStyles(workingPath('src/styles/**/*'), packagePath(\"/styles\")),\n\t\tgulp.src(workingPath('src/styles/**/*')).pipe(gulp.dest(packagePath(\"/styles\"))),\n\t\tunionImages(workingPath('src/images/**/*'), packagePath(\"/images\")),\n\t\tgulp.src([workingPath('src/*.{html,js}'), '!' + workingPath('src/components.html'), '!' + workingPath('**/.DS_Store')]).pipe(gulp.dest(packagePath(''))),\n\t\tunionLib()\n\t);\n});\n\ngulp.task('install', cb => {\n    runSequence('clean-out', 'populate-out', cb);\n});\n\ngulp.task('clean-out', () => {\n    return del([outputPath()], {force:true});\n});\n\ngulp.task('populate-out', ['resolve-url-dependencies'],() => {\n    return eventStream.concat(\n        gulp.src([packagePath('/**/*')], { dot: true }).pipe(gulp.dest(outputPath()))\n    );\n});\n\ngulp.task('resolve-url-dependencies', () => {\n\treturn gulp.src([packagePath('*.html'), '!' + packagePath('/components.html')])\n\t\t.pipe($.replace('src=\"', 'src=\"$url/'))\n\t\t.pipe($.replace('href=\"', 'href=\"$url/'))\n\t\t.pipe($.replace('href-absolute=', 'href='))\n\t\t.pipe(gulp.dest(packagePath()));\n});\n\ngulp.task('watch', () => {\n\tconst tasksToLaunch = ['refresh-dev-server'];\n\n\tgulp.watch([workingPath('src/**/*.html')], tasksToLaunch);\n\tgulp.watch([workingPath('src/styles/**/*.css')], tasksToLaunch);\n\tgulp.watch([workingPath('src/widgets/**/*.css')], tasksToLaunch);\n\tgulp.watch([workingPath('src/widgets/**/*.html')], tasksToLaunch);\n\tgulp.watch([workingPath('src/components/**/*.css')], tasksToLaunch);\n\tgulp.watch([workingPath('src/components/**/*.html')], tasksToLaunch);\n\tgulp.watch([workingPath('src/images/**/*')], tasksToLaunch);\n\n\t$.livereload.listen({ port: WatchPort, basePath: '.' });\n});\n\ngulp.task('refresh-dev-server', ['default', 'refresh-browser']);\ngulp.task('refresh-browser', () => gulp.src(outputPath('/*.html')).pipe($.livereload()));\n\ngulp.task('obfuscate', () => {\n\treturn eventStream.concat(\n\t\tobfuscateFile(packagePath('/components.html'))\n\t);\n});\n\n// constants\nconst PackageDirectory = '")).add(mark("rootDirectory", "path")).add(literal("/dist';\n\nconst packagePath = subpath => !subpath ? PackageDirectory : path.join(PackageDirectory, subpath);\nconst outputPath = subpath => !subpath ? OutputPath : path.join(OutputPath, subpath);\nconst workingPath = subpath => !subpath ? WorkingDirectory : path.join(WorkingDirectory, subpath);\n\nconst compileFile = (path, src) => {\n    var isWin = (os.type().toLowerCase().startsWith() == \"win\");\n    var vulcanizeOptions = { stripComments: true, inlineCss: true, inlineScripts: true };\n\n    if (isWin) vulcanizeOptions.abspath = path;\n    else src = path + src;\n\n    return gulp.src(src)\n        .pipe($.vulcanize(vulcanizeOptions))\n        .pipe($.replace('<iron-a11y-keys target=\"{{}}\" keys=\"space enter\" on-keys-pressed=\"toggleOpened\"><\\/iron-a11y-keys>', '<!-- commented by sumus to fix important events bug <iron-a11y-keys target=\"{{}}\" keys=\"space enter\" on-keys-pressed=\"toggleOpened\"><\\/iron-a11y-keys>-->')) // fix important paper-chip bug\n        .pipe(gulp.dest(packagePath()))\n        .pipe($.size({title: 'vulcanize'}));\n};\n\nconst obfuscateFile = (src) => {\n\treturn gulp.src(src)\n\t\t.pipe($.htmlmin({\n\t\t\tcollapseWhitespace: true,\n\t\t\tremoveComments: true,\n\t\t\tremoveTagWhitespace: true,\n\t\t\tminifyCSS: true,\n\t\t\tminifyJS: true,\n\t\t\ttrimCustomFragments : true\n\t\t}))\n\t\t.pipe(gulp.dest(packagePath()));\n};\n\nconst unionLib = () => {\n\treturn gulp.src([workingPath('lib/{jquery,webcomponentsjs,moment,konos-server-web,alexandria-activity-elements,numeral,promise-polyfill}/**/*'),\n\t\tworkingPath('lib/{cotton-cookies,cotton-push}/*.js')])\n\t\t.pipe(gulp.dest(packagePath('lib')));\n};\n\nconst unionStyles = (src, dest) => {\n\treturn gulp.src(src)\n\t\t.pipe($.changed(src, {extension: '.html'}))\n\t\t.pipe($.changed(src, {extension: '.css'}))\n\t\t.pipe(gulp.dest(dest))\n\t\t.pipe(gulp.dest(dest))\n\t\t.pipe($.size({title: src}));\n};\n\nconst unionImages = (src, dest) => {\n\treturn gulp.src(src)\n\t\t.pipe(gulp.dest(dest))\n\t\t.pipe($.size({title: 'images'}));\n};\n\nconst unionFonts = (src, dest) => {\n\treturn gulp.src(src)\n\t\t.pipe(gulp.dest(dest))\n\t\t.pipe($.size({title: 'fonts'}));\n};\n\nrequire('web-component-tester').gulp.init(gulp);"))
		);
		return this;
	}
}