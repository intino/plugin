package io.intino.plugin.project;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class CesarFileTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
			rule().condition((type("project"))).output(literal("dsl Cesar\n\nProject ")).output(mark("name")).output(literal("\n    ")).output(expression().output(literal("alias = ")).output(mark("alias")).output(literal("\n")).output(literal("    "))).output(literal("servers = ")).output(expression().output(mark("servers"))).output(literal("\n    devices = ")).output(expression().output(mark("devices"))).output(literal("\n    server-processes = ")).output(expression().output(mark("server-processes"))).output(literal("\n    device-processes = ")).output(expression().output(mark("device-processes"))).output(literal("\n    datalakes = ")).output(expression().output(mark("datalakes"))).output(literal("\n    datamarts = ")).output(expression().output(mark("datamarts"))).output(expression().output(literal("\n")).output(literal("\n")).output(literal("    has ")).output(mark("device", "nameValue").multiple("\n has "))).output(expression().output(literal("\n")).output(literal("\n")).output(literal("    has ")).output(mark("process", "nameValue").multiple("\n has "))).output(literal("\n\n    ")).output(mark("server").multiple("\n")).output(literal("\n\n    ")).output(mark("process").multiple("\n")),
			rule().condition((trigger("namevalue"))).output(mark("name")),
			rule().condition((trigger("server"))).output(literal("Server ")).output(mark("name")).output(literal("\n    id = \"")).output(mark("id")).output(literal("\"\n    status = ")).output(mark("status")).output(literal("\n    ")).output(expression().output(literal("architecture = \"")).output(mark("architecture")).output(literal("\""))).output(expression().output(literal("\n")).output(literal("    cores = ")).output(mark("cores"))).output(literal("\n    ")).output(expression().output(literal("os = \"")).output(mark("os")).output(literal("\""))).output(literal("\n    ")).output(expression().output(literal("jvm = \"")).output(mark("jvm")).output(literal("\""))).output(literal("\n\n    ")).output(expression().output(literal("UpTime(\"")).output(mark("boot")).output(literal("\")"))).output(literal("\n    ")).output(expression().output(literal("temperature = ")).output(mark("temperature")).output(literal("Â°"))).output(literal("\n    ")).output(expression().output(mark("serverCpu"))).output(literal("\n    ")).output(expression().output(mark("serverMemory"))).output(literal("\n    //Swap(size = 2.29GB, used = 1.65GB, free = 28%, pagination = 18faults/second)\n    ")).output(expression().output(mark("fileSystem"))).output(literal("\n\n    Network(ip = \"")).output(mark("ip")).output(literal("\")\n        inbound = 150 Mb/s\n        outbound = 1430 Mb/s\n        Ports\n            //Port(nginx, 80 443)\n            //Port(ness, \"0xFEED\")\n\n        Connections(44)\n            Client(\"205.234.11.204\", \"Canada\")\n            Client(\"203.13.121.205\", \"Mexico\")\n\n    Rule(\"CPU.usage > 30%\") as Warning\n    Rule(\"Physical-Memory.usage > 80%\") as Alert\n    Rule(\"Swap-Memory usage > 80%\") as Alert\n\n    //has hss.consul hss.cesar\n    //has hss.ness hss.nginx\n    //has hss.federation hss.dashboard")),
			rule().condition((trigger("servercpu"))).output(literal("CPU(")).output(expression().output(literal("usage = ")).output(mark("usage")).output(literal("%"))).output(expression().output(literal(", processes = ")).output(mark("processes"))).output(expression().output(literal(", threads = ")).output(mark("threads"))).output(literal(")")),
			rule().condition((trigger("servermemory"))).output(literal("Memory(size = ")).output(mark("size")).output(literal(" MB")).output(expression().output(literal(", used = ")).output(mark("used")).output(literal(" MB"))).output(expression().output(literal(", free = ")).output(mark("free")).output(literal(" %"))).output(literal(")")),
			rule().condition((trigger("filesystem"))).output(literal("Filesystem(size = ")).output(mark("size")).output(literal(" MB")).output(expression().output(literal(", used = ")).output(mark("used")).output(literal(" %"))).output(literal(")")),
			rule().condition((trigger("process"))),
			rule().condition((attribute("true")), (trigger("status"))).output(literal("active")),
			rule().condition((attribute("false")), (trigger("status"))).output(literal("inactive"))
		);
	}
}