package io.intino.plugin.archetype;

import io.intino.itrules.template.Rule;
import io.intino.itrules.template.Template;

import java.util.ArrayList;
import java.util.List;

import static io.intino.itrules.template.condition.predicates.Predicates.*;
import static io.intino.itrules.template.outputs.Outputs.*;

public class ArchetypeTemplate extends Template {

	public List<Rule> ruleSet() {
		List<Rule> rules = new ArrayList<>();
		rules.add(rule().condition(allTypes("archetype")).output(literal("package ")).output(placeholder("package")).output(literal(";\n\nimport java.io.File;\nimport java.util.Collections;\n\npublic class Archetype {\n\tprivate final File root;\n\n\tpublic Archetype(File root) {\n\t\tthis.root = root;\n\t\troot.mkdirs();\n\t}\n\n\tpublic File root() {\n\t\treturn this.root;\n\t}\n\n\tpublic Relative relative() {\n\t    return new Relative(root);\n\t}\n\n\tprivate static File createParent(File file) {\n\t    file.getParentFile().mkdirs();\n\t    return file;\n\t}\n\n\t")).output(expression().output(placeholder("node", "getter").multiple("\n\n"))).output(literal("\n\n\t")).output(expression().output(placeholder("node", "class").multiple("\n\n"))).output(literal("\n\n\tpublic static class Relative {\n        private final String name;\n        private final File root;\n\n        public Relative(File root) {\n            this.name = \"\";\n            this.root = root;\n            root.mkdirs();\n        }\n\n        public String root() {\n            return this.name;\n        }\n\n        ")).output(expression().output(placeholder("node", "relativeGetter").multiple("\n\n"))).output(literal("\n\n        ")).output(expression().output(placeholder("node", "relativeClass").multiple("\n\n"))).output(literal("\n\t}\n}")));
		rules.add(rule().condition(all(all(allTypes("Mogram", "leaf", "list", "regex"), attribute("parameter")), trigger("relativegetter"))).output(literal("public java.util.List<String> ")).output(placeholder("name", "snakeCaseToCamelCase", "firstLowerCase")).output(literal("(")).output(placeholder("parameter", "signature").multiple(", ")).output(literal(") {\n    if(!new File(root, \"")).output(placeholder("filePath")).output(literal("\").exists()) return Collections.emptyList();\n\treturn java.util.Arrays.stream(new File(root, \"")).output(placeholder("filePath")).output(literal("\").listFiles()).\n        filter(f-> ")).output(expression().output(placeholder("with"))).output(placeholder("parameter", "replace").multiple("")).output(literal(".matches(f.getName())).\n        map(f -> f.getName()).\n        .collect(java.util.stream.Collectors.toList());\n}")));
		rules.add(rule().condition(all(allTypes("Mogram", "leaf", "list"), trigger("relativegetter"))).output(literal("public java.util.List<String> ")).output(placeholder("name", "snakeCaseToCamelCase", "firstLowerCase")).output(literal("(")).output(expression().output(placeholder("parameter", "signature").multiple(", "))).output(literal(") {\n    if(!new File(root, \"")).output(placeholder("filePath")).output(literal("\").exists()) return Collections.emptyList();\n\treturn java.util.Arrays.stream(new File(root, \"")).output(placeholder("filePath")).output(literal("\").listFiles()).\n        filter(f-> f.getName().contains(")).output(expression().output(placeholder("with"))).output(expression().output(placeholder("parameter", "replace").multiple(""))).output(literal(")).\n        map(f -> f.getName()).\n        collect(java.util.stream.Collectors.toList());\n}")));
		rules.add(rule().condition(all(all(allTypes("Mogram", "leaf"), attribute("parameter")), trigger("relativegetter"))).output(literal("public String ")).output(placeholder("name", "snakeCaseToCamelCase", "firstLowerCase")).output(literal("(")).output(placeholder("parameter", "signature").multiple(", ")).output(literal(") {\n\treturn \"")).output(placeholder("filePath")).output(literal("\"[")).output(placeholder("parameter", "replace").multiple("")).output(literal("];\n}")));
		rules.add(rule().condition(all(allTypes("Mogram", "leaf"), trigger("relativegetter"))).output(literal("public String ")).output(placeholder("name", "snakeCaseToCamelCase", "firstLowerCase")).output(literal("() {\n\treturn \"")).output(placeholder("filePath")).output(literal("\";\n}")));
		rules.add(rule().condition(all(allTypes("Mogram", "leaf", "list", "regex"), trigger("getter"))).output(literal("public java.util.List<File> ")).output(placeholder("name", "snakeCaseToCamelCase", "firstLowerCase")).output(literal("(")).output(expression().output(placeholder("parameter", "signature").multiple(", "))).output(literal(") {\n    new File(root, \"")).output(placeholder("filePath")).output(literal("\"")).output(expression().output(placeholder("parameter", "replace").multiple(""))).output(literal(").mkdirs();\n\treturn java.util.Arrays.stream(new File(root, \"")).output(placeholder("filePath")).output(literal("\"")).output(expression().output(placeholder("parameter", "replace").multiple(""))).output(literal(").listFiles()).\n\t    filter(f-> ")).output(expression().output(placeholder("with"))).output(literal(".matches(f.getName())).\n\t    collect(java.util.stream.Collectors.toList());\n}")));
		rules.add(rule().condition(all(allTypes("Mogram", "leaf", "list"), trigger("getter"))).output(literal("public java.util.List<File> ")).output(placeholder("name", "snakeCaseToCamelCase", "firstLowerCase")).output(literal("(")).output(expression().output(placeholder("parameter", "signature").multiple(", "))).output(literal(") {\n    new File(root, \"")).output(placeholder("filePath")).output(literal("\"")).output(expression().output(placeholder("parameter", "replace").multiple(""))).output(literal(").mkdirs();\n\treturn java.util.Arrays.stream(new File(root, \"")).output(placeholder("filePath")).output(literal("\"")).output(expression().output(placeholder("parameter", "replace").multiple(""))).output(literal(").listFiles()).\n        filter(f-> f.getName().contains(")).output(expression().output(placeholder("with"))).output(literal(")).\n        collect(java.util.stream.Collectors.toList());\n}")));
		rules.add(rule().condition(all(allTypes("Mogram", "leaf"), trigger("getter"))).output(literal("public File ")).output(placeholder("name", "snakeCaseToCamelCase", "firstLowerCase")).output(literal("(")).output(expression().output(placeholder("parameter", "signature").multiple(", "))).output(literal(") {\n\treturn createParent(new File(root, \"")).output(placeholder("filePath")).output(literal("\"")).output(expression().output(placeholder("parameter", "replace").multiple(""))).output(literal("));\n}")));
		rules.add(rule().condition(all(allTypes("Mogram", "leaf"), trigger("getter"))).output(literal("public File ")).output(placeholder("name", "snakeCaseToCamelCase", "firstLowerCase")).output(literal("() {\n\treturn createParent(new File(root, \"")).output(placeholder("filePath")).output(literal("\"));\n}")));
		rules.add(rule().condition(all(allTypes("Mogram", "splitted"), trigger("relativegetter"))).output(literal("public ")).output(placeholder("name", "snakeCaseToCamelCase", "firstUpperCase")).output(literal(" ")).output(placeholder("name", "snakeCaseToCamelCase", "firstLowerCase")).output(literal("(String split) {\n\treturn new ")).output(placeholder("name", "snakeCaseToCamelCase", "firstUpperCase")).output(literal("(root, name, split);\n}\n\npublic ")).output(placeholder("name", "snakeCaseToCamelCase", "firstUpperCase")).output(literal("Split ")).output(placeholder("name", "snakeCaseToCamelCase", "firstLowerCase")).output(literal("() {\n\treturn new ")).output(placeholder("name", "snakeCaseToCamelCase", "firstUpperCase")).output(literal("Split(root);\n}")));
		rules.add(rule().condition(trigger("split")).output(literal("public ")).output(placeholder("class", "snakeCaseToCamelCase", "firstUpperCase")).output(literal(" ")).output(placeholder("value")).output(literal("(String split) {\n\treturn new ")).output(placeholder("class", "snakeCaseToCamelCase", "firstUpperCase")).output(literal("(root, \"")).output(placeholder("value")).output(literal("\");\n}")));
		rules.add(rule().condition(all(allTypes("node"), trigger("relativegetter"))).output(literal("public ")).output(placeholder("name", "snakeCaseToCamelCase", "firstUpperCase")).output(literal(" ")).output(placeholder("name", "snakeCaseToCamelCase", "firstLowerCase")).output(literal("(")).output(placeholder("parameter", "signature").multiple(", ")).output(literal(") {\n\treturn new ")).output(placeholder("name", "snakeCaseToCamelCase", "firstUpperCase")).output(literal("(root, name")).output(expression().output(literal(", ")).output(placeholder("parameter", "name").multiple(", "))).output(literal(");\n}")));
		rules.add(rule().condition(all(allTypes("Mogram", "splitted"), trigger("getter"))).output(literal("public ")).output(placeholder("name", "snakeCaseToCamelCase", "firstUpperCase")).output(literal(" ")).output(placeholder("name", "snakeCaseToCamelCase", "firstLowerCase")).output(literal("(String split) {\n\treturn new ")).output(placeholder("name", "snakeCaseToCamelCase", "firstUpperCase")).output(literal("(root, split);\n}\n\npublic ")).output(placeholder("name", "snakeCaseToCamelCase", "firstUpperCase")).output(literal("Split ")).output(placeholder("name", "snakeCaseToCamelCase", "firstLowerCase")).output(literal("() {\n\treturn new ")).output(placeholder("name", "snakeCaseToCamelCase", "firstUpperCase")).output(literal("Split(root);\n}\n\npublic static class ")).output(placeholder("name", "snakeCaseToCamelCase", "firstUpperCase")).output(literal("Split {\n\tprivate final File root;\n\n\tpublic ")).output(placeholder("name", "snakeCaseToCamelCase", "firstUpperCase")).output(literal("Split(File root) {\n\t\tthis.root = root;\n\t\troot.mkdirs();\n\t}\n\n\t")).output(placeholder("split").multiple("\n")).output(literal("\n}")));
		rules.add(rule().condition(all(allTypes("node"), trigger("getter"))).output(literal("public ")).output(placeholder("name", "snakeCaseToCamelCase", "firstUpperCase")).output(literal(" ")).output(placeholder("name", "snakeCaseToCamelCase", "firstLowerCase")).output(literal("(")).output(placeholder("parameter", "signature").multiple(", ")).output(literal(") {\n\treturn new ")).output(placeholder("name", "snakeCaseToCamelCase", "firstUpperCase")).output(literal("(root[, ")).output(placeholder("parameter", "name").multiple(", ")).output(literal("]);\n}")));
		rules.add(rule().condition(all(all(allTypes("Mogram", "splitted"), not(allTypes("leaf"))), trigger("relativeclass"))).output(literal("public static class ")).output(placeholder("name", "snakeCaseToCamelCase", "firstUpperCase")).output(literal(" {\n\tprivate final File root;\n\tprivate final String name;\n\n\tpublic ")).output(placeholder("name", "snakeCaseToCamelCase", "firstUpperCase")).output(literal("(File parentRoot, String parent, String name) {\n\t\tthis.root = new File(parent, name);\n\t\troot.mkdirs();\n\t\tthis.name = parent + (!parent.isEmpty() ? \"/\" : \"\") + name;\n\t}\n\n\tpublic String root() {\n\t\treturn this.name;\n\t}\n\n\t")).output(expression().output(placeholder("node", "relativeGetter").multiple("\n\n"))).output(literal("\n\n\t")).output(expression().output(placeholder("node", "relativeClass").multiple("\n\n"))).output(literal("\n}")));
		rules.add(rule().condition(all(all(allTypes("node"), not(any(allTypes("splitted"), allTypes("leaf")))), trigger("relativeclass"))).output(literal("public static class ")).output(placeholder("name", "snakeCaseToCamelCase", "firstUpperCase")).output(literal(" {\n\tprivate final File root;\n\tprivate final String name;\n\n\tpublic ")).output(placeholder("name", "snakeCaseToCamelCase", "firstUpperCase")).output(literal("(File parentRoot, String parent")).output(expression().output(literal(", ")).output(placeholder("parameter", "signature").multiple(", "))).output(literal(") {\n\t\tthis.root = new File(parent, \"")).output(placeholder("filePath")).output(literal("\"")).output(expression().output(placeholder("with"))).output(expression().output(placeholder("parameter", "replace").multiple(""))).output(literal(");\n\t\troot.mkdirs();\n\t\tthis.name = parent + (!parent.isEmpty() ? \"/\" : \"\") + \"")).output(placeholder("filePath")).output(literal("\"[")).output(placeholder("with")).output(literal("][")).output(placeholder("parameter", "replace").multiple("")).output(literal("];\n\t}\n\n\tpublic String root() {\n\t\treturn this.name;\n\t}\n\n\t")).output(expression().output(placeholder("node", "relativeGetter").multiple("\n\n"))).output(literal("\n\n\t")).output(expression().output(placeholder("node", "relativeClass").multiple("\n\n"))).output(literal("\n}")));
		rules.add(rule().condition(all(all(allTypes("Mogram", "splitted"), not(allTypes("leaf"))), trigger("class"))).output(literal("public static class ")).output(placeholder("name", "snakeCaseToCamelCase", "firstUpperCase")).output(literal(" {\n\tprivate final File root;\n\n\tpublic ")).output(placeholder("name", "snakeCaseToCamelCase", "firstUpperCase")).output(literal("(File parent, String name) {\n\t\tthis.root = new File(parent, \"")).output(placeholder("name")).output(literal("\" + File.separator + name);\n\t\troot.mkdirs();\n\t}\n\n\tpublic File root() {\n\t\treturn this.root;\n\t}\n\n\t")).output(expression().output(placeholder("node", "getter").multiple("\n\n"))).output(literal("\n\n\t")).output(expression().output(placeholder("node", "class").multiple("\n\n"))).output(literal("\n}")));
		rules.add(rule().condition(all(all(allTypes("node"), not(any(allTypes("splitted"), allTypes("leaf")))), trigger("class"))).output(literal("public static class ")).output(placeholder("name", "snakeCaseToCamelCase", "firstUpperCase")).output(literal(" {\n\tprivate final File root;\n\n\tpublic ")).output(placeholder("name", "snakeCaseToCamelCase", "firstUpperCase")).output(literal("(File parent")).output(expression().output(literal(", ")).output(placeholder("parameter", "signature").multiple(", "))).output(literal(") {\n\t\tthis.root = new File(parent, \"")).output(placeholder("filePath")).output(literal("\"")).output(expression().output(placeholder("with"))).output(expression().output(placeholder("parameter", "replace").multiple(""))).output(literal(");\n\t\troot.mkdirs();\n\t}\n\n\tpublic File root() {\n\t\treturn this.root;\n\t}\n\n\t")).output(expression().output(placeholder("node", "getter").multiple("\n\n"))).output(literal("\n\n\t")).output(expression().output(placeholder("node", "class").multiple("\n\n"))).output(literal("\n}")));
		rules.add(rule().condition(all(allTypes("timetag"), trigger("signature"))).output(literal("io.intino.alexandria.Timetag ")).output(placeholder("value")));
		rules.add(rule().condition(trigger("signature")).output(literal("String ")).output(placeholder("value")));
		rules.add(rule().condition(trigger("name")).output(placeholder("value")));
		rules.add(rule().condition(all(allTypes("timetag"), trigger("replace"))).output(literal(".replace(\"{")).output(placeholder("value")).output(literal("}\", ")).output(placeholder("value")).output(literal(".toString())")));
		rules.add(rule().condition(trigger("replace")).output(literal(".replace(\"{")).output(placeholder("value")).output(literal("}\", ")).output(placeholder("value")).output(literal(")")));
		return rules;
	}

	public String render(Object object) {
		return new io.intino.itrules.Engine(this).render(object);
	}

	public String render(Object object, java.util.Map<String, io.intino.itrules.Formatter> formatters) {
		return new io.intino.itrules.Engine(this).addAll(formatters).render(object);
	}
}