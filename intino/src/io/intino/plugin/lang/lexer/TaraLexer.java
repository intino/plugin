/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package io.intino.plugin.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import io.intino.plugin.lang.psi.TaraTypes;

import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {

	/**
	 * This character denotes the end of file
	 */
	public static final int YYEOF = -1;

	/**
	 * initial size of the lookahead buffer
	 */
	private static final int ZZ_BUFFERSIZE = 16384;

	/**
	 * lexical states
	 */
	public static final int YYINITIAL = 0;
	public static final int QUOTED = 2;
	public static final int MULTILINE = 4;
	public static final int EXPRESSION = 6;
	public static final int EXPRESSION_MULTILINE = 8;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 * at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
			0, 0, 1, 1, 2, 2, 3, 3, 4, 4
	};

	/**
	 * Translates characters to character classes
	 * Chosen bits are [12, 6, 3]
	 * Total runtime size is 17504 bytes
	 */
	public static int ZZ_CMAP(int ch) {
		return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 9] << 6) | ((ch >> 3) & 0x3f)] << 3) | (ch & 0x7)];
	}

	/* The ZZ_CMAP_Z table has 2176 entries */
	static final char ZZ_CMAP_Z[] = zzUnpackCMap(
			"\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1" +
					"\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33" +
					"\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1" +
					"\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61" +
					"\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67" +
					"\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2" +
					"\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21" +
					"\1\25\1\107\u0582\21\1\110\u017f\21");

	/* The ZZ_CMAP_Y table has 4672 entries */
	static final char ZZ_CMAP_Y[] = zzUnpackCMap(
			"\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\1\14\1\15\4\0\1\16" +
					"\1\17\1\20\1\21\2\10\1\22\3\10\1\22\71\10\1\23\1\10\1\24\1\25\1\26\1\27\2" +
					"\25\16\0\1\30\1\31\1\32\1\33\2\10\1\34\11\10\1\35\21\10\1\36\1\37\24\10\1" +
					"\40\3\10\1\22\1\41\1\40\4\10\1\42\1\43\4\0\1\44\1\45\1\25\3\10\2\46\1\25\1" +
					"\47\1\50\1\0\1\51\5\10\1\52\2\0\1\5\1\53\1\54\13\10\1\55\1\44\1\56\1\57\1" +
					"\5\1\60\1\25\1\61\1\62\3\10\3\0\1\63\12\10\1\64\1\0\1\65\1\25\1\5\1\66\3\10" +
					"\1\52\1\67\1\21\2\10\1\64\1\70\1\71\1\72\2\25\3\10\1\73\1\10\1\46\6\25\2\10" +
					"\1\30\1\74\2\25\1\75\5\0\1\76\6\10\1\77\2\0\1\100\1\10\1\101\1\5\1\40\1\10" +
					"\1\102\1\103\1\104\2\10\1\105\1\106\1\107\1\110\1\111\1\61\1\112\1\101\1\5" +
					"\1\113\1\114\1\115\1\116\1\104\2\10\1\105\1\117\1\120\1\121\1\122\1\123\1" +
					"\124\1\125\1\5\1\126\1\25\1\115\1\35\1\34\2\10\1\105\1\127\1\107\1\44\1\130" +
					"\1\131\1\25\1\101\1\5\1\41\1\132\1\115\1\103\1\104\2\10\1\105\1\127\1\107" +
					"\1\110\1\122\1\133\1\112\1\101\1\5\1\41\1\25\1\134\1\135\1\136\1\137\1\114" +
					"\1\135\1\10\1\140\1\141\1\142\1\143\1\25\1\125\1\5\1\25\1\41\1\144\1\30\1" +
					"\105\2\10\1\105\1\10\1\145\1\146\1\142\1\147\1\46\1\101\1\5\2\25\1\102\1\30" +
					"\1\105\2\10\1\105\1\150\1\107\1\146\1\142\1\147\1\32\1\101\1\5\1\151\1\25" +
					"\1\144\1\30\1\105\4\10\1\152\1\146\1\153\1\154\1\42\1\101\1\5\1\25\1\37\1" +
					"\155\1\10\1\22\1\37\2\10\1\34\1\156\1\22\1\157\1\160\1\0\1\125\1\5\1\161\1" +
					"\25\1\40\5\10\1\162\1\163\1\164\1\165\1\5\1\166\4\25\1\167\1\170\1\171\1\40" +
					"\1\172\1\173\1\162\1\174\1\175\1\47\1\5\1\176\4\25\1\131\2\25\1\177\1\5\1" +
					"\166\1\200\1\201\1\10\1\40\3\10\1\26\1\43\1\0\1\146\1\202\1\0\1\43\3\0\1\203" +
					"\1\204\7\25\5\10\1\52\1\0\1\205\1\5\1\166\1\64\1\206\1\207\1\210\1\211\1\10" +
					"\1\212\1\213\1\5\1\214\4\10\1\35\1\215\5\10\1\216\51\10\1\136\1\22\1\136\5" +
					"\10\1\136\4\10\1\136\1\22\1\136\1\10\1\22\7\10\1\136\10\10\1\217\4\25\2\10" +
					"\2\25\12\10\2\74\1\40\114\10\1\103\2\10\1\40\2\10\1\46\11\10\1\135\1\10\1" +
					"\131\1\10\1\30\1\220\1\25\2\10\1\220\1\25\2\10\1\221\1\25\1\10\1\30\1\222" +
					"\1\25\6\10\1\223\3\0\1\224\1\225\1\5\1\166\3\25\1\226\1\5\1\166\13\10\1\25" +
					"\1\227\4\10\1\230\10\10\1\74\1\25\3\10\1\22\1\0\1\2\1\0\1\2\1\125\1\5\3\10" +
					"\1\74\1\26\1\25\5\10\1\113\3\10\1\24\1\5\1\166\4\25\2\10\1\164\1\2\6\10\1" +
					"\202\1\165\3\0\1\110\1\5\1\166\1\5\1\166\1\42\1\25\1\0\1\47\10\25\1\231\5" +
					"\10\1\223\1\0\1\231\1\113\1\5\1\166\1\25\1\232\1\2\1\25\1\233\3\10\1\100\1" +
					"\210\1\5\1\66\4\10\1\64\1\0\1\2\1\25\4\10\1\223\2\0\1\25\1\5\1\234\1\5\1\66" +
					"\3\10\1\74\1\10\1\131\10\25\1\235\2\0\1\236\1\237\1\177\30\10\7\0\1\240\42" +
					"\10\2\74\4\10\2\74\1\10\1\241\3\10\1\74\6\10\1\30\1\175\1\242\1\26\1\243\1" +
					"\113\1\10\1\26\1\242\1\26\1\25\1\232\3\25\1\244\1\25\1\42\1\131\1\25\1\245" +
					"\1\25\1\146\1\0\1\41\1\42\2\25\1\10\1\26\4\10\2\25\1\0\1\203\1\246\1\0\1\247" +
					"\1\25\1\250\1\37\1\156\1\251\1\27\1\252\1\10\1\253\1\254\1\255\2\25\5\10\1" +
					"\131\116\25\5\10\1\22\5\10\1\22\20\10\1\26\1\256\1\257\1\25\4\10\1\35\1\215" +
					"\7\10\1\42\1\25\1\61\2\10\1\22\1\25\10\22\4\0\5\25\1\42\72\25\1\254\3\25\1" +
					"\40\1\212\1\251\1\26\1\40\11\10\1\22\1\260\1\40\12\10\1\216\1\254\4\10\1\22" +
					"\1\40\12\10\1\22\2\25\3\10\1\46\6\25\170\10\1\74\11\25\75\10\1\46\2\25\21" +
					"\10\1\26\10\25\5\10\1\74\41\10\1\26\2\10\1\5\1\261\2\25\5\10\1\164\1\75\1" +
					"\262\3\10\1\64\12\10\1\177\3\25\1\42\1\10\1\37\14\10\1\104\3\10\1\22\1\10" +
					"\7\25\1\42\1\10\1\263\1\264\2\10\1\52\2\25\1\131\6\10\1\113\1\25\1\265\5\10" +
					"\1\223\1\0\1\47\1\25\1\5\1\166\2\0\1\265\1\266\1\5\1\66\2\10\1\64\1\47\2\10" +
					"\1\164\1\0\1\2\1\25\3\10\1\26\1\76\5\10\1\52\1\0\1\247\1\42\1\5\1\166\1\267" +
					"\1\10\1\5\1\270\5\10\1\100\1\165\1\25\1\264\1\271\1\5\1\166\2\10\1\22\1\272" +
					"\6\10\1\207\1\273\1\230\2\25\1\274\1\10\1\52\1\275\1\25\3\276\1\25\2\22\5" +
					"\10\1\216\1\74\1\25\16\10\1\52\1\277\1\5\1\166\64\10\1\113\1\25\2\10\1\22" +
					"\1\300\5\10\1\113\40\25\55\10\1\74\15\10\1\24\4\25\1\22\1\25\1\300\1\301\1" +
					"\10\1\105\1\22\1\175\1\302\15\10\1\24\3\25\1\300\54\10\1\74\2\25\10\10\1\37" +
					"\6\10\5\25\1\10\1\26\2\0\2\25\2\0\1\114\2\25\1\254\3\25\1\41\1\30\20\10\1" +
					"\303\1\245\1\25\1\5\1\166\1\40\2\10\1\116\1\40\2\10\1\46\1\304\12\10\1\22" +
					"\3\37\1\305\1\306\2\25\1\307\1\10\1\150\2\10\1\22\2\10\1\310\1\10\1\74\1\10" +
					"\1\74\4\25\17\10\1\46\10\25\6\10\1\26\20\25\1\311\20\25\3\10\1\26\6\10\1\131" +
					"\1\25\1\247\3\25\4\10\1\25\1\254\3\10\1\46\4\10\1\64\1\312\3\10\1\74\4\10" +
					"\1\113\1\10\1\251\5\25\23\10\1\74\1\5\1\166\4\10\1\113\4\10\1\113\5\10\1\25" +
					"\6\10\1\113\23\25\46\10\1\22\1\25\2\10\1\74\1\25\1\10\23\25\1\74\1\105\4\10" +
					"\1\35\1\313\2\10\1\74\1\25\2\10\1\22\1\25\3\10\1\22\10\25\2\10\1\314\1\25" +
					"\2\10\1\74\1\25\3\10\1\24\10\25\7\10\1\304\10\25\1\315\1\75\1\150\1\40\2\10" +
					"\1\113\1\121\4\25\3\10\1\26\3\10\1\26\4\25\1\10\1\40\2\10\1\316\3\25\6\10" +
					"\1\74\1\25\2\10\1\74\1\25\2\10\1\46\1\25\2\10\1\24\15\25\11\10\1\131\6\25" +
					"\6\10\1\46\1\25\6\10\1\46\41\25\1\233\6\10\1\0\1\165\3\25\1\125\1\5\1\25\1" +
					"\61\1\233\5\10\1\0\1\317\2\25\3\10\1\131\1\5\1\166\1\233\3\10\1\164\1\0\1" +
					"\320\1\5\2\25\4\10\1\321\1\25\1\233\5\10\1\52\1\0\1\322\1\323\1\5\1\324\4" +
					"\25\2\10\1\34\2\10\1\223\1\0\1\204\10\25\1\22\1\252\1\10\1\35\1\10\1\131\5" +
					"\10\1\164\1\0\1\312\1\5\1\166\1\144\1\103\1\104\2\10\1\105\1\127\1\107\1\110" +
					"\1\122\1\143\1\254\1\325\2\203\21\25\6\10\1\202\1\0\1\205\1\46\1\5\1\166\4" +
					"\25\6\10\2\0\1\326\1\25\1\5\1\166\24\25\5\10\1\164\1\47\1\0\1\247\2\25\1\271" +
					"\4\25\6\10\2\0\1\327\1\25\1\5\1\166\4\25\5\10\1\52\1\0\1\25\1\5\1\166\6\25" +
					"\3\10\1\330\1\0\1\2\1\5\1\166\54\25\10\10\1\5\1\166\1\25\1\42\40\25\1\100" +
					"\1\233\4\10\1\52\1\331\1\61\1\25\1\100\1\76\4\10\1\243\1\212\1\0\1\177\4\25" +
					"\7\10\1\131\40\25\1\10\1\105\3\10\1\164\1\165\1\0\1\131\1\25\1\5\1\166\2\25" +
					"\1\37\3\10\1\332\2\0\1\43\1\165\11\25\1\22\1\34\4\10\1\333\1\334\1\213\1\25" +
					"\1\0\1\177\24\25\63\10\1\24\14\25\15\10\1\22\2\25\30\10\1\113\27\25\5\10\1" +
					"\22\72\25\10\10\1\22\67\25\7\10\1\131\3\10\1\22\1\5\1\166\14\25\3\10\1\74" +
					"\1\203\1\25\6\10\1\165\1\25\1\113\1\25\1\5\1\166\1\300\2\10\1\254\2\10\56" +
					"\25\10\10\1\26\1\25\1\100\4\0\1\165\1\25\1\61\1\233\1\10\10\25\1\24\3\25\75" +
					"\10\1\26\2\25\36\10\1\46\41\25\43\10\1\22\12\25\61\10\1\113\40\25\15\10\1" +
					"\46\1\10\1\26\1\10\1\131\1\10\1\335\1\2\127\25\1\336\1\337\2\0\1\340\1\2\3" +
					"\25\1\341\22\25\1\323\67\25\12\10\1\30\10\10\1\30\1\342\1\343\1\10\1\344\1" +
					"\150\7\10\1\35\1\345\2\30\3\10\1\346\1\175\1\37\1\105\51\10\1\74\3\10\1\105" +
					"\2\10\1\216\3\10\1\216\2\10\1\30\3\10\1\30\2\10\1\22\3\10\1\22\3\10\1\105" +
					"\3\10\1\105\2\10\1\216\1\347\6\5\6\0\1\165\1\232\5\0\1\203\1\311\1\25\1\350" +
					"\2\25\1\232\1\43\1\0\52\25\1\165\2\0\1\351\1\352\1\312\72\25\30\10\1\26\1" +
					"\25\1\165\5\25\10\10\1\223\1\312\1\5\1\166\24\25\1\150\3\10\1\167\1\40\1\216" +
					"\1\353\1\250\1\354\1\167\1\241\1\167\2\216\1\124\1\10\1\34\1\10\1\113\1\355" +
					"\1\34\1\10\1\113\50\25\32\10\1\22\5\25\106\10\1\26\1\25\33\10\1\74\120\10" +
					"\1\24\1\25\146\10\1\131\3\25\3\10\1\74\74\25\1\123\3\25\14\0\20\25\36\0\2" +
					"\25");

	/* The ZZ_CMAP_A table has 1904 entries */
	static final char ZZ_CMAP_A[] = zzUnpackCMap(
			"\11\63\1\3\1\64\2\0\1\1\6\63\4\0\1\2\1\65\1\40\1\0\1\43\1\53\1\0\1\41\1\32" +
					"\1\33\1\52\1\66\1\47\1\42\1\44\1\46\12\67\1\50\1\56\1\54\1\51\1\4\1\0\1\55" +
					"\4\43\1\62\15\43\1\34\1\70\1\35\1\0\1\43\1\0\1\11\1\7\1\25\1\15\1\14\1\30" +
					"\1\60\1\10\1\20\1\57\1\43\1\16\1\27\1\23\1\22\1\26\1\31\1\13\1\5\1\21\1\6" +
					"\1\12\1\17\1\24\1\61\1\43\1\36\1\1\1\37\1\0\1\63\2\0\4\43\4\0\1\43\2\0\1\63" +
					"\2\0\1\53\4\0\1\43\1\0\1\45\2\0\1\43\5\0\7\43\1\0\2\43\4\0\4\43\16\0\5\43" +
					"\7\0\1\43\1\0\1\43\1\0\5\43\1\0\2\43\2\0\4\43\1\0\1\43\6\0\1\43\1\0\3\43\1" +
					"\0\1\43\1\0\4\43\1\0\13\43\1\0\3\43\1\0\5\63\2\0\6\43\1\0\7\43\1\0\1\43\15" +
					"\0\1\43\1\0\15\63\1\0\1\63\1\0\2\63\1\0\2\63\1\0\1\63\3\43\5\0\6\63\5\0\1" +
					"\43\4\0\3\63\1\0\1\63\3\0\3\43\5\63\2\67\4\0\2\43\1\63\13\43\1\0\1\43\7\63" +
					"\2\43\2\63\1\0\4\63\2\43\2\67\3\43\2\0\1\43\7\0\1\63\1\43\1\63\6\43\3\63\2" +
					"\0\11\43\3\63\1\43\6\0\2\67\6\43\4\63\2\43\2\0\2\63\1\43\11\63\1\43\3\63\1" +
					"\43\5\63\2\0\1\43\3\63\4\0\6\43\6\0\10\63\6\43\3\63\1\43\2\63\1\43\7\63\2" +
					"\43\2\63\2\0\2\67\1\43\3\63\1\0\10\43\2\0\2\43\2\0\6\43\1\0\7\43\1\0\1\43" +
					"\3\0\4\43\2\0\1\63\1\43\7\63\2\0\2\63\2\0\3\63\1\43\5\0\2\43\1\0\5\43\7\0" +
					"\2\43\4\0\3\63\1\0\6\43\4\0\2\43\1\0\2\43\1\0\2\43\1\0\2\43\2\0\1\63\1\0\5" +
					"\63\4\0\2\63\2\0\3\63\3\0\1\63\7\0\4\43\1\0\1\43\7\0\2\67\2\63\3\43\1\63\2" +
					"\0\1\43\1\0\2\43\1\0\3\43\2\63\1\0\3\63\2\0\1\43\10\0\1\43\6\63\6\0\2\63\2" +
					"\0\1\63\1\43\1\0\6\43\3\0\3\43\1\0\4\43\3\0\2\43\1\0\1\43\1\0\4\43\4\0\5\63" +
					"\3\0\3\63\1\0\4\63\2\0\1\43\6\0\5\63\1\0\5\43\3\0\1\43\7\63\1\0\2\63\5\0\2" +
					"\63\1\0\4\43\1\0\3\43\1\0\2\43\5\0\3\43\2\63\1\43\3\63\1\0\4\63\1\43\5\0\3" +
					"\43\1\63\2\0\2\63\1\0\7\43\1\0\1\43\4\0\1\63\4\0\6\63\1\0\1\63\3\0\2\63\4" +
					"\0\1\43\1\63\2\43\7\63\4\0\10\43\10\63\1\0\2\67\7\0\2\43\1\0\1\43\2\0\2\43" +
					"\1\0\1\43\2\0\1\43\6\0\4\43\1\0\3\43\1\0\1\43\1\0\1\43\2\0\2\43\1\0\3\43\2" +
					"\63\1\0\2\63\1\43\2\0\5\43\1\0\1\43\1\0\2\67\2\0\4\43\2\63\13\0\1\63\1\0\1" +
					"\63\1\0\1\63\4\0\2\63\5\43\10\63\11\0\1\63\1\0\7\63\1\43\2\63\4\43\3\63\1" +
					"\43\3\63\2\43\7\63\3\43\4\63\5\43\14\63\1\43\1\63\2\67\4\63\7\0\1\43\2\0\3" +
					"\43\1\0\7\43\2\0\3\63\2\43\3\63\3\0\2\43\2\63\4\0\1\43\1\0\2\63\4\0\4\43\10" +
					"\63\3\0\1\43\3\0\2\43\1\63\5\0\4\63\1\0\5\43\2\63\2\43\1\63\1\43\5\0\5\63" +
					"\3\43\3\0\10\63\5\43\2\67\3\0\3\43\3\63\1\0\5\63\4\43\1\63\4\43\3\63\2\43" +
					"\3\63\1\0\5\63\1\0\1\43\1\0\1\43\1\0\1\43\1\0\1\43\2\0\3\43\1\0\6\43\2\0\2" +
					"\43\2\0\5\63\5\0\1\43\4\0\1\63\3\0\4\63\11\0\1\43\4\0\1\43\1\0\5\43\2\0\1" +
					"\43\1\0\4\43\1\0\3\43\2\0\4\43\5\0\5\43\4\0\1\43\4\0\4\43\3\63\2\43\5\0\2" +
					"\63\2\0\3\43\2\67\2\43\4\0\6\63\1\0\3\43\1\63\3\43\1\63\4\43\1\63\4\43\2\63" +
					"\6\43\3\0\1\43\1\0\1\43\2\0\5\43\1\63\2\43\2\67\5\43\1\0\4\43\2\63\4\0\1\43" +
					"\3\63\2\43\1\63\5\43\2\63\3\0\3\43\4\0\3\43\2\63\2\0\6\43\1\0\3\63\1\0\2\63" +
					"\5\0\5\43\5\0\1\43\1\63\3\43\1\0\2\43\1\0\7\43\2\0\1\63\6\0\2\43\2\0\3\43" +
					"\3\0\2\43\3\0\2\43\2\0\3\63\4\0\3\43\1\0\2\43\1\0\1\43\5\0\1\63\2\0\3\63\5" +
					"\0\1\43\3\0\1\43\2\0\4\43\1\0\2\43\2\0\1\43\3\63\1\0\2\63\1\0\5\43\2\63\1" +
					"\0\3\63\2\0\1\63\2\0\5\63\1\0\2\67\3\43\1\63\2\0\1\43\1\0\1\63\4\43\5\0\3" +
					"\63\3\0\2\67\1\43\1\0\1\43\3\0\2\43\2\63\2\0\6\63\2\43\1\0\1\43\1\63\3\0\1" +
					"\43\3\0\2\43\3\0\5\63\1\43\4\63\3\0\6\63\1\43\6\63\3\0\1\63\1\0\2\63\1\0\1" +
					"\63\2\43\3\0\2\63\6\0\5\63\3\0\6\63\2\0\3\63\2\0\4\63\4\0\1\43\2\0\2\43\2" +
					"\0\4\43\1\0\4\43\1\0\1\43\1\0\6\43\2\0\5\43\1\0\4\43\1\0\4\43\2\0\2\67\4\0" +
					"\1\63\3\0\1\63\2\0\7\63\1\0\2\63\1\0\2\63\1\0\1\43\1\0\1\43\5\0\1\43\1\0\1" +
					"\43\1\0\3\43\1\0\3\43\1\0\3\43");

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 =
			"\5\0\1\1\1\2\1\3\1\4\22\5\1\6\1\7" +
					"\1\10\1\11\1\12\1\13\1\14\1\15\1\1\1\16" +
					"\1\1\1\17\1\20\1\21\1\22\1\23\1\1\1\24" +
					"\1\25\1\1\1\26\1\27\1\30\1\31\2\30\1\32" +
					"\3\30\1\2\1\0\5\5\1\33\17\5\1\34\13\5" +
					"\1\35\1\36\1\3\1\37\3\0\1\31\1\32\1\40" +
					"\1\5\1\41\1\5\1\42\1\5\1\43\7\5\1\44" +
					"\24\5\1\45\2\0\1\46\1\47\16\5\1\50\1\51" +
					"\1\52\2\5\1\53\1\54\1\5\1\55\7\5\2\0" +
					"\11\5\1\56\1\57\14\5\1\60\1\0\1\47\1\61" +
					"\11\5\1\62\1\63\3\5\1\64\5\5\1\65\6\5" +
					"\1\66\1\5\1\67\1\70\1\5\1\71\1\5\1\72" +
					"\1\5\1\73\1\74\1\75\1\76\1\77\1\100\1\101" +
					"\1\5\1\102\1\5\1\103\1\104\1\105";

	private static int[] zzUnpackAction() {
		int[] result = new int[249];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 =
			"\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u011d" +
					"\0\u011d\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5" +
					"\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad" +
					"\0\u04e6\0\u051f\0\u0558\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d" +
					"\0\u011d\0\u011d\0\u011d\0\u0591\0\u011d\0\u05ca\0\u011d\0\u011d" +
					"\0\u0603\0\u011d\0\u063c\0\u0675\0\u011d\0\u06ae\0\u06e7\0\u0720" +
					"\0\u0759\0\u011d\0\u011d\0\u0792\0\u07cb\0\u011d\0\u0804\0\u083d" +
					"\0\u0876\0\u08af\0\u05ca\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc" +
					"\0\u04ad\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b" +
					"\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23" +
					"\0\u04ad\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2" +
					"\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u0603" +
					"\0\u107a\0\u10b3\0\u10ec\0\u07cb\0\u083d\0\u04ad\0\u1125\0\u04ad" +
					"\0\u115e\0\u04ad\0\u1197\0\u04ad\0\u11d0\0\u1209\0\u1242\0\u127b" +
					"\0\u12b4\0\u12ed\0\u1326\0\u04ad\0\u135f\0\u1398\0\u13d1\0\u140a" +
					"\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2" +
					"\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a" +
					"\0\u011d\0\u0675\0\u17d3\0\u011d\0\u180c\0\u1845\0\u187e\0\u18b7" +
					"\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f" +
					"\0\u1ab8\0\u1af1\0\u1b2a\0\u04ad\0\u04ad\0\u04ad\0\u1b63\0\u1b9c" +
					"\0\u04ad\0\u04ad\0\u1bd5\0\u04ad\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9" +
					"\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81" +
					"\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u04ad\0\u04ad" +
					"\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f" +
					"\0\u21d8\0\u2211\0\u224a\0\u2283\0\u04ad\0\u22bc\0\u22bc\0\u04ad" +
					"\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u2484" +
					"\0\u24bd\0\u04ad\0\u04ad\0\u24f6\0\u252f\0\u2568\0\u04ad\0\u25a1" +
					"\0\u25da\0\u2613\0\u264c\0\u2685\0\u04ad\0\u26be\0\u26f7\0\u2730" +
					"\0\u2769\0\u27a2\0\u27db\0\u04ad\0\u2814\0\u04ad\0\u04ad\0\u284d" +
					"\0\u04ad\0\u2886\0\u04ad\0\u28bf\0\u04ad\0\u04ad\0\u04ad\0\u04ad" +
					"\0\u04ad\0\u04ad\0\u04ad\0\u28f8\0\u04ad\0\u2931\0\u04ad\0\u04ad" +
					"\0\u04ad";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[249];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 =
			"\1\6\1\7\1\10\1\6\1\11\1\12\1\13\1\14" +
					"\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24" +
					"\1\25\1\26\1\27\2\30\1\31\1\32\1\30\1\33" +
					"\1\30\1\34\1\35\1\36\1\37\1\40\1\41\1\42" +
					"\1\43\1\44\1\30\1\45\1\6\1\46\1\47\1\50" +
					"\1\51\1\52\1\53\1\54\1\55\1\56\4\30\1\6" +
					"\1\7\1\57\1\60\1\61\1\6\40\62\1\63\27\62" +
					"\1\64\51\62\1\65\16\62\1\64\41\62\1\66\26\62" +
					"\1\67\42\62\1\70\25\62\1\71\72\0\1\7\2\72" +
					"\42\0\1\73\15\0\1\7\11\0\1\30\1\74\12\30" +
					"\1\75\10\30\10\0\2\30\1\0\2\53\10\0\5\30" +
					"\3\0\1\30\6\0\1\76\24\30\10\0\2\30\1\0" +
					"\2\53\10\0\5\30\3\0\1\30\6\0\15\30\1\77" +
					"\7\30\10\0\2\30\1\0\2\53\10\0\5\30\3\0" +
					"\1\30\6\0\4\30\1\100\20\30\10\0\2\30\1\0" +
					"\2\53\10\0\5\30\3\0\1\30\6\0\1\101\1\30" +
					"\1\102\22\30\10\0\2\30\1\0\2\53\10\0\5\30" +
					"\3\0\1\30\6\0\4\30\1\103\10\30\1\104\7\30" +
					"\10\0\2\30\1\0\2\53\10\0\5\30\3\0\1\30" +
					"\6\0\7\30\1\105\15\30\10\0\2\30\1\0\2\53" +
					"\10\0\5\30\3\0\1\30\6\0\16\30\1\106\1\107" +
					"\2\30\1\110\2\30\10\0\2\30\1\0\2\53\10\0" +
					"\5\30\3\0\1\30\6\0\1\111\3\30\1\112\2\30" +
					"\1\113\3\30\1\114\1\30\1\115\7\30\10\0\2\30" +
					"\1\0\2\53\10\0\5\30\3\0\1\30\6\0\15\30" +
					"\1\116\7\30\10\0\2\30\1\0\2\53\10\0\5\30" +
					"\3\0\1\30\6\0\13\30\1\117\1\30\1\120\7\30" +
					"\10\0\2\30\1\0\2\53\10\0\5\30\3\0\1\30" +
					"\6\0\1\121\15\30\1\122\6\30\10\0\2\30\1\0" +
					"\2\53\10\0\5\30\3\0\1\30\6\0\6\30\1\123" +
					"\1\124\3\30\1\125\11\30\10\0\2\30\1\0\2\53" +
					"\10\0\5\30\3\0\1\30\6\0\2\30\1\126\22\30" +
					"\10\0\2\30\1\0\2\53\10\0\5\30\3\0\1\30" +
					"\6\0\25\30\10\0\2\30\1\0\2\53\10\0\5\30" +
					"\3\0\1\30\6\0\15\30\1\127\7\30\10\0\2\30" +
					"\1\0\2\53\10\0\5\30\3\0\1\30\6\0\6\30" +
					"\1\130\16\30\10\0\2\30\1\0\2\53\10\0\5\30" +
					"\3\0\1\30\6\0\1\30\1\131\2\30\1\132\2\30" +
					"\1\133\3\30\1\134\11\30\10\0\2\30\1\0\2\53" +
					"\10\0\5\30\3\0\1\30\43\0\1\135\24\0\1\136" +
					"\47\0\1\137\73\0\1\140\24\0\25\53\10\0\2\53" +
					"\1\0\2\53\10\0\5\53\3\0\1\53\6\0\25\141" +
					"\11\0\1\141\13\0\4\141\64\0\1\56\77\0\1\142" +
					"\72\0\1\61\45\0\1\143\22\0\1\61\14\0\1\62" +
					"\5\0\1\62\1\0\1\62\14\0\1\62\101\0\1\144" +
					"\32\0\1\62\5\0\1\62\1\0\1\62\15\0\1\62" +
					"\71\0\1\145\41\0\1\62\5\0\1\62\1\0\1\62" +
					"\47\0\2\72\42\0\1\73\27\0\2\30\1\146\22\30" +
					"\10\0\2\30\1\0\2\53\10\0\5\30\3\0\1\30" +
					"\6\0\6\30\1\147\16\30\10\0\2\30\1\0\2\53" +
					"\10\0\5\30\3\0\1\30\6\0\7\30\1\150\15\30" +
					"\10\0\2\30\1\0\2\53\10\0\5\30\3\0\1\30" +
					"\6\0\15\30\1\151\7\30\10\0\2\30\1\0\2\53" +
					"\10\0\5\30\3\0\1\30\6\0\1\152\24\30\10\0" +
					"\2\30\1\0\2\53\10\0\5\30\3\0\1\30\6\0" +
					"\1\153\24\30\10\0\2\30\1\0\2\53\10\0\5\30" +
					"\3\0\1\30\6\0\6\30\1\154\16\30\10\0\2\30" +
					"\1\0\2\53\10\0\5\30\3\0\1\30\6\0\11\30" +
					"\1\155\13\30\10\0\2\30\1\0\2\53\10\0\5\30" +
					"\3\0\1\30\6\0\1\156\3\30\1\157\17\30\1\160" +
					"\10\0\2\30\1\0\2\53\10\0\5\30\3\0\1\30" +
					"\6\0\20\30\1\161\4\30\10\0\2\30\1\0\2\53" +
					"\10\0\5\30\3\0\1\30\6\0\14\30\1\162\10\30" +
					"\10\0\2\30\1\0\2\53\10\0\5\30\3\0\1\30" +
					"\6\0\21\30\1\163\3\30\10\0\2\30\1\0\2\53" +
					"\10\0\5\30\3\0\1\30\6\0\11\30\1\164\13\30" +
					"\10\0\2\30\1\0\2\53\10\0\5\30\3\0\1\30" +
					"\6\0\14\30\1\165\10\30\10\0\2\30\1\0\2\53" +
					"\10\0\5\30\3\0\1\30\6\0\20\30\1\166\4\30" +
					"\10\0\2\30\1\0\2\53\10\0\5\30\3\0\1\30" +
					"\6\0\5\30\1\167\17\30\10\0\2\30\1\0\2\53" +
					"\10\0\5\30\3\0\1\30\6\0\1\30\1\170\23\30" +
					"\10\0\2\30\1\0\2\53\10\0\5\30\3\0\1\30" +
					"\6\0\16\30\1\171\6\30\10\0\2\30\1\0\2\53" +
					"\10\0\5\30\3\0\1\30\6\0\14\30\1\172\10\30" +
					"\10\0\2\30\1\0\2\53\10\0\5\30\3\0\1\30" +
					"\6\0\6\30\1\173\16\30\10\0\2\30\1\0\2\53" +
					"\10\0\5\30\3\0\1\30\6\0\1\174\13\30\1\175" +
					"\10\30\10\0\2\30\1\0\2\53\10\0\5\30\3\0" +
					"\1\30\6\0\1\30\1\176\23\30\10\0\2\30\1\0" +
					"\2\53\10\0\5\30\3\0\1\30\6\0\6\30\1\177" +
					"\16\30\10\0\2\30\1\0\2\53\10\0\5\30\3\0" +
					"\1\30\6\0\22\30\1\200\2\30\10\0\2\30\1\0" +
					"\2\53\10\0\5\30\3\0\1\30\6\0\25\30\10\0" +
					"\2\30\1\0\2\53\10\0\1\201\4\30\3\0\1\30" +
					"\6\0\16\30\1\202\3\30\1\203\2\30\10\0\2\30" +
					"\1\0\2\53\10\0\5\30\3\0\1\30\6\0\13\30" +
					"\1\204\11\30\10\0\2\30\1\0\2\53\10\0\5\30" +
					"\3\0\1\30\6\0\16\30\1\205\6\30\10\0\2\30" +
					"\1\0\2\53\10\0\5\30\3\0\1\30\6\0\11\30" +
					"\1\206\13\30\10\0\2\30\1\0\2\53\10\0\5\30" +
					"\3\0\1\30\6\0\4\30\1\207\20\30\10\0\2\30" +
					"\1\0\2\53\10\0\5\30\3\0\1\30\6\0\16\30" +
					"\1\210\6\30\10\0\2\30\1\0\2\53\10\0\5\30" +
					"\3\0\1\30\43\0\1\135\72\0\1\143\22\0\1\136" +
					"\1\0\64\137\1\0\4\137\4\0\1\211\25\141\10\0" +
					"\2\141\1\212\2\0\1\213\7\0\5\141\3\0\1\141" +
					"\1\0\64\142\1\214\4\142\67\0\1\215\6\0\13\30" +
					"\1\216\11\30\10\0\2\30\1\0\2\53\10\0\5\30" +
					"\3\0\1\30\6\0\11\30\1\217\13\30\10\0\2\30" +
					"\1\0\2\53\10\0\5\30\3\0\1\30\6\0\14\30" +
					"\1\220\10\30\10\0\2\30\1\0\2\53\10\0\5\30" +
					"\3\0\1\30\6\0\4\30\1\221\20\30\10\0\2\30" +
					"\1\0\2\53\10\0\5\30\3\0\1\30\6\0\15\30" +
					"\1\222\7\30\10\0\2\30\1\0\2\53\10\0\5\30" +
					"\3\0\1\30\6\0\20\30\1\223\4\30\10\0\2\30" +
					"\1\0\2\53\10\0\5\30\3\0\1\30\6\0\1\30" +
					"\1\224\23\30\10\0\2\30\1\0\2\53\10\0\5\30" +
					"\3\0\1\30\6\0\11\30\1\225\13\30\10\0\2\30" +
					"\1\0\2\53\10\0\5\30\3\0\1\30\6\0\7\30" +
					"\1\226\15\30\10\0\2\30\1\0\2\53\10\0\5\30" +
					"\3\0\1\30\6\0\14\30\1\227\10\30\10\0\2\30" +
					"\1\0\2\53\10\0\5\30\3\0\1\30\6\0\7\30" +
					"\1\230\15\30\10\0\2\30\1\0\2\53\10\0\5\30" +
					"\3\0\1\30\6\0\15\30\1\231\7\30\10\0\2\30" +
					"\1\0\2\53\10\0\5\30\3\0\1\30\6\0\13\30" +
					"\1\232\11\30\10\0\2\30\1\0\2\53\10\0\5\30" +
					"\3\0\1\30\6\0\2\30\1\233\22\30\10\0\2\30" +
					"\1\0\2\53\10\0\5\30\3\0\1\30\6\0\25\30" +
					"\10\0\2\30\1\0\2\53\10\0\1\30\1\234\3\30" +
					"\3\0\1\30\6\0\3\30\1\235\21\30\10\0\2\30" +
					"\1\0\2\53\10\0\5\30\3\0\1\30\6\0\10\30" +
					"\1\236\14\30\10\0\2\30\1\0\2\53\10\0\5\30" +
					"\3\0\1\30\6\0\14\30\1\237\10\30\10\0\2\30" +
					"\1\0\2\53\10\0\5\30\3\0\1\30\6\0\7\30" +
					"\1\240\5\30\1\241\7\30\10\0\2\30\1\0\2\53" +
					"\10\0\5\30\3\0\1\30\6\0\7\30\1\242\15\30" +
					"\10\0\2\30\1\0\2\53\10\0\5\30\3\0\1\30" +
					"\6\0\22\30\1\243\2\30\10\0\2\30\1\0\2\53" +
					"\10\0\5\30\3\0\1\30\6\0\7\30\1\244\15\30" +
					"\10\0\2\30\1\0\2\53\10\0\5\30\3\0\1\30" +
					"\6\0\7\30\1\245\15\30\10\0\2\30\1\0\2\53" +
					"\10\0\5\30\3\0\1\30\6\0\20\30\1\246\4\30" +
					"\10\0\2\30\1\0\2\53\10\0\5\30\3\0\1\30" +
					"\6\0\21\30\1\247\3\30\10\0\2\30\1\0\2\53" +
					"\10\0\5\30\3\0\1\30\6\0\5\30\1\250\17\30" +
					"\10\0\2\30\1\0\2\53\10\0\5\30\3\0\1\30" +
					"\6\0\20\30\1\251\4\30\10\0\2\30\1\0\2\53" +
					"\10\0\5\30\3\0\1\30\6\0\1\176\24\30\10\0" +
					"\2\30\1\0\2\53\10\0\5\30\3\0\1\30\6\0" +
					"\14\30\1\252\10\30\10\0\2\30\1\0\2\53\10\0" +
					"\5\30\3\0\1\30\6\0\4\30\1\253\20\30\10\0" +
					"\2\30\1\0\2\53\10\0\5\30\3\0\1\30\3\0" +
					"\1\213\2\0\25\254\11\0\1\254\13\0\4\254\70\0" +
					"\1\255\4\0\1\215\6\0\16\30\1\256\6\30\10\0" +
					"\2\30\1\0\2\53\10\0\5\30\3\0\1\30\6\0" +
					"\7\30\1\257\15\30\10\0\2\30\1\0\2\53\10\0" +
					"\5\30\3\0\1\30\6\0\6\30\1\260\16\30\10\0" +
					"\2\30\1\0\2\53\10\0\5\30\3\0\1\30\6\0" +
					"\14\30\1\261\10\30\10\0\2\30\1\0\2\53\10\0" +
					"\5\30\3\0\1\30\6\0\1\30\1\262\23\30\10\0" +
					"\2\30\1\0\2\53\10\0\5\30\3\0\1\30\6\0" +
					"\14\30\1\263\10\30\10\0\2\30\1\0\2\53\10\0" +
					"\5\30\3\0\1\30\6\0\13\30\1\264\11\30\10\0" +
					"\2\30\1\0\2\53\10\0\5\30\3\0\1\30\6\0" +
					"\15\30\1\265\7\30\10\0\2\30\1\0\2\53\10\0" +
					"\5\30\3\0\1\30\6\0\16\30\1\266\6\30\10\0" +
					"\2\30\1\0\2\53\10\0\5\30\3\0\1\30\6\0" +
					"\25\30\10\0\2\30\1\0\2\53\10\0\2\30\1\267" +
					"\2\30\3\0\1\30\6\0\17\30\1\270\5\30\10\0" +
					"\2\30\1\0\2\53\10\0\5\30\3\0\1\30\6\0" +
					"\6\30\1\271\16\30\10\0\2\30\1\0\2\53\10\0" +
					"\5\30\3\0\1\30\6\0\16\30\1\272\6\30\10\0" +
					"\2\30\1\0\2\53\10\0\5\30\3\0\1\30\6\0" +
					"\11\30\1\273\13\30\10\0\2\30\1\0\2\53\10\0" +
					"\5\30\3\0\1\30\6\0\4\30\1\274\20\30\10\0" +
					"\2\30\1\0\2\53\10\0\5\30\3\0\1\30\6\0" +
					"\25\30\10\0\2\30\1\0\2\53\10\0\1\30\1\275" +
					"\3\30\3\0\1\30\6\0\13\30\1\276\11\30\10\0" +
					"\2\30\1\0\2\53\10\0\5\30\3\0\1\30\6\0" +
					"\20\30\1\277\4\30\10\0\2\30\1\0\2\53\10\0" +
					"\5\30\3\0\1\30\6\0\7\30\1\300\15\30\10\0" +
					"\2\30\1\0\2\53\10\0\5\30\3\0\1\30\6\0" +
					"\15\30\1\301\7\30\10\0\2\30\1\0\2\53\10\0" +
					"\5\30\3\0\1\30\6\0\4\30\1\302\20\30\10\0" +
					"\2\30\1\0\2\53\10\0\5\30\3\0\1\30\6\0" +
					"\14\30\1\303\10\30\10\0\2\30\1\0\2\53\10\0" +
					"\5\30\3\0\1\30\6\0\1\30\1\304\23\30\10\0" +
					"\2\30\1\0\2\53\10\0\5\30\3\0\1\30\6\0" +
					"\11\30\1\305\13\30\10\0\2\30\1\0\2\53\10\0" +
					"\5\30\3\0\1\30\5\0\1\211\25\254\10\0\2\254" +
					"\13\0\5\254\3\0\1\254\43\0\1\306\23\0\1\306" +
					"\1\307\6\0\25\30\10\0\2\30\1\0\2\53\10\0" +
					"\1\30\1\310\3\30\3\0\1\30\6\0\4\30\1\311" +
					"\20\30\10\0\2\30\1\0\2\53\10\0\5\30\3\0" +
					"\1\30\6\0\4\30\1\312\20\30\10\0\2\30\1\0" +
					"\2\53\10\0\5\30\3\0\1\30\6\0\13\30\1\313" +
					"\11\30\10\0\2\30\1\0\2\53\10\0\5\30\3\0" +
					"\1\30\6\0\6\30\1\314\16\30\10\0\2\30\1\0" +
					"\2\53\10\0\5\30\3\0\1\30\6\0\13\30\1\315" +
					"\11\30\10\0\2\30\1\0\2\53\10\0\5\30\3\0" +
					"\1\30\6\0\6\30\1\316\16\30\10\0\2\30\1\0" +
					"\2\53\10\0\5\30\3\0\1\30\6\0\1\317\24\30" +
					"\10\0\2\30\1\0\2\53\10\0\5\30\3\0\1\30" +
					"\6\0\10\30\1\320\14\30\10\0\2\30\1\0\2\53" +
					"\10\0\5\30\3\0\1\30\6\0\4\30\1\321\20\30" +
					"\10\0\2\30\1\0\2\53\10\0\5\30\3\0\1\30" +
					"\6\0\7\30\1\322\15\30\10\0\2\30\1\0\2\53" +
					"\10\0\5\30\3\0\1\30\6\0\7\30\1\323\15\30" +
					"\10\0\2\30\1\0\2\53\10\0\5\30\3\0\1\30" +
					"\6\0\16\30\1\324\6\30\10\0\2\30\1\0\2\53" +
					"\10\0\5\30\3\0\1\30\6\0\7\30\1\325\15\30" +
					"\10\0\2\30\1\0\2\53\10\0\5\30\3\0\1\30" +
					"\6\0\16\30\1\326\6\30\10\0\2\30\1\0\2\53" +
					"\10\0\5\30\3\0\1\30\6\0\14\30\1\327\10\30" +
					"\10\0\2\30\1\0\2\53\10\0\5\30\3\0\1\30" +
					"\6\0\21\30\1\330\3\30\10\0\2\30\1\0\2\53" +
					"\10\0\5\30\3\0\1\30\6\0\16\30\1\331\6\30" +
					"\10\0\2\30\1\0\2\53\10\0\5\30\3\0\1\30" +
					"\6\0\14\30\1\332\10\30\10\0\2\30\1\0\2\53" +
					"\10\0\5\30\3\0\1\30\6\0\13\30\1\333\11\30" +
					"\10\0\2\30\1\0\2\53\10\0\5\30\3\0\1\30" +
					"\6\0\6\30\1\334\16\30\10\0\2\30\1\0\2\53" +
					"\10\0\5\30\3\0\1\30\70\0\1\307\6\0\16\30" +
					"\1\335\6\30\10\0\2\30\1\0\2\53\10\0\5\30" +
					"\3\0\1\30\6\0\20\30\1\336\4\30\10\0\2\30" +
					"\1\0\2\53\10\0\5\30\3\0\1\30\6\0\11\30" +
					"\1\337\13\30\10\0\2\30\1\0\2\53\10\0\5\30" +
					"\3\0\1\30\6\0\20\30\1\340\4\30\10\0\2\30" +
					"\1\0\2\53\10\0\5\30\3\0\1\30\6\0\5\30" +
					"\1\341\17\30\10\0\2\30\1\0\2\53\10\0\5\30" +
					"\3\0\1\30\6\0\7\30\1\342\15\30\10\0\2\30" +
					"\1\0\2\53\10\0\5\30\3\0\1\30\6\0\7\30" +
					"\1\343\15\30\10\0\2\30\1\0\2\53\10\0\5\30" +
					"\3\0\1\30\6\0\1\344\24\30\10\0\2\30\1\0" +
					"\2\53\10\0\5\30\3\0\1\30\6\0\2\30\1\345" +
					"\22\30\10\0\2\30\1\0\2\53\10\0\5\30\3\0" +
					"\1\30\6\0\14\30\1\346\10\30\10\0\2\30\1\0" +
					"\2\53\10\0\5\30\3\0\1\30\6\0\6\30\1\347" +
					"\16\30\10\0\2\30\1\0\2\53\10\0\5\30\3\0" +
					"\1\30\6\0\4\30\1\350\20\30\10\0\2\30\1\0" +
					"\2\53\10\0\5\30\3\0\1\30\6\0\14\30\1\351" +
					"\10\30\10\0\2\30\1\0\2\53\10\0\5\30\3\0" +
					"\1\30\6\0\7\30\1\352\15\30\10\0\2\30\1\0" +
					"\2\53\10\0\5\30\3\0\1\30\6\0\7\30\1\353" +
					"\15\30\10\0\2\30\1\0\2\53\10\0\5\30\3\0" +
					"\1\30\6\0\15\30\1\354\7\30\10\0\2\30\1\0" +
					"\2\53\10\0\5\30\3\0\1\30\6\0\7\30\1\355" +
					"\15\30\10\0\2\30\1\0\2\53\10\0\5\30\3\0" +
					"\1\30\6\0\14\30\1\356\10\30\10\0\2\30\1\0" +
					"\2\53\10\0\5\30\3\0\1\30\6\0\7\30\1\357" +
					"\15\30\10\0\2\30\1\0\2\53\10\0\5\30\3\0" +
					"\1\30\6\0\7\30\1\360\15\30\10\0\2\30\1\0" +
					"\2\53\10\0\5\30\3\0\1\30\6\0\7\30\1\361" +
					"\15\30\10\0\2\30\1\0\2\53\10\0\5\30\3\0" +
					"\1\30\6\0\10\30\1\362\14\30\10\0\2\30\1\0" +
					"\2\53\10\0\5\30\3\0\1\30\6\0\10\30\1\363" +
					"\14\30\10\0\2\30\1\0\2\53\10\0\5\30\3\0" +
					"\1\30\6\0\11\30\1\364\13\30\10\0\2\30\1\0" +
					"\2\53\10\0\5\30\3\0\1\30\6\0\11\30\1\365" +
					"\13\30\10\0\2\30\1\0\2\53\10\0\5\30\3\0" +
					"\1\30\6\0\16\30\1\366\6\30\10\0\2\30\1\0" +
					"\2\53\10\0\5\30\3\0\1\30\6\0\16\30\1\367" +
					"\6\30\10\0\2\30\1\0\2\53\10\0\5\30\3\0" +
					"\1\30\6\0\7\30\1\370\15\30\10\0\2\30\1\0" +
					"\2\53\10\0\5\30\3\0\1\30\6\0\14\30\1\371" +
					"\10\30\10\0\2\30\1\0\2\53\10\0\5\30\3\0" +
					"\1\30\1\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[10602];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String[] ZZ_ERROR_MSG = {
			"Unknown internal scanner error",
			"Error: could not match input",
			"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 =
			"\5\0\1\11\1\1\2\11\22\1\10\11\1\1\1\11" +
					"\1\1\2\11\1\1\1\11\2\1\1\11\4\1\2\11" +
					"\2\1\1\11\4\1\1\0\45\1\3\0\45\1\1\11" +
					"\2\0\1\11\37\1\2\0\30\1\1\0\63\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[249];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * the input device
	 */
	private java.io.Reader zzReader;

	/**
	 * the current state of the DFA
	 */
	private int zzState;

	/**
	 * the current lexical state
	 */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is
	 * the source of the yytext() string
	 */
	private CharSequence zzBuffer = "";

	/**
	 * the textposition at the last accepting state
	 */
	private int zzMarkedPos;

	/**
	 * the current text position in the buffer
	 */
	private int zzCurrentPos;

	/**
	 * startRead marks the beginning of the yytext() string in the buffer
	 */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read
	 * from input
	 */
	private int zzEndRead;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/**
	 * zzAtEOF == true <=> the scanner is at the EOF
	 */
	private boolean zzAtEOF;

	/**
	 * denotes if the user-EOF-code has already been executed
	 */
	private boolean zzEOFDone;

	/* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end) ? null : TaraTypes.NEWLINE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof() {
		if (queue.isEmpty() && !end) {
			blockManager.eof();
			storeTokens();
			end = true;
			queue.add(TaraTypes.NEWLINE);
		}
		return sendToken();
	}

	private String getTextSpaces(String text) {
		int index = (text.indexOf(' ') == -1) ? text.indexOf('\t') : text.indexOf(' ');
		return (index == -1) ? "" : text.substring(index);
	}

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

	private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
		if (queue.isEmpty()) {
			String spaces = getTextSpaces(yytext().toString());
			blockManager.spaces(spaces);
			storeTokens();
		}
		return sendToken();
	}

	private IElementType inline() {
		blockManager.openBracket(yytext().length());
		storeTokens();
		return sendToken();
	}

	private IElementType semicolon() {
		blockManager.semicolon(yytext().length());
		storeTokens();
		return sendToken();
	}

	private void storeTokens() {
		blockManager.actions();
		for (IElementType token : blockManager.actions())
			queue.offer(token);
	}


	/**
	 * Creates a new scanner
	 *
	 * @param in the java.io.Reader to read input from.
	 */
	TaraLexer(java.io.Reader in) {
		this.zzReader = in;
	}


	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		int size = 0;
		for (int i = 0, length = packed.length(); i < length; i += 2) {
			size += packed.charAt(i);
		}
		char[] map = new char[size];
		int i = 0;  /* index in packed string  */
		int j = 0;  /* index in unpacked array */
		while (i < packed.length()) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do map[j++] = value; while (--count > 0);
		}
		return map;
	}

	public final int getTokenStart() {
		return zzStartRead;
	}

	public final int getTokenEnd() {
		return getTokenStart() + yylength();
	}

	public void reset(CharSequence buffer, int start, int end, int initialState) {
		zzBuffer = buffer;
		zzCurrentPos = zzMarkedPos = zzStartRead = start;
		zzAtEOF = false;
		zzAtBOL = true;
		zzEndRead = end;
		yybegin(initialState);
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return {@code false}, iff there was new input.
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {
		return true;
	}


	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final CharSequence yytext() {
		return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
	}


	/**
	 * Returns the character at position {@code pos} from the
	 * matched text.
	 * <p>
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch.
	 *            A value from 0 to yylength()-1.
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer.charAt(zzStartRead + pos);
	}


	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}


	/**
	 * Reports an error that occurred while scanning.
	 * <p>
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 * <p>
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * <p>
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again.
	 *               This number must not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}


	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	public IElementType advance() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		CharSequence zzBufferL = zzBuffer;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ((zzAttributes & 1) == 1) {
				zzAction = zzState;
			}


			zzForAction:
			{
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
						zzCurrentPosL += Character.charCount(zzInput);
					} else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
				zzAtEOF = true;
				switch (zzLexicalState) {
					case YYINITIAL: {
						return eof();
					}  // fall though
					case 250:
						break;
					default:
						return null;
				}
			} else {
				switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
					case 1: {
						return TokenType.BAD_CHARACTER;
					}
					// fall through
					case 70:
						break;
					case 2: {
						return newlineIndent();
					}
					// fall through
					case 71:
						break;
					case 3: {
						return TokenType.WHITE_SPACE;
					}
					// fall through
					case 72:
						break;
					case 4: {
						return inline();
					}
					// fall through
					case 73:
						break;
					case 5: {
						return TaraTypes.IDENTIFIER_KEY;
					}
					// fall through
					case 74:
						break;
					case 6: {
						return TaraTypes.LEFT_PARENTHESIS;
					}
					// fall through
					case 75:
						break;
					case 7: {
						return TaraTypes.RIGHT_PARENTHESIS;
					}
					// fall through
					case 76:
						break;
					case 8: {
						return TaraTypes.LEFT_SQUARE;
					}
					// fall through
					case 77:
						break;
					case 9: {
						return TaraTypes.RIGHT_SQUARE;
					}
					// fall through
					case 78:
						break;
					case 10: {
						return TaraTypes.LEFT_CURLY;
					}
					// fall through
					case 79:
						break;
					case 11: {
						return TaraTypes.RIGHT_CURLY;
					}
					// fall through
					case 80:
						break;
					case 12: {
						yybegin(QUOTED);
						return TaraTypes.QUOTE_BEGIN;
					}
					// fall through
					case 81:
						break;
					case 13: {
						yybegin(EXPRESSION);
						return TaraTypes.EXPRESSION_BEGIN;
					}
					// fall through
					case 82:
						break;
					case 14: {
						return TaraTypes.DOT;
					}
					// fall through
					case 83:
						break;
					case 15: {
						return TaraTypes.COMMA;
					}
					// fall through
					case 84:
						break;
					case 16: {
						return TaraTypes.COLON;
					}
					// fall through
					case 85:
						break;
					case 17: {
						return TaraTypes.EQUALS;
					}
					// fall through
					case 86:
						break;
					case 18: {
						return TaraTypes.STAR;
					}
					// fall through
					case 87:
						break;
					case 19: {
						return TaraTypes.METRIC_VALUE_KEY;
					}
					// fall through
					case 88:
						break;
					case 20: {
						return TaraTypes.AT;
					}
					// fall through
					case 89:
						break;
					case 21: {
						return semicolon();
					}
					// fall through
					case 90:
						break;
					case 22: {
						return TaraTypes.PLUS;
					}
					// fall through
					case 91:
						break;
					case 23: {
						return TaraTypes.NATURAL_VALUE_KEY;
					}
					// fall through
					case 92:
						break;
					case 24: {
						return TaraTypes.CHARACTER;
					}
					// fall through
					case 93:
						break;
					case 25: {
						yybegin(YYINITIAL);
						return TaraTypes.QUOTE_END;
					}
					// fall through
					case 94:
						break;
					case 26: {
						yybegin(YYINITIAL);
						return TaraTypes.EXPRESSION_END;
					}
					// fall through
					case 95:
						break;
					case 27: {
						return TaraTypes.AS;
					}
					// fall through
					case 96:
						break;
					case 28: {
						return TaraTypes.IS;
					}
					// fall through
					case 97:
						break;
					case 29: {
						yybegin(EXPRESSION_MULTILINE);
						return TaraTypes.EXPRESSION_BEGIN;
					}
					// fall through
					case 98:
						break;
					case 30: {
						return TaraTypes.NEGATIVE_VALUE_KEY;
					}
					// fall through
					case 99:
						break;
					case 31: {
						yybegin(MULTILINE);
						return TaraTypes.QUOTE_BEGIN;
					}
					// fall through
					case 100:
						break;
					case 32: {
						return TaraTypes.SUB;
					}
					// fall through
					case 101:
						break;
					case 33: {
						return TaraTypes.USE;
					}
					// fall through
					case 102:
						break;
					case 34: {
						return TaraTypes.HAS;
					}
					// fall through
					case 103:
						break;
					case 35: {
						return TaraTypes.VAR;
					}
					// fall through
					case 104:
						break;
					case 36: {
						return TaraTypes.DSL;
					}
					// fall through
					case 105:
						break;
					case 37: {
						return TaraTypes.CLASS_TYPE;
					}
					// fall through
					case 106:
						break;
					case 38: {
						yypushback(1);
						return TaraTypes.DOC_LINE;
					}
					// fall through
					case 107:
						break;
					case 39: {
						return TaraTypes.DOUBLE_VALUE_KEY;
					}
					// fall through
					case 108:
						break;
					case 40: {
						return TaraTypes.LONG_TYPE;
					}
					// fall through
					case 109:
						break;
					case 41: {
						return TaraTypes.WITH;
					}
					// fall through
					case 110:
						break;
					case 42: {
						return TaraTypes.WORD_TYPE;
					}
					// fall through
					case 111:
						break;
					case 43: {
						return TaraTypes.INTO;
					}
					// fall through
					case 112:
						break;
					case 44: {
						return TaraTypes.BOOLEAN_VALUE_KEY;
					}
					// fall through
					case 113:
						break;
					case 45: {
						return TaraTypes.TIME_TYPE;
					}
					// fall through
					case 114:
						break;
					case 46: {
						return TaraTypes.EMPTY_REF;
					}
					// fall through
					case 115:
						break;
					case 47: {
						return TaraTypes.DATE_TYPE;
					}
					// fall through
					case 116:
						break;
					case 48: {
						return TaraTypes.FINAL;
					}
					// fall through
					case 117:
						break;
					case 49: {
						return TaraTypes.STRING_TYPE;
					}
					// fall through
					case 118:
						break;
					case 50: {
						return TaraTypes.DIVINE;
					}
					// fall through
					case 119:
						break;
					case 51: {
						return TaraTypes.DOUBLE_TYPE;
					}
					// fall through
					case 120:
						break;
					case 52: {
						return TaraTypes.OBJECT_TYPE;
					}
					// fall through
					case 121:
						break;
					case 53: {
						return TaraTypes.BOOLEAN_TYPE;
					}
					// fall through
					case 122:
						break;
					case 54: {
						return TaraTypes.EXTENDS;
					}
					// fall through
					case 123:
						break;
					case 55: {
						return TaraTypes.INSTANT_TYPE;
					}
					// fall through
					case 124:
						break;
					case 56: {
						return TaraTypes.INT_TYPE;
					}
					// fall through
					case 125:
						break;
					case 57: {
						return TaraTypes.CONCEPT;
					}
					// fall through
					case 126:
						break;
					case 58: {
						return TaraTypes.PRIVATE;
					}
					// fall through
					case 127:
						break;
					case 59: {
						return TaraTypes.FEATURE;
					}
					// fall through
					case 128:
						break;
					case 60: {
						return TaraTypes.ABSTRACT;
					}
					// fall through
					case 129:
						break;
					case 61: {
						return TaraTypes.VOLATILE;
					}
					// fall through
					case 130:
						break;
					case 62: {
						return TaraTypes.RESOURCE_TYPE;
					}
					// fall through
					case 131:
						break;
					case 63: {
						return TaraTypes.REACTIVE;
					}
					// fall through
					case 132:
						break;
					case 64: {
						return TaraTypes.REQUIRED;
					}
					// fall through
					case 133:
						break;
					case 65: {
						return TaraTypes.ENCLOSED;
					}
					// fall through
					case 134:
						break;
					case 66: {
						return TaraTypes.TERMINAL;
					}
					// fall through
					case 135:
						break;
					case 67: {
						return TaraTypes.FUNCTION_TYPE;
					}
					// fall through
					case 136:
						break;
					case 68: {
						return TaraTypes.DECORABLE;
					}
					// fall through
					case 137:
						break;
					case 69: {
						return TaraTypes.COMPONENT;
					}
					// fall through
					case 138:
						break;
					default:
						zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}


}
