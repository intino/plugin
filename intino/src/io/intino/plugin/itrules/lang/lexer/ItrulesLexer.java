/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package io.intino.plugin.itrules.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import io.intino.plugin.itrules.lang.psi.ItrulesTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>itrules.flex</tt>
 */
class ItrulesLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14736 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\0\1\5\1\6\2\7\1\10\1\11\1\12\1\7\1\13\4\0\1\14"+
    "\1\15\1\16\1\17\2\7\1\20\3\7\1\20\71\7\1\21\1\7\1\22\1\23\1\24\1\25\2\23\16"+
    "\0\1\26\1\14\1\27\1\30\2\7\1\31\11\7\1\32\21\7\1\33\1\34\23\7\1\23\1\6\3\7"+
    "\1\20\1\35\1\6\4\7\1\36\1\37\4\0\1\40\1\41\1\23\3\7\2\42\1\23\1\43\1\44\1"+
    "\0\1\45\5\7\1\46\3\0\1\47\1\50\13\7\1\51\1\40\1\52\1\53\1\0\1\54\1\23\1\55"+
    "\1\56\3\7\3\0\1\57\12\7\1\60\1\0\1\61\1\23\1\0\1\62\3\7\1\46\1\63\1\17\2\7"+
    "\1\60\1\64\1\65\1\66\2\23\3\7\1\67\10\23\1\70\1\24\6\23\1\71\2\0\1\72\1\73"+
    "\6\7\1\74\2\0\1\75\1\7\1\76\1\0\2\6\1\77\1\100\1\101\2\7\1\70\1\102\1\103"+
    "\1\104\1\105\1\55\1\106\1\76\1\0\1\107\1\44\1\77\1\110\1\101\2\7\1\70\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\0\1\120\1\23\1\77\1\32\1\31\2\7\1\70"+
    "\1\121\1\103\1\40\1\122\1\123\1\23\1\76\1\0\1\35\1\23\1\77\1\100\1\101\2\7"+
    "\1\70\1\121\1\103\1\104\1\114\1\117\1\106\1\76\1\0\1\35\1\23\1\124\1\125\1"+
    "\126\1\127\1\130\1\125\1\7\1\131\1\132\1\133\1\134\1\23\1\117\1\0\1\23\1\35"+
    "\1\77\1\26\1\70\2\7\1\70\1\135\1\136\1\137\1\133\1\140\1\22\1\76\1\0\2\23"+
    "\1\141\1\26\1\70\2\7\1\70\1\135\1\103\1\137\1\133\1\140\1\27\1\76\1\0\1\142"+
    "\1\23\1\141\1\26\1\70\4\7\1\143\1\137\1\144\1\55\1\23\1\76\1\0\1\23\1\34\1"+
    "\141\1\7\1\20\1\34\2\7\1\31\1\145\1\20\1\146\1\147\1\0\2\23\1\150\1\23\1\6"+
    "\5\7\1\151\1\152\1\153\1\72\1\0\1\5\4\23\1\154\1\155\1\156\1\6\1\157\1\160"+
    "\1\151\1\161\1\162\1\163\1\0\1\164\4\23\1\123\2\23\1\5\1\0\1\5\1\165\1\166"+
    "\1\7\1\6\3\7\1\24\1\37\1\0\1\137\1\167\1\0\1\37\3\0\1\43\1\170\7\23\5\7\1"+
    "\46\1\0\1\171\1\0\1\5\1\60\1\172\1\173\1\174\1\175\1\7\1\176\1\177\1\0\1\163"+
    "\4\7\1\32\1\16\5\7\1\200\51\7\1\126\1\20\1\126\5\7\1\126\4\7\1\126\1\20\1"+
    "\126\1\7\1\20\7\7\1\126\10\7\1\201\4\23\2\7\2\23\12\7\1\24\1\23\1\6\114\7"+
    "\1\100\2\7\1\6\2\7\1\42\11\7\1\125\1\123\1\23\1\7\1\26\1\202\1\23\2\7\1\202"+
    "\1\23\2\7\1\203\1\23\1\7\1\26\1\204\1\23\6\7\1\205\3\0\1\206\1\207\1\0\1\5"+
    "\3\23\1\210\1\0\1\5\13\7\1\23\5\7\1\211\10\7\1\212\1\23\3\7\1\24\1\0\1\2\1"+
    "\0\1\2\1\117\1\0\3\7\1\212\1\24\1\23\5\7\1\107\2\0\1\50\1\5\1\0\1\5\4\23\2"+
    "\7\1\153\1\2\6\7\1\167\1\72\3\0\1\104\1\0\1\5\1\0\1\5\1\36\13\23\1\213\5\7"+
    "\1\205\1\0\1\213\1\107\1\0\1\5\1\23\1\214\1\2\1\23\1\215\3\7\1\75\1\174\1"+
    "\0\1\62\4\7\1\60\1\0\1\2\1\23\4\7\1\205\2\0\1\23\1\0\1\216\1\0\1\62\3\7\1"+
    "\212\12\23\1\217\2\0\1\220\1\221\1\23\30\7\4\0\1\72\2\23\1\71\42\7\2\212\4"+
    "\7\2\212\1\7\1\222\3\7\1\212\6\7\1\26\1\162\1\223\1\24\1\224\1\107\1\7\1\24"+
    "\1\223\1\24\1\23\1\214\3\23\1\225\1\23\1\36\1\123\1\23\1\226\1\23\1\43\1\227"+
    "\1\35\1\36\2\23\1\7\1\24\3\7\1\42\2\23\1\0\1\43\1\230\1\0\1\231\1\23\1\232"+
    "\1\34\1\145\1\233\1\25\1\234\1\7\1\235\1\236\1\237\2\23\5\7\1\123\116\23\5"+
    "\7\1\20\5\7\1\20\20\7\1\24\1\240\1\241\1\23\4\7\1\32\1\16\7\7\1\36\1\23\1"+
    "\55\2\7\1\20\1\23\10\20\4\0\5\23\1\36\72\23\1\236\3\23\1\6\1\176\1\233\1\24"+
    "\1\6\11\7\1\20\1\242\1\6\12\7\1\200\1\236\4\7\1\212\1\6\12\7\1\20\2\23\3\7"+
    "\1\42\6\23\170\7\1\212\11\23\71\7\1\24\6\23\21\7\1\24\10\23\5\7\1\212\41\7"+
    "\1\24\2\7\1\0\1\241\2\23\5\7\1\153\1\71\1\243\3\7\1\55\12\7\1\5\3\23\1\36"+
    "\1\7\1\34\14\7\1\244\1\107\1\23\1\7\1\42\11\23\1\7\1\245\1\246\2\7\1\46\2"+
    "\23\1\123\6\7\1\107\1\23\1\62\5\7\1\205\1\0\1\43\1\23\1\0\1\5\2\0\1\62\1\44"+
    "\1\0\1\62\2\7\1\60\1\163\2\7\1\153\1\0\1\2\1\23\3\7\1\24\1\73\5\7\1\46\1\0"+
    "\1\231\1\36\1\0\1\5\4\23\5\7\1\75\1\72\1\23\1\246\1\247\1\0\1\5\2\7\1\20\1"+
    "\250\6\7\1\173\1\251\1\211\2\23\1\252\1\7\1\46\1\253\1\23\3\254\1\23\2\20"+
    "\22\23\4\7\1\46\1\255\1\0\1\5\64\7\1\107\1\23\2\7\1\20\1\256\5\7\1\107\40"+
    "\23\55\7\1\212\15\7\1\22\4\23\1\20\1\23\1\256\1\257\1\7\1\70\1\20\1\162\1"+
    "\260\15\7\1\22\3\23\1\256\54\7\1\212\2\23\10\7\1\34\6\7\5\23\1\7\1\24\2\0"+
    "\2\23\1\72\1\23\1\130\2\23\1\236\3\23\1\35\1\26\20\7\1\261\1\226\1\23\1\0"+
    "\1\5\1\6\2\7\1\110\1\6\2\7\1\42\1\262\12\7\1\20\3\34\1\263\1\264\2\23\1\265"+
    "\1\7\1\135\2\7\1\20\2\7\1\266\1\7\1\212\1\7\1\212\4\23\17\7\1\42\10\23\6\7"+
    "\1\24\20\23\1\4\20\23\3\7\1\24\6\7\1\123\5\23\3\7\1\20\2\23\3\7\1\42\6\23"+
    "\3\7\1\212\4\7\1\107\1\7\1\233\5\23\23\7\1\212\1\0\1\5\52\23\1\212\1\70\4"+
    "\7\1\32\1\267\2\7\1\212\25\23\2\7\1\212\1\23\3\7\1\22\10\23\7\7\1\262\10\23"+
    "\1\270\1\71\1\135\1\6\2\7\1\107\1\113\4\23\3\7\1\24\20\23\6\7\1\212\1\23\2"+
    "\7\1\212\1\23\2\7\1\42\21\23\11\7\1\123\66\23\1\215\6\7\1\0\1\72\3\23\1\117"+
    "\1\0\2\23\1\215\5\7\1\0\1\271\2\23\3\7\1\123\1\0\1\5\1\215\3\7\1\153\1\0\1"+
    "\137\1\0\10\23\1\215\5\7\1\46\1\0\1\272\1\23\1\0\1\5\24\23\5\7\1\46\1\0\1"+
    "\23\1\0\1\5\46\23\55\7\1\20\22\23\14\7\1\42\63\23\5\7\1\20\72\23\7\7\1\123"+
    "\130\23\10\7\1\24\1\23\1\75\4\0\1\72\1\23\1\55\1\215\1\7\14\23\1\22\153\23"+
    "\1\273\1\274\2\0\1\275\1\2\3\23\1\276\22\23\1\277\67\23\12\7\1\26\10\7\1\26"+
    "\1\300\1\301\1\7\1\302\1\135\7\7\1\32\1\303\2\26\3\7\1\304\1\162\1\34\1\70"+
    "\51\7\1\212\3\7\1\70\2\7\1\200\3\7\1\200\2\7\1\26\3\7\1\26\2\7\1\20\3\7\1"+
    "\20\3\7\1\70\3\7\1\70\2\7\1\200\1\305\6\0\1\135\3\7\1\154\1\6\1\200\1\306"+
    "\1\232\1\307\1\154\1\222\1\154\2\200\1\116\1\7\1\31\1\7\1\107\1\310\1\31\1"+
    "\7\1\107\50\23\32\7\1\20\5\23\106\7\1\24\1\23\33\7\1\212\74\23\1\115\3\23"+
    "\14\0\20\23\36\0\2\23");

  /* The ZZ_CMAP_A table has 1608 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\10\5\0\6\10\10\0\1\1\10\0\1\10\2\0\2\10\7\0\22\11\1\2\1\0\1\3\1\0\1\11"+
    "\1\0\3\11\1\4\1\5\1\6\7\11\1\7\4\11\4\0\1\10\2\0\4\11\4\0\1\11\2\0\1\10\7"+
    "\0\1\11\4\0\1\11\5\0\7\11\1\0\2\11\4\0\4\11\16\0\5\11\7\0\1\11\1\0\1\11\1"+
    "\0\5\11\1\0\2\11\6\0\1\11\1\0\3\11\1\0\1\11\1\0\4\11\1\0\13\11\1\0\3\11\1"+
    "\0\5\10\2\0\6\11\1\0\1\11\15\0\1\11\1\0\15\10\1\0\1\10\1\0\2\10\1\0\2\10\1"+
    "\0\1\10\3\11\5\0\5\10\6\0\1\11\4\0\3\10\5\0\3\11\7\10\4\0\2\11\1\10\13\11"+
    "\1\0\1\11\7\10\2\11\2\10\1\0\4\10\2\11\2\10\3\11\2\0\1\11\7\0\1\10\1\11\1"+
    "\10\6\11\3\10\2\0\11\11\3\10\1\11\6\0\2\10\6\11\4\10\2\11\2\0\2\10\1\11\11"+
    "\10\1\11\3\10\1\11\5\10\2\0\1\11\3\10\4\0\1\11\1\0\6\11\4\0\13\10\1\0\4\10"+
    "\6\11\3\10\1\11\2\10\1\11\7\10\2\11\2\10\2\0\2\10\1\0\3\10\1\0\10\11\2\0\2"+
    "\11\2\0\6\11\1\0\1\11\3\0\4\11\2\0\1\10\1\11\7\10\2\0\2\10\2\0\3\10\1\11\5"+
    "\0\2\11\1\0\5\11\4\0\3\11\4\0\2\11\1\0\2\11\1\0\2\11\1\0\2\11\2\0\1\10\1\0"+
    "\5\10\4\0\2\10\2\0\3\10\3\0\1\10\7\0\4\11\1\0\1\11\7\0\4\10\3\11\1\10\2\0"+
    "\1\11\1\0\2\11\1\0\3\11\2\10\1\0\3\10\2\0\1\11\11\0\1\10\1\11\1\0\6\11\3\0"+
    "\3\11\1\0\4\11\3\0\2\11\1\0\1\11\1\0\2\11\3\0\2\11\3\0\2\11\4\0\5\10\3\0\3"+
    "\10\1\0\4\10\2\0\1\11\6\0\1\10\4\11\1\0\5\11\3\0\1\11\7\10\1\0\2\10\5\0\2"+
    "\10\3\0\2\10\1\0\3\11\1\0\2\11\5\0\3\11\2\0\1\11\3\10\1\0\4\10\1\11\1\0\4"+
    "\11\1\0\1\11\4\0\1\10\4\0\6\10\1\0\1\10\3\0\2\10\4\0\1\11\1\10\2\11\7\10\4"+
    "\0\10\11\1\10\1\0\2\11\1\0\1\11\2\0\2\11\1\0\1\11\2\0\1\11\6\0\4\11\1\0\3"+
    "\11\1\0\1\11\1\0\1\11\2\0\2\11\1\0\3\11\2\10\1\0\2\10\1\11\2\0\5\11\1\0\1"+
    "\11\1\0\6\10\2\0\2\10\2\0\4\11\5\0\1\10\1\0\1\10\1\0\1\10\4\0\2\10\5\11\3"+
    "\10\6\0\1\10\1\0\7\10\1\11\2\10\4\11\3\10\1\11\3\10\2\11\7\10\3\11\4\10\5"+
    "\11\14\10\1\11\1\10\3\11\1\0\7\11\2\0\3\10\2\11\3\10\3\0\2\11\2\10\4\0\1\11"+
    "\1\0\2\10\4\0\4\11\10\10\3\0\1\11\3\0\2\11\1\10\5\0\3\10\2\0\1\11\1\10\1\11"+
    "\5\0\6\11\2\0\5\10\3\11\3\0\10\10\5\11\2\10\3\0\3\11\3\10\1\0\5\10\4\11\1"+
    "\10\4\11\3\10\2\11\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\2\0\3\11\1\0\6\11\2"+
    "\0\2\11\2\0\5\10\5\0\1\11\5\0\6\10\1\0\1\10\3\0\4\10\11\0\1\11\4\0\1\11\1"+
    "\0\5\11\2\0\1\11\1\0\4\11\1\0\3\11\2\0\4\11\5\0\5\11\4\0\1\11\4\0\4\11\3\10"+
    "\2\11\5\0\2\10\2\0\3\11\6\10\1\0\2\11\2\0\4\11\1\0\2\11\1\10\3\11\1\10\4\11"+
    "\1\10\10\11\2\10\4\0\1\11\1\10\4\0\1\10\5\11\2\10\3\0\3\11\4\0\3\11\2\10\2"+
    "\0\6\11\1\0\3\10\1\0\2\10\5\0\5\11\5\0\1\11\1\10\3\11\1\0\2\11\1\0\7\11\2"+
    "\0\1\10\6\0\2\11\2\0\3\11\3\0\2\11\3\0\2\11\2\0\3\10\4\0\3\11\1\0\2\11\1\0"+
    "\2\11\3\0\1\11\2\0\2\11\3\10\1\0\2\10\1\0\3\10\2\0\1\10\2\0\1\10\4\11\10\0"+
    "\5\10\3\0\6\10\2\0\3\10\2\0\4\10\4\0\3\10\5\0\1\11\2\0\2\11\2\0\4\11\1\0\4"+
    "\11\1\0\1\11\1\0\6\11\2\0\5\11\1\0\4\11\1\0\4\11\2\0\2\10\1\0\1\11\1\0\1\11"+
    "\5\0\1\11\1\0\1\11\1\0\3\11\1\0\3\11\1\0\3\11");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\2\1\1\4\1\5\2\0"+
    "\1\6\1\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[13];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\12\0\24\0\12\0\12\0\36\0\50\0\62"+
    "\0\12\0\74\0\106\0\12\0\12";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[13];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\4\2\13\0"+
    "\1\10\2\11\4\10\1\0\1\10\5\0\1\12\13\0"+
    "\1\13\3\0\1\10\2\0\6\10\6\0\1\14\7\0"+
    "\1\15\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[80];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\3\1\1\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[13];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ItrulesLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ItrulesTypes.TEXT;
            } 
            // fall through
          case 8: break;
          case 2: 
            { return ItrulesTypes.LEFT_SQUARE;
            } 
            // fall through
          case 9: break;
          case 3: 
            { return ItrulesTypes.RIGHT_SQUARE;
            } 
            // fall through
          case 10: break;
          case 4: 
            { return ItrulesTypes.MARK;
            } 
            // fall through
          case 11: break;
          case 5: 
            { return ItrulesTypes.SCAPED_CHAR;
            } 
            // fall through
          case 12: break;
          case 6: 
            { return ItrulesTypes.DEFRULE;
            } 
            // fall through
          case 13: break;
          case 7: 
            { return ItrulesTypes.ENDRULE;
            } 
            // fall through
          case 14: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
