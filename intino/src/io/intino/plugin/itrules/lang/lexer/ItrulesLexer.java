// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: itrules.flex

package io.intino.plugin.itrules.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import io.intino.plugin.itrules.lang.psi.ItrulesTypes;


class ItrulesLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int HEADER = 2;
  public static final int BODY = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\2\16\0\10\1\1\3"+
    "\2\1\1\4\3\1\1\5\1\1\1\0\1\6\1\1"+
    "\12\0\2\1\1\7\1\1\1\10\2\1\32\11\1\12"+
    "\1\1\1\13\1\1\1\11\1\1\1\14\2\11\1\15"+
    "\1\16\1\17\7\11\1\20\1\21\2\11\1\22\1\11"+
    "\1\23\6\11\1\1\1\24\1\1\1\25\41\0\2\1"+
    "\4\11\4\1\1\11\2\1\1\0\7\1\1\11\4\1"+
    "\1\11\5\1\27\11\1\1\37\11\1\1\u01ca\11\4\1"+
    "\14\11\16\1\5\11\7\1\1\11\1\1\1\11\21\1"+
    "\160\0\5\11\1\1\2\11\2\1\4\11\1\1\1\11"+
    "\6\1\1\11\1\1\3\11\1\1\1\11\1\1\24\11"+
    "\1\1\123\11\1\1\213\11\1\1\5\0\2\1\246\11"+
    "\1\1\46\11\2\1\1\11\6\1\51\11\6\1\1\11"+
    "\1\1\55\0\1\1\1\0\1\1\2\0\1\1\2\0"+
    "\1\1\1\0\10\1\33\11\4\1\4\11\15\1\6\0"+
    "\5\1\1\11\4\1\13\0\1\1\1\0\3\1\53\11"+
    "\37\0\4\1\2\11\1\0\143\11\1\1\1\11\10\0"+
    "\1\1\6\0\2\11\2\0\1\1\4\0\2\11\12\0"+
    "\3\11\2\1\1\11\17\1\1\0\1\11\1\0\36\11"+
    "\33\0\2\1\131\11\13\0\1\11\16\1\12\0\41\11"+
    "\11\0\2\11\4\1\1\11\2\1\1\0\30\11\4\0"+
    "\1\11\11\0\1\11\3\0\1\11\5\0\22\1\31\11"+
    "\3\0\4\1\13\11\65\1\25\11\1\1\22\11\13\1"+
    "\61\0\66\11\3\0\1\11\22\0\1\11\7\0\12\11"+
    "\2\0\2\1\12\0\1\1\20\11\3\0\1\1\10\11"+
    "\2\1\2\11\2\1\26\11\1\1\7\11\1\1\1\11"+
    "\3\1\4\11\2\1\1\0\1\11\7\0\2\1\2\0"+
    "\2\1\3\0\1\11\10\1\1\0\4\1\2\11\1\1"+
    "\3\11\2\0\2\1\12\0\4\11\7\1\2\11\1\1"+
    "\1\0\2\1\3\0\1\1\6\11\4\1\2\11\2\1"+
    "\26\11\1\1\7\11\1\1\2\11\1\1\2\11\1\1"+
    "\2\11\2\1\1\0\1\1\5\0\4\1\2\0\2\1"+
    "\3\0\3\1\1\0\7\1\4\11\1\1\1\11\7\1"+
    "\14\0\3\11\1\0\13\1\3\0\1\1\11\11\1\1"+
    "\3\11\1\1\26\11\1\1\7\11\1\1\2\11\1\1"+
    "\5\11\2\1\1\0\1\11\10\0\1\1\3\0\1\1"+
    "\3\0\2\1\1\11\17\1\2\11\2\0\2\1\12\0"+
    "\1\1\1\11\7\1\1\11\6\0\1\1\3\0\1\1"+
    "\10\11\2\1\2\11\2\1\26\11\1\1\7\11\1\1"+
    "\2\11\1\1\5\11\2\1\1\0\1\11\7\0\2\1"+
    "\2\0\2\1\3\0\7\1\3\0\4\1\2\11\1\1"+
    "\3\11\2\0\2\1\12\0\1\1\1\11\20\1\1\0"+
    "\1\11\1\1\6\11\3\1\3\11\1\1\4\11\3\1"+
    "\2\11\1\1\1\11\1\1\2\11\3\1\2\11\3\1"+
    "\3\11\3\1\14\11\4\1\5\0\3\1\3\0\1\1"+
    "\4\0\2\1\1\11\6\1\1\0\16\1\12\0\11\1"+
    "\1\11\6\1\5\0\10\11\1\1\3\11\1\1\27\11"+
    "\1\1\20\11\3\1\1\11\7\0\1\1\3\0\1\1"+
    "\4\0\7\1\2\0\1\1\3\11\5\1\2\11\2\0"+
    "\2\1\12\0\20\1\1\11\3\0\1\1\10\11\1\1"+
    "\3\11\1\1\27\11\1\1\12\11\1\1\5\11\2\1"+
    "\1\0\1\11\7\0\1\1\3\0\1\1\4\0\7\1"+
    "\2\0\7\1\1\11\1\1\2\11\2\0\2\1\12\0"+
    "\1\1\2\11\15\1\4\0\11\11\1\1\3\11\1\1"+
    "\51\11\2\0\1\11\7\0\1\1\3\0\1\1\4\0"+
    "\1\11\5\1\3\11\1\0\7\1\3\11\2\0\2\1"+
    "\12\0\12\1\6\11\1\1\3\0\1\1\22\11\3\1"+
    "\30\11\1\1\11\11\1\1\1\11\2\1\7\11\3\1"+
    "\1\0\4\1\6\0\1\1\1\0\1\1\10\0\6\1"+
    "\12\0\2\1\2\0\15\1\60\11\1\0\2\11\7\0"+
    "\4\1\10\11\10\0\1\1\12\0\47\1\2\11\1\1"+
    "\1\11\1\1\5\11\1\1\30\11\1\1\1\11\1\1"+
    "\12\11\1\0\2\11\11\0\1\11\2\1\5\11\1\1"+
    "\1\11\1\1\6\0\2\1\12\0\2\1\4\11\40\1"+
    "\1\11\27\1\2\0\6\1\12\0\13\1\1\0\1\1"+
    "\1\0\1\1\1\0\4\1\2\0\10\11\1\1\44\11"+
    "\4\1\24\0\1\1\2\0\5\11\13\0\1\1\44\0"+
    "\11\1\1\0\71\1\53\11\24\0\1\11\12\0\6\1"+
    "\6\11\4\0\4\11\3\0\1\11\3\0\2\11\7\0"+
    "\3\11\4\0\15\11\14\0\1\11\17\0\2\1\46\11"+
    "\1\1\1\11\5\1\1\11\2\1\53\11\1\1\115\11"+
    "\1\1\4\11\2\1\7\11\1\1\1\11\1\1\4\11"+
    "\2\1\51\11\1\1\4\11\2\1\41\11\1\1\4\11"+
    "\2\1\7\11\1\1\1\11\1\1\4\11\2\1\17\11"+
    "\1\1\71\11\1\1\4\11\2\1\103\11\2\1\3\0"+
    "\40\1\20\11\20\1\126\11\2\1\6\11\3\1\u016c\11"+
    "\2\1\21\11\1\1\32\11\5\1\113\11\3\1\13\11"+
    "\7\1\15\11\1\1\4\11\3\0\13\1\22\11\3\0"+
    "\13\1\22\11\2\0\14\1\15\11\1\1\3\11\1\1"+
    "\2\0\14\1\64\11\40\0\3\1\1\11\3\1\2\11"+
    "\1\0\2\1\12\0\41\1\4\0\1\1\12\0\6\1"+
    "\131\11\7\1\5\11\2\0\42\11\1\0\1\11\5\1"+
    "\106\11\12\1\37\11\1\1\14\0\4\1\14\0\12\1"+
    "\12\0\36\11\2\1\5\11\13\1\54\11\4\1\32\11"+
    "\6\1\12\0\46\1\27\11\5\0\4\1\65\11\12\0"+
    "\1\1\35\0\2\1\13\0\6\1\12\0\15\1\1\11"+
    "\10\1\16\0\1\1\2\0\77\1\5\0\57\11\21\0"+
    "\7\11\4\1\12\0\21\1\11\0\14\1\3\0\36\11"+
    "\15\0\2\11\12\0\54\11\16\0\14\1\44\11\24\0"+
    "\10\1\12\0\3\1\3\11\12\0\44\11\2\1\11\11"+
    "\7\1\53\11\2\1\3\11\20\1\3\0\1\1\25\0"+
    "\4\11\1\0\6\11\1\0\2\11\3\0\1\11\5\1"+
    "\300\11\72\0\1\1\5\0\26\11\2\1\6\11\2\1"+
    "\46\11\2\1\6\11\2\1\10\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\37\11\2\1\65\11\1\1"+
    "\7\11\1\1\1\11\3\1\3\11\1\1\7\11\3\1"+
    "\4\11\2\1\6\11\4\1\15\11\5\1\3\11\1\1"+
    "\7\11\16\1\5\0\32\1\5\0\20\1\2\11\23\1"+
    "\1\11\13\1\5\0\1\1\12\0\1\1\1\11\15\1"+
    "\1\11\20\1\15\11\3\1\40\11\20\1\15\0\4\1"+
    "\1\0\3\1\14\0\21\1\1\11\4\1\1\11\2\1"+
    "\12\11\1\1\1\11\3\1\5\11\6\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\4\11\1\1\13\11\2\1"+
    "\4\11\5\1\5\11\4\1\1\11\21\1\51\11\u0177\1"+
    "\57\11\1\1\57\11\1\1\205\11\6\1\4\11\3\0"+
    "\2\11\14\1\46\11\1\1\1\11\5\1\1\11\2\1"+
    "\70\11\7\1\1\11\17\1\1\0\27\11\11\1\7\11"+
    "\1\1\7\11\1\1\7\11\1\1\7\11\1\1\7\11"+
    "\1\1\7\11\1\1\7\11\1\1\7\11\1\1\40\0"+
    "\57\1\1\11\325\1\3\11\31\1\11\11\6\0\1\1"+
    "\5\11\2\1\5\11\4\1\126\11\2\1\2\0\2\1"+
    "\3\11\1\1\132\11\1\1\4\11\5\1\53\11\1\1"+
    "\136\11\21\1\40\11\60\1\320\11\100\1\375\11\3\1"+
    "\215\11\103\1\56\11\2\1\15\11\3\1\20\11\12\0"+
    "\2\11\24\1\57\11\1\0\4\1\12\0\1\1\37\11"+
    "\2\0\120\11\2\0\45\1\11\11\2\1\147\11\2\1"+
    "\65\11\2\1\11\11\52\1\15\11\1\0\3\11\1\0"+
    "\4\11\1\0\27\11\5\0\4\1\1\0\13\1\1\11"+
    "\7\1\64\11\14\1\2\0\62\11\22\0\12\1\12\0"+
    "\6\1\22\0\6\11\3\1\1\11\1\1\2\11\13\0"+
    "\34\11\10\0\2\1\27\11\15\0\14\1\35\11\3\1"+
    "\4\0\57\11\16\0\16\1\1\11\12\0\6\1\5\11"+
    "\1\0\12\11\12\0\5\11\1\1\51\11\16\0\11\1"+
    "\3\11\1\0\10\11\2\0\2\1\12\0\6\1\27\11"+
    "\3\1\1\11\3\0\62\11\1\0\1\11\3\0\2\11"+
    "\2\0\5\11\2\0\1\11\1\0\1\11\30\1\3\11"+
    "\2\1\13\11\5\0\2\1\3\11\2\0\12\1\6\11"+
    "\2\1\6\11\2\1\6\11\11\1\7\11\1\1\7\11"+
    "\1\1\53\11\1\1\16\11\6\1\163\11\10\0\1\1"+
    "\2\0\2\1\12\0\6\1\244\11\14\1\27\11\4\1"+
    "\61\11\u0104\1\156\11\2\1\152\11\46\1\7\11\14\1"+
    "\5\11\5\1\1\11\1\0\12\11\1\1\15\11\1\1"+
    "\5\11\1\1\1\11\1\1\2\11\1\1\2\11\1\1"+
    "\154\11\41\1\153\11\22\1\100\11\2\1\66\11\50\1"+
    "\15\11\3\1\20\0\20\1\20\0\3\1\2\11\30\1"+
    "\3\11\31\1\1\11\6\1\5\11\1\1\207\11\2\1"+
    "\1\0\4\1\1\11\13\1\12\0\7\1\32\11\4\1"+
    "\1\11\1\1\32\11\13\1\131\11\3\1\6\11\2\1"+
    "\6\11\2\1\6\11\2\1\3\11\3\1\2\11\3\1"+
    "\2\11\22\1\3\0\4\1\14\11\1\1\32\11\1\1"+
    "\23\11\1\1\2\11\1\1\17\11\2\1\16\11\42\1"+
    "\173\11\105\1\65\11\210\1\1\0\202\1\35\11\3\1"+
    "\61\11\17\1\1\0\37\1\40\11\15\1\36\11\5\1"+
    "\46\11\5\0\5\1\36\11\2\1\44\11\4\1\10\11"+
    "\1\1\5\11\52\1\236\11\2\1\12\0\6\1\44\11"+
    "\4\1\44\11\4\1\50\11\10\1\64\11\234\1\67\11"+
    "\11\1\26\11\12\1\10\11\230\1\6\11\2\1\1\11"+
    "\1\1\54\11\1\1\2\11\3\1\1\11\2\1\27\11"+
    "\12\1\27\11\11\1\37\11\101\1\23\11\1\1\2\11"+
    "\12\1\26\11\12\1\32\11\106\1\70\11\6\1\2\11"+
    "\100\1\1\11\3\0\1\1\2\0\5\1\4\0\4\11"+
    "\1\1\3\11\1\1\35\11\2\1\3\0\4\1\1\0"+
    "\40\1\35\11\3\1\35\11\43\1\10\11\1\1\34\11"+
    "\2\0\31\1\66\11\12\1\26\11\12\1\23\11\15\1"+
    "\22\11\156\1\111\11\67\1\63\11\15\1\63\11\15\1"+
    "\44\11\4\0\10\1\12\0\u0146\1\52\11\1\1\2\0"+
    "\3\1\2\11\116\1\35\11\12\1\1\11\10\1\26\11"+
    "\13\0\137\1\25\11\33\1\27\11\11\1\3\0\65\11"+
    "\17\0\37\1\12\0\17\1\4\0\55\11\13\0\2\1"+
    "\1\0\17\1\1\0\2\1\31\11\7\1\12\0\6\1"+
    "\3\0\44\11\16\0\1\1\12\0\4\1\1\11\2\0"+
    "\1\11\10\1\43\11\1\0\2\1\1\11\11\1\3\0"+
    "\60\11\16\0\4\11\4\1\4\0\1\1\14\0\1\11"+
    "\1\1\1\11\43\1\22\11\1\1\31\11\14\0\6\1"+
    "\1\0\101\1\7\11\1\1\1\11\1\1\4\11\1\1"+
    "\17\11\1\1\12\11\7\1\57\11\14\0\5\1\12\0"+
    "\6\1\4\0\1\1\10\11\2\1\2\11\2\1\26\11"+
    "\1\1\7\11\1\1\2\11\1\1\5\11\1\1\2\0"+
    "\1\11\7\0\2\1\2\0\2\1\3\0\2\1\1\11"+
    "\6\1\1\0\5\1\5\11\2\0\2\1\7\0\3\1"+
    "\5\0\213\1\65\11\22\0\4\11\5\1\12\0\4\1"+
    "\1\0\3\11\36\1\60\11\24\0\2\11\1\1\1\11"+
    "\10\1\12\0\246\1\57\11\7\0\2\1\11\0\27\1"+
    "\4\11\2\0\42\1\60\11\21\0\3\1\1\11\13\1"+
    "\12\0\46\1\53\11\15\0\1\11\7\1\12\0\66\1"+
    "\33\11\2\1\17\0\4\1\12\0\306\1\54\11\17\0"+
    "\145\1\100\11\12\0\25\1\10\11\2\1\1\11\2\1"+
    "\10\11\1\1\2\11\1\1\30\11\6\0\1\1\2\0"+
    "\2\1\4\0\1\11\1\0\1\11\2\0\14\1\12\0"+
    "\106\1\10\11\2\1\47\11\7\0\2\1\7\0\1\11"+
    "\1\1\1\11\1\0\33\1\1\11\12\0\50\11\7\0"+
    "\1\11\4\0\10\1\1\0\10\1\1\11\13\0\56\11"+
    "\20\0\3\1\1\11\42\1\71\11\7\1\11\11\1\1"+
    "\45\11\10\0\1\1\10\0\1\11\17\1\12\0\30\1"+
    "\36\11\2\1\26\0\1\1\16\0\111\1\7\11\1\1"+
    "\2\11\1\1\46\11\6\0\3\1\1\0\1\1\2\0"+
    "\1\1\7\0\1\11\1\0\10\1\12\0\6\1\6\11"+
    "\1\1\2\11\1\1\40\11\5\0\1\1\2\0\1\1"+
    "\5\0\1\11\7\1\12\0\u0136\1\23\11\4\0\271\1"+
    "\1\11\54\1\4\11\37\1\232\11\146\1\157\11\21\1"+
    "\304\11\274\1\57\11\1\1\11\0\307\1\107\11\271\1"+
    "\71\11\7\1\37\11\1\1\12\0\146\1\36\11\2\1"+
    "\5\0\13\1\60\11\7\0\11\1\4\11\14\1\12\0"+
    "\11\1\25\11\5\1\23\11\260\1\100\11\200\1\113\11"+
    "\4\1\1\0\1\11\67\0\7\1\4\0\15\11\100\1"+
    "\2\11\1\1\1\11\1\0\13\1\2\0\16\1\370\11"+
    "\10\1\326\11\52\1\11\11\367\1\37\11\61\1\3\11"+
    "\21\1\4\11\10\1\u018c\11\4\1\153\11\5\1\15\11"+
    "\3\1\11\11\7\1\12\11\3\1\2\0\1\1\4\0"+
    "\301\1\5\0\3\1\26\0\2\1\7\0\36\1\4\0"+
    "\224\1\3\0\273\1\125\11\1\1\107\11\1\1\2\11"+
    "\2\1\1\11\2\1\2\11\2\1\4\11\1\1\14\11"+
    "\1\1\1\11\1\1\7\11\1\1\101\11\1\1\4\11"+
    "\2\1\10\11\1\1\7\11\1\1\34\11\1\1\4\11"+
    "\1\1\5\11\1\1\1\11\3\1\7\11\1\1\u0154\11"+
    "\2\1\31\11\1\1\31\11\1\1\37\11\1\1\31\11"+
    "\1\1\37\11\1\1\31\11\1\1\37\11\1\1\31\11"+
    "\1\1\37\11\1\1\31\11\1\1\10\11\2\1\151\0"+
    "\4\1\62\0\10\1\1\0\16\1\1\0\26\1\5\0"+
    "\1\1\17\0\120\1\7\0\1\1\21\0\2\1\7\0"+
    "\1\1\2\0\1\1\5\0\325\1\55\11\3\1\7\0"+
    "\7\11\2\1\12\0\4\1\1\11\u0171\1\54\11\16\0"+
    "\5\1\306\11\13\1\7\0\51\1\104\11\7\0\1\11"+
    "\4\1\12\0\u0156\1\1\11\117\1\4\11\1\1\33\11"+
    "\1\1\2\11\1\1\1\11\2\1\1\11\1\1\12\11"+
    "\1\1\4\11\1\1\1\11\1\1\1\11\6\1\1\11"+
    "\4\1\1\11\1\1\1\11\1\1\1\11\1\1\3\11"+
    "\1\1\2\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\2\11"+
    "\1\1\1\11\2\1\4\11\1\1\7\11\1\1\4\11"+
    "\1\1\4\11\1\1\1\11\1\1\12\11\1\1\21\11"+
    "\5\1\3\11\1\1\5\11\1\1\21\11\u0134\1\12\0"+
    "\6\1\336\11\42\1\65\11\13\1\336\11\2\1\u0182\11"+
    "\16\1\u0131\11\37\1\36\11\342\1\113\11\266\1\1\0"+
    "\36\1\140\0\200\1\360\0\20\1";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\14\1\3\0\1\3\3\0\1\4"+
    "\3\0\1\5\1\0\1\6\1\7\1\0\1\10\1\11"+
    "\1\12\3\0\1\13\1\1\2\0\1\14\4\0\1\1"+
    "\2\0\1\15\3\0\1\1\4\0\1\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[62];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\26\0\54\0\102\0\130\0\102\0\156\0\204"+
    "\0\232\0\260\0\306\0\334\0\362\0\u0108\0\u011e\0\u0134"+
    "\0\u014a\0\u0160\0\u0176\0\u018c\0\u01a2\0\102\0\260\0\362"+
    "\0\u01b8\0\u01ce\0\u01e4\0\u01fa\0\u0210\0\u0226\0\u023c\0\260"+
    "\0\260\0\u0252\0\102\0\102\0\102\0\u0268\0\u027e\0\u0294"+
    "\0\260\0\u02aa\0\u02c0\0\u02d6\0\260\0\u02ec\0\u0302\0\u0318"+
    "\0\u032e\0\u0344\0\u035a\0\u0370\0\u035a\0\u0386\0\u039c\0\u03b2"+
    "\0\u03c8\0\u03de\0\u03f4\0\u040a\0\u0420\0\u040a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[62];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\15\4\1\5\12\4\1\6\11\4\1\7\3\4\1\10"+
    "\1\11\2\4\1\6\1\4\2\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\13\12\1\13\1\22\44\0"+
    "\1\23\27\0\1\24\26\0\1\25\26\0\1\26\3\0"+
    "\4\27\1\30\25\27\1\30\11\27\1\31\12\27\1\32"+
    "\1\30\2\27\1\33\1\34\1\32\2\27\10\32\4\27"+
    "\2\35\1\30\2\27\1\35\21\27\1\36\1\30\4\27"+
    "\1\36\2\27\10\36\6\27\1\30\1\27\1\37\23\27"+
    "\1\30\2\27\1\40\22\27\1\30\3\27\1\41\21\27"+
    "\1\30\11\27\1\42\7\27\17\0\1\43\23\0\1\44"+
    "\33\0\1\45\2\0\4\27\1\30\13\27\1\46\5\27"+
    "\1\32\2\27\1\32\1\30\4\27\1\32\2\27\10\32"+
    "\5\27\1\47\1\30\1\27\1\50\1\51\1\27\1\47"+
    "\2\27\10\47\6\27\1\30\3\27\1\51\21\27\1\52"+
    "\21\27\1\36\2\27\1\36\1\30\4\27\1\36\2\27"+
    "\10\36\6\27\1\30\1\27\1\53\23\27\1\30\13\27"+
    "\1\54\11\27\1\30\10\27\1\55\10\27\1\47\2\27"+
    "\1\47\1\30\1\27\1\50\1\27\1\56\1\47\2\27"+
    "\10\47\5\27\1\47\1\30\1\27\1\50\1\27\1\56"+
    "\1\47\2\27\10\47\2\27\2\0\2\57\1\60\2\0"+
    "\1\57\16\0\4\27\1\30\5\27\1\61\17\27\1\30"+
    "\10\27\1\12\13\27\1\32\1\30\4\27\1\32\2\27"+
    "\10\32\2\27\4\0\1\62\23\0\2\57\3\0\1\57"+
    "\16\0\4\63\1\64\6\63\1\65\12\63\4\0\1\60"+
    "\21\0\4\63\1\64\21\63\2\27\2\35\1\30\2\27"+
    "\1\35\3\27\1\66\16\27\1\67\21\27\2\63\2\70"+
    "\1\64\2\63\1\70\3\63\1\65\16\63\1\71\21\63"+
    "\2\0\2\57\1\60\2\0\1\57\3\0\1\72\16\0"+
    "\1\73\21\0\4\74\1\75\6\74\1\76\16\74\1\75"+
    "\21\74\13\0\1\72\12\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1078];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\14\1\3\0\1\11\3\0"+
    "\1\1\3\0\1\1\1\0\2\1\1\0\3\11\3\0"+
    "\2\1\2\0\1\1\4\0\1\1\2\0\1\1\3\0"+
    "\1\1\4\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[62];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ItrulesLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ItrulesTypes.TEXT;
            }
          // fall through
          case 14: break;
          case 2:
            { yybegin(BODY); return ItrulesTypes.TEXT;
            }
          // fall through
          case 15: break;
          case 3:
            { return ItrulesTypes.OR;
            }
          // fall through
          case 16: break;
          case 4:
            { return ItrulesTypes.PLACEHOLDER;
            }
          // fall through
          case 17: break;
          case 5:
            { return ItrulesTypes.FORMATTER;
            }
          // fall through
          case 18: break;
          case 6:
            { return ItrulesTypes.LEFT_EXPR;
            }
          // fall through
          case 19: break;
          case 7:
            { return ItrulesTypes.RIGHT_EXPR;
            }
          // fall through
          case 20: break;
          case 8:
            { yybegin(HEADER); return ItrulesTypes.DEFRULE;
            }
          // fall through
          case 21: break;
          case 9:
            { return ItrulesTypes.AND;
            }
          // fall through
          case 22: break;
          case 10:
            { return ItrulesTypes.NOT;
            }
          // fall through
          case 23: break;
          case 11:
            { return ItrulesTypes.SCAPED_CHAR;
            }
          // fall through
          case 24: break;
          case 12:
            { yybegin(YYINITIAL); return ItrulesTypes.ENDRULE;
            }
          // fall through
          case 25: break;
          case 13:
            { return ItrulesTypes.MULTIPLE;
            }
          // fall through
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
