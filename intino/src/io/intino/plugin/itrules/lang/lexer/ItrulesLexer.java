// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: itrules.flex

package io.intino.plugin.itrules.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import io.intino.plugin.itrules.lang.psi.ItrulesTypes;


class ItrulesLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int HEADER = 2;
  public static final int BODY = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\16\0\10\1\1\4"+
    "\2\1\1\5\3\1\1\6\1\1\1\0\1\7\1\1"+
    "\12\0\2\1\1\10\1\1\1\11\2\1\32\12\1\13"+
    "\1\1\1\14\1\1\1\12\1\1\1\15\2\12\1\16"+
    "\1\17\6\12\1\20\1\12\1\21\1\22\2\12\1\23"+
    "\1\12\1\24\1\25\5\12\1\1\1\3\2\1\41\0"+
    "\2\1\4\12\4\1\1\12\2\1\1\0\7\1\1\12"+
    "\4\1\1\12\5\1\27\12\1\1\37\12\1\1\u01ca\12"+
    "\4\1\14\12\16\1\5\12\7\1\1\12\1\1\1\12"+
    "\21\1\160\0\5\12\1\1\2\12\2\1\4\12\1\1"+
    "\1\12\6\1\1\12\1\1\3\12\1\1\1\12\1\1"+
    "\24\12\1\1\123\12\1\1\213\12\1\1\5\0\2\1"+
    "\246\12\1\1\46\12\2\1\1\12\6\1\51\12\6\1"+
    "\1\12\1\1\55\0\1\1\1\0\1\1\2\0\1\1"+
    "\2\0\1\1\1\0\10\1\33\12\4\1\4\12\15\1"+
    "\6\0\5\1\1\12\4\1\13\0\1\1\1\0\3\1"+
    "\53\12\37\0\4\1\2\12\1\0\143\12\1\1\1\12"+
    "\10\0\1\1\6\0\2\12\2\0\1\1\4\0\2\12"+
    "\12\0\3\12\2\1\1\12\17\1\1\0\1\12\1\0"+
    "\36\12\33\0\2\1\131\12\13\0\1\12\16\1\12\0"+
    "\41\12\11\0\2\12\4\1\1\12\2\1\1\0\30\12"+
    "\4\0\1\12\11\0\1\12\3\0\1\12\5\0\22\1"+
    "\31\12\3\0\4\1\13\12\65\1\25\12\1\1\22\12"+
    "\13\1\61\0\66\12\3\0\1\12\22\0\1\12\7\0"+
    "\12\12\2\0\2\1\12\0\1\1\20\12\3\0\1\1"+
    "\10\12\2\1\2\12\2\1\26\12\1\1\7\12\1\1"+
    "\1\12\3\1\4\12\2\1\1\0\1\12\7\0\2\1"+
    "\2\0\2\1\3\0\1\12\10\1\1\0\4\1\2\12"+
    "\1\1\3\12\2\0\2\1\12\0\4\12\7\1\2\12"+
    "\1\1\1\0\2\1\3\0\1\1\6\12\4\1\2\12"+
    "\2\1\26\12\1\1\7\12\1\1\2\12\1\1\2\12"+
    "\1\1\2\12\2\1\1\0\1\1\5\0\4\1\2\0"+
    "\2\1\3\0\3\1\1\0\7\1\4\12\1\1\1\12"+
    "\7\1\14\0\3\12\1\0\13\1\3\0\1\1\11\12"+
    "\1\1\3\12\1\1\26\12\1\1\7\12\1\1\2\12"+
    "\1\1\5\12\2\1\1\0\1\12\10\0\1\1\3\0"+
    "\1\1\3\0\2\1\1\12\17\1\2\12\2\0\2\1"+
    "\12\0\1\1\1\12\7\1\1\12\6\0\1\1\3\0"+
    "\1\1\10\12\2\1\2\12\2\1\26\12\1\1\7\12"+
    "\1\1\2\12\1\1\5\12\2\1\1\0\1\12\7\0"+
    "\2\1\2\0\2\1\3\0\7\1\3\0\4\1\2\12"+
    "\1\1\3\12\2\0\2\1\12\0\1\1\1\12\20\1"+
    "\1\0\1\12\1\1\6\12\3\1\3\12\1\1\4\12"+
    "\3\1\2\12\1\1\1\12\1\1\2\12\3\1\2\12"+
    "\3\1\3\12\3\1\14\12\4\1\5\0\3\1\3\0"+
    "\1\1\4\0\2\1\1\12\6\1\1\0\16\1\12\0"+
    "\11\1\1\12\6\1\5\0\10\12\1\1\3\12\1\1"+
    "\27\12\1\1\20\12\3\1\1\12\7\0\1\1\3\0"+
    "\1\1\4\0\7\1\2\0\1\1\3\12\5\1\2\12"+
    "\2\0\2\1\12\0\20\1\1\12\3\0\1\1\10\12"+
    "\1\1\3\12\1\1\27\12\1\1\12\12\1\1\5\12"+
    "\2\1\1\0\1\12\7\0\1\1\3\0\1\1\4\0"+
    "\7\1\2\0\7\1\1\12\1\1\2\12\2\0\2\1"+
    "\12\0\1\1\2\12\15\1\4\0\11\12\1\1\3\12"+
    "\1\1\51\12\2\0\1\12\7\0\1\1\3\0\1\1"+
    "\4\0\1\12\5\1\3\12\1\0\7\1\3\12\2\0"+
    "\2\1\12\0\12\1\6\12\1\1\3\0\1\1\22\12"+
    "\3\1\30\12\1\1\11\12\1\1\1\12\2\1\7\12"+
    "\3\1\1\0\4\1\6\0\1\1\1\0\1\1\10\0"+
    "\6\1\12\0\2\1\2\0\15\1\60\12\1\0\2\12"+
    "\7\0\4\1\10\12\10\0\1\1\12\0\47\1\2\12"+
    "\1\1\1\12\1\1\5\12\1\1\30\12\1\1\1\12"+
    "\1\1\12\12\1\0\2\12\11\0\1\12\2\1\5\12"+
    "\1\1\1\12\1\1\6\0\2\1\12\0\2\1\4\12"+
    "\40\1\1\12\27\1\2\0\6\1\12\0\13\1\1\0"+
    "\1\1\1\0\1\1\1\0\4\1\2\0\10\12\1\1"+
    "\44\12\4\1\24\0\1\1\2\0\5\12\13\0\1\1"+
    "\44\0\11\1\1\0\71\1\53\12\24\0\1\12\12\0"+
    "\6\1\6\12\4\0\4\12\3\0\1\12\3\0\2\12"+
    "\7\0\3\12\4\0\15\12\14\0\1\12\17\0\2\1"+
    "\46\12\1\1\1\12\5\1\1\12\2\1\53\12\1\1"+
    "\115\12\1\1\4\12\2\1\7\12\1\1\1\12\1\1"+
    "\4\12\2\1\51\12\1\1\4\12\2\1\41\12\1\1"+
    "\4\12\2\1\7\12\1\1\1\12\1\1\4\12\2\1"+
    "\17\12\1\1\71\12\1\1\4\12\2\1\103\12\2\1"+
    "\3\0\40\1\20\12\20\1\126\12\2\1\6\12\3\1"+
    "\u016c\12\2\1\21\12\1\1\32\12\5\1\113\12\3\1"+
    "\13\12\7\1\15\12\1\1\4\12\3\0\13\1\22\12"+
    "\3\0\13\1\22\12\2\0\14\1\15\12\1\1\3\12"+
    "\1\1\2\0\14\1\64\12\40\0\3\1\1\12\3\1"+
    "\2\12\1\0\2\1\12\0\41\1\4\0\1\1\12\0"+
    "\6\1\131\12\7\1\5\12\2\0\42\12\1\0\1\12"+
    "\5\1\106\12\12\1\37\12\1\1\14\0\4\1\14\0"+
    "\12\1\12\0\36\12\2\1\5\12\13\1\54\12\4\1"+
    "\32\12\6\1\12\0\46\1\27\12\5\0\4\1\65\12"+
    "\12\0\1\1\35\0\2\1\13\0\6\1\12\0\15\1"+
    "\1\12\10\1\16\0\1\1\2\0\77\1\5\0\57\12"+
    "\21\0\7\12\4\1\12\0\21\1\11\0\14\1\3\0"+
    "\36\12\15\0\2\12\12\0\54\12\16\0\14\1\44\12"+
    "\24\0\10\1\12\0\3\1\3\12\12\0\44\12\2\1"+
    "\11\12\7\1\53\12\2\1\3\12\20\1\3\0\1\1"+
    "\25\0\4\12\1\0\6\12\1\0\2\12\3\0\1\12"+
    "\5\1\300\12\72\0\1\1\5\0\26\12\2\1\6\12"+
    "\2\1\46\12\2\1\6\12\2\1\10\12\1\1\1\12"+
    "\1\1\1\12\1\1\1\12\1\1\37\12\2\1\65\12"+
    "\1\1\7\12\1\1\1\12\3\1\3\12\1\1\7\12"+
    "\3\1\4\12\2\1\6\12\4\1\15\12\5\1\3\12"+
    "\1\1\7\12\16\1\5\0\32\1\5\0\20\1\2\12"+
    "\23\1\1\12\13\1\5\0\1\1\12\0\1\1\1\12"+
    "\15\1\1\12\20\1\15\12\3\1\40\12\20\1\15\0"+
    "\4\1\1\0\3\1\14\0\21\1\1\12\4\1\1\12"+
    "\2\1\12\12\1\1\1\12\3\1\5\12\6\1\1\12"+
    "\1\1\1\12\1\1\1\12\1\1\4\12\1\1\13\12"+
    "\2\1\4\12\5\1\5\12\4\1\1\12\21\1\51\12"+
    "\u0177\1\57\12\1\1\57\12\1\1\205\12\6\1\4\12"+
    "\3\0\2\12\14\1\46\12\1\1\1\12\5\1\1\12"+
    "\2\1\70\12\7\1\1\12\17\1\1\0\27\12\11\1"+
    "\7\12\1\1\7\12\1\1\7\12\1\1\7\12\1\1"+
    "\7\12\1\1\7\12\1\1\7\12\1\1\7\12\1\1"+
    "\40\0\57\1\1\12\325\1\3\12\31\1\11\12\6\0"+
    "\1\1\5\12\2\1\5\12\4\1\126\12\2\1\2\0"+
    "\2\1\3\12\1\1\132\12\1\1\4\12\5\1\53\12"+
    "\1\1\136\12\21\1\40\12\60\1\320\12\100\1\375\12"+
    "\3\1\215\12\103\1\56\12\2\1\15\12\3\1\20\12"+
    "\12\0\2\12\24\1\57\12\1\0\4\1\12\0\1\1"+
    "\37\12\2\0\120\12\2\0\45\1\11\12\2\1\147\12"+
    "\2\1\65\12\2\1\11\12\52\1\15\12\1\0\3\12"+
    "\1\0\4\12\1\0\27\12\5\0\4\1\1\0\13\1"+
    "\1\12\7\1\64\12\14\1\2\0\62\12\22\0\12\1"+
    "\12\0\6\1\22\0\6\12\3\1\1\12\1\1\2\12"+
    "\13\0\34\12\10\0\2\1\27\12\15\0\14\1\35\12"+
    "\3\1\4\0\57\12\16\0\16\1\1\12\12\0\6\1"+
    "\5\12\1\0\12\12\12\0\5\12\1\1\51\12\16\0"+
    "\11\1\3\12\1\0\10\12\2\0\2\1\12\0\6\1"+
    "\27\12\3\1\1\12\3\0\62\12\1\0\1\12\3\0"+
    "\2\12\2\0\5\12\2\0\1\12\1\0\1\12\30\1"+
    "\3\12\2\1\13\12\5\0\2\1\3\12\2\0\12\1"+
    "\6\12\2\1\6\12\2\1\6\12\11\1\7\12\1\1"+
    "\7\12\1\1\53\12\1\1\16\12\6\1\163\12\10\0"+
    "\1\1\2\0\2\1\12\0\6\1\244\12\14\1\27\12"+
    "\4\1\61\12\u0104\1\156\12\2\1\152\12\46\1\7\12"+
    "\14\1\5\12\5\1\1\12\1\0\12\12\1\1\15\12"+
    "\1\1\5\12\1\1\1\12\1\1\2\12\1\1\2\12"+
    "\1\1\154\12\41\1\153\12\22\1\100\12\2\1\66\12"+
    "\50\1\15\12\3\1\20\0\20\1\20\0\3\1\2\12"+
    "\30\1\3\12\31\1\1\12\6\1\5\12\1\1\207\12"+
    "\2\1\1\0\4\1\1\12\13\1\12\0\7\1\32\12"+
    "\4\1\1\12\1\1\32\12\13\1\131\12\3\1\6\12"+
    "\2\1\6\12\2\1\6\12\2\1\3\12\3\1\2\12"+
    "\3\1\2\12\22\1\3\0\4\1\14\12\1\1\32\12"+
    "\1\1\23\12\1\1\2\12\1\1\17\12\2\1\16\12"+
    "\42\1\173\12\105\1\65\12\210\1\1\0\202\1\35\12"+
    "\3\1\61\12\17\1\1\0\37\1\40\12\15\1\36\12"+
    "\5\1\46\12\5\0\5\1\36\12\2\1\44\12\4\1"+
    "\10\12\1\1\5\12\52\1\236\12\2\1\12\0\6\1"+
    "\44\12\4\1\44\12\4\1\50\12\10\1\64\12\234\1"+
    "\67\12\11\1\26\12\12\1\10\12\230\1\6\12\2\1"+
    "\1\12\1\1\54\12\1\1\2\12\3\1\1\12\2\1"+
    "\27\12\12\1\27\12\11\1\37\12\101\1\23\12\1\1"+
    "\2\12\12\1\26\12\12\1\32\12\106\1\70\12\6\1"+
    "\2\12\100\1\1\12\3\0\1\1\2\0\5\1\4\0"+
    "\4\12\1\1\3\12\1\1\35\12\2\1\3\0\4\1"+
    "\1\0\40\1\35\12\3\1\35\12\43\1\10\12\1\1"+
    "\34\12\2\0\31\1\66\12\12\1\26\12\12\1\23\12"+
    "\15\1\22\12\156\1\111\12\67\1\63\12\15\1\63\12"+
    "\15\1\44\12\4\0\10\1\12\0\u0146\1\52\12\1\1"+
    "\2\0\3\1\2\12\116\1\35\12\12\1\1\12\10\1"+
    "\26\12\13\0\137\1\25\12\33\1\27\12\11\1\3\0"+
    "\65\12\17\0\37\1\12\0\17\1\4\0\55\12\13\0"+
    "\2\1\1\0\17\1\1\0\2\1\31\12\7\1\12\0"+
    "\6\1\3\0\44\12\16\0\1\1\12\0\4\1\1\12"+
    "\2\0\1\12\10\1\43\12\1\0\2\1\1\12\11\1"+
    "\3\0\60\12\16\0\4\12\4\1\4\0\1\1\14\0"+
    "\1\12\1\1\1\12\43\1\22\12\1\1\31\12\14\0"+
    "\6\1\1\0\101\1\7\12\1\1\1\12\1\1\4\12"+
    "\1\1\17\12\1\1\12\12\7\1\57\12\14\0\5\1"+
    "\12\0\6\1\4\0\1\1\10\12\2\1\2\12\2\1"+
    "\26\12\1\1\7\12\1\1\2\12\1\1\5\12\1\1"+
    "\2\0\1\12\7\0\2\1\2\0\2\1\3\0\2\1"+
    "\1\12\6\1\1\0\5\1\5\12\2\0\2\1\7\0"+
    "\3\1\5\0\213\1\65\12\22\0\4\12\5\1\12\0"+
    "\4\1\1\0\3\12\36\1\60\12\24\0\2\12\1\1"+
    "\1\12\10\1\12\0\246\1\57\12\7\0\2\1\11\0"+
    "\27\1\4\12\2\0\42\1\60\12\21\0\3\1\1\12"+
    "\13\1\12\0\46\1\53\12\15\0\1\12\7\1\12\0"+
    "\66\1\33\12\2\1\17\0\4\1\12\0\306\1\54\12"+
    "\17\0\145\1\100\12\12\0\25\1\10\12\2\1\1\12"+
    "\2\1\10\12\1\1\2\12\1\1\30\12\6\0\1\1"+
    "\2\0\2\1\4\0\1\12\1\0\1\12\2\0\14\1"+
    "\12\0\106\1\10\12\2\1\47\12\7\0\2\1\7\0"+
    "\1\12\1\1\1\12\1\0\33\1\1\12\12\0\50\12"+
    "\7\0\1\12\4\0\10\1\1\0\10\1\1\12\13\0"+
    "\56\12\20\0\3\1\1\12\42\1\71\12\7\1\11\12"+
    "\1\1\45\12\10\0\1\1\10\0\1\12\17\1\12\0"+
    "\30\1\36\12\2\1\26\0\1\1\16\0\111\1\7\12"+
    "\1\1\2\12\1\1\46\12\6\0\3\1\1\0\1\1"+
    "\2\0\1\1\7\0\1\12\1\0\10\1\12\0\6\1"+
    "\6\12\1\1\2\12\1\1\40\12\5\0\1\1\2\0"+
    "\1\1\5\0\1\12\7\1\12\0\u0136\1\23\12\4\0"+
    "\271\1\1\12\54\1\4\12\37\1\232\12\146\1\157\12"+
    "\21\1\304\12\274\1\57\12\1\1\11\0\307\1\107\12"+
    "\271\1\71\12\7\1\37\12\1\1\12\0\146\1\36\12"+
    "\2\1\5\0\13\1\60\12\7\0\11\1\4\12\14\1"+
    "\12\0\11\1\25\12\5\1\23\12\260\1\100\12\200\1"+
    "\113\12\4\1\1\0\1\12\67\0\7\1\4\0\15\12"+
    "\100\1\2\12\1\1\1\12\1\0\13\1\2\0\16\1"+
    "\370\12\10\1\326\12\52\1\11\12\367\1\37\12\61\1"+
    "\3\12\21\1\4\12\10\1\u018c\12\4\1\153\12\5\1"+
    "\15\12\3\1\11\12\7\1\12\12\3\1\2\0\1\1"+
    "\4\0\301\1\5\0\3\1\26\0\2\1\7\0\36\1"+
    "\4\0\224\1\3\0\273\1\125\12\1\1\107\12\1\1"+
    "\2\12\2\1\1\12\2\1\2\12\2\1\4\12\1\1"+
    "\14\12\1\1\1\12\1\1\7\12\1\1\101\12\1\1"+
    "\4\12\2\1\10\12\1\1\7\12\1\1\34\12\1\1"+
    "\4\12\1\1\5\12\1\1\1\12\3\1\7\12\1\1"+
    "\u0154\12\2\1\31\12\1\1\31\12\1\1\37\12\1\1"+
    "\31\12\1\1\37\12\1\1\31\12\1\1\37\12\1\1"+
    "\31\12\1\1\37\12\1\1\31\12\1\1\10\12\2\1"+
    "\151\0\4\1\62\0\10\1\1\0\16\1\1\0\26\1"+
    "\5\0\1\1\17\0\120\1\7\0\1\1\21\0\2\1"+
    "\7\0\1\1\2\0\1\1\5\0\325\1\55\12\3\1"+
    "\7\0\7\12\2\1\12\0\4\1\1\12\u0171\1\54\12"+
    "\16\0\5\1\306\12\13\1\7\0\51\1\104\12\7\0"+
    "\1\12\4\1\12\0\u0156\1\1\12\117\1\4\12\1\1"+
    "\33\12\1\1\2\12\1\1\1\12\2\1\1\12\1\1"+
    "\12\12\1\1\4\12\1\1\1\12\1\1\1\12\6\1"+
    "\1\12\4\1\1\12\1\1\1\12\1\1\1\12\1\1"+
    "\3\12\1\1\2\12\1\1\1\12\2\1\1\12\1\1"+
    "\1\12\1\1\1\12\1\1\1\12\1\1\1\12\1\1"+
    "\2\12\1\1\1\12\2\1\4\12\1\1\7\12\1\1"+
    "\4\12\1\1\4\12\1\1\1\12\1\1\12\12\1\1"+
    "\21\12\5\1\3\12\1\1\5\12\1\1\21\12\u0134\1"+
    "\12\0\6\1\336\12\42\1\65\12\13\1\336\12\2\1"+
    "\u0182\12\16\1\u0131\12\37\1\36\12\342\1\113\12\266\1"+
    "\1\0\36\1\140\0\200\1\360\0\20\1";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\12\1\3\0\1\3\1\0\1\4"+
    "\2\0\2\5\1\1\1\6\1\7\1\0\1\10\1\11"+
    "\2\0\1\12\1\1\1\13\1\0\2\1\1\0\1\1"+
    "\1\14\1\0\1\1\2\0\1\14";

  private static int [] zzUnpackAction() {
    int [] result = new int[48];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\26\0\54\0\102\0\130\0\102\0\156\0\204"+
    "\0\232\0\260\0\306\0\334\0\362\0\u0108\0\u011e\0\u0134"+
    "\0\u014a\0\u0160\0\u0176\0\102\0\130\0\u018c\0\u01a2\0\u01b8"+
    "\0\u01ce\0\u01e4\0\u01fa\0\102\0\102\0\u0210\0\102\0\102"+
    "\0\u0226\0\u023c\0\102\0\u0252\0\102\0\u0268\0\u027e\0\u0294"+
    "\0\u02aa\0\u02c0\0\u0294\0\u02d6\0\u02ec\0\u0302\0\u0318\0\u02aa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[48];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\23\4\1\5\4\4\2\6\11\4\1\7\3\4\1\10"+
    "\1\11\3\4\2\12\1\13\1\12\1\14\1\12\1\15"+
    "\1\16\1\17\1\20\14\12\53\0\1\21\21\0\1\22"+
    "\26\0\1\23\26\0\1\24\2\0\2\12\1\0\1\12"+
    "\1\0\3\12\2\0\14\12\23\0\1\25\6\0\1\26"+
    "\3\0\1\27\1\30\1\26\2\0\11\26\2\12\1\0"+
    "\1\12\1\31\3\12\2\0\1\32\2\12\11\32\2\12"+
    "\1\0\1\12\1\0\2\12\1\33\2\0\14\12\10\0"+
    "\1\34\26\0\1\35\34\0\1\36\23\0\1\37\33\0"+
    "\1\40\1\0\1\26\3\0\1\26\5\0\1\26\2\0"+
    "\11\26\4\0\1\41\2\0\1\42\1\43\1\0\1\41"+
    "\2\0\11\41\11\0\1\43\14\0\1\31\3\0\1\31"+
    "\5\0\1\31\2\0\11\31\1\32\1\12\1\0\1\12"+
    "\1\31\3\12\2\0\1\32\2\12\11\32\2\12\1\0"+
    "\1\12\1\0\2\12\1\44\2\0\14\12\17\0\1\45"+
    "\6\0\1\41\3\0\1\41\2\0\1\42\1\0\1\46"+
    "\1\41\2\0\11\41\4\0\1\41\2\0\1\42\1\0"+
    "\1\46\1\41\2\0\11\41\2\12\1\0\1\12\1\0"+
    "\3\12\2\0\1\12\1\47\12\12\4\0\1\26\5\0"+
    "\1\26\2\0\11\26\2\50\1\51\1\50\1\51\1\52"+
    "\2\50\2\51\2\50\1\53\13\50\1\51\1\50\1\51"+
    "\1\52\2\50\2\51\14\50\5\51\1\54\20\51\2\12"+
    "\1\0\1\12\1\0\3\12\2\0\2\12\1\55\11\12"+
    "\14\0\1\56\11\0\2\12\1\0\1\12\1\0\1\47"+
    "\2\12\2\0\14\12\5\0\1\57\20\0\5\51\1\54"+
    "\6\51\1\60\11\51";

  private static int [] zzUnpacktrans() {
    int [] result = new int[814];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\12\1\3\0\1\11\1\0"+
    "\1\1\2\0\3\1\2\11\1\0\2\11\2\0\1\11"+
    "\1\1\1\11\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[48];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;
  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ItrulesLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ItrulesTypes.TEXT;
            }
          // fall through
          case 13: break;
          case 2:
            { yybegin(BODY); return ItrulesTypes.TEXT;
            }
          // fall through
          case 14: break;
          case 3:
            { return ItrulesTypes.OR;
            }
          // fall through
          case 15: break;
          case 4:
            { return ItrulesTypes.PLACEHOLDER;
            }
          // fall through
          case 16: break;
          case 5:
            { return ItrulesTypes.FORMATTER;
            }
          // fall through
          case 17: break;
          case 6:
            { return ItrulesTypes.LEFT_EXPR;
            }
          // fall through
          case 18: break;
          case 7:
            { return ItrulesTypes.RIGHT_EXPR;
            }
          // fall through
          case 19: break;
          case 8:
            { return ItrulesTypes.AND;
            }
          // fall through
          case 20: break;
          case 9:
            { return ItrulesTypes.NOT;
            }
          // fall through
          case 21: break;
          case 10:
            { return ItrulesTypes.SCAPED_CHAR;
            }
          // fall through
          case 22: break;
          case 11:
            { yybegin(HEADER); return ItrulesTypes.DEFRULE;
            }
          // fall through
          case 23: break;
          case 12:
            { return ItrulesTypes.MULTIPLE;
            }
          // fall through
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
