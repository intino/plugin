/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package io.intino.plugin.highlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.openapi.project.Project;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import io.intino.plugin.lang.LanguageManager;
import io.intino.plugin.lang.psi.TaraTypes;
import io.intino.tara.Language;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>TaraHighlighterLex.flex</tt>
 */
class TaraHighlighterLex implements FlexLexer {

	/**
	 * This character denotes the end of file
	 */
	public static final int YYEOF = -1;

	/**
	 * initial size of the lookahead buffer
	 */
	private static final int ZZ_BUFFERSIZE = 16384;

	/**
	 * lexical states
	 */
	public static final int YYINITIAL = 0;
	public static final int QUOTED = 2;
	public static final int MULTILINE = 4;
	public static final int EXPRESSION = 6;
	public static final int EXPRESSION_MULTILINE = 8;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 * at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
			0, 0, 1, 1, 2, 2, 3, 3, 4, 4
	};

	/**
	 * Translates characters to character classes
	 * Chosen bits are [12, 6, 3]
	 * Total runtime size is 17504 bytes
	 */
	public static int ZZ_CMAP(int ch) {
		return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 9] << 6) | ((ch >> 3) & 0x3f)] << 3) | (ch & 0x7)];
	}

	/* The ZZ_CMAP_Z table has 2176 entries */
	static final char ZZ_CMAP_Z[] = zzUnpackCMap(
			"\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1" +
			"\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33" +
			"\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1" +
			"\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61" +
			"\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67" +
			"\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2" +
			"\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21" +
			"\1\25\1\107\u0582\21\1\110\u017f\21");

	/* The ZZ_CMAP_Y table has 4672 entries */
	static final char ZZ_CMAP_Y[] = zzUnpackCMap(
			"\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\1\14\1\15\4\0\1\16" +
			"\1\17\1\20\1\21\2\10\1\22\3\10\1\22\71\10\1\23\1\10\1\24\1\25\1\26\1\27\2" +
			"\25\16\0\1\30\1\31\1\32\1\33\2\10\1\34\11\10\1\35\21\10\1\36\1\37\24\10\1" +
			"\40\3\10\1\22\1\41\1\40\4\10\1\42\1\43\4\0\1\44\1\45\1\25\3\10\2\46\1\25\1" +
			"\47\1\50\1\0\1\51\5\10\1\52\2\0\1\5\1\53\1\54\13\10\1\55\1\44\1\56\1\57\1" +
			"\5\1\60\1\25\1\61\1\62\3\10\3\0\1\63\12\10\1\64\1\0\1\65\1\25\1\5\1\66\3\10" +
			"\1\52\1\67\1\21\2\10\1\64\1\70\1\71\1\72\2\25\3\10\1\73\1\10\1\46\6\25\2\10" +
			"\1\30\1\74\2\25\1\75\5\0\1\76\6\10\1\77\2\0\1\100\1\10\1\101\1\5\1\40\1\10" +
			"\1\102\1\103\1\104\2\10\1\105\1\106\1\107\1\110\1\111\1\61\1\112\1\101\1\5" +
			"\1\113\1\114\1\115\1\116\1\104\2\10\1\105\1\117\1\120\1\121\1\122\1\123\1" +
			"\124\1\125\1\5\1\126\1\25\1\115\1\35\1\34\2\10\1\105\1\127\1\107\1\44\1\130" +
			"\1\131\1\25\1\101\1\5\1\41\1\132\1\115\1\103\1\104\2\10\1\105\1\127\1\107" +
			"\1\110\1\122\1\133\1\112\1\101\1\5\1\41\1\25\1\134\1\135\1\136\1\137\1\114" +
			"\1\135\1\10\1\140\1\141\1\142\1\143\1\25\1\125\1\5\1\25\1\41\1\144\1\30\1" +
			"\105\2\10\1\105\1\10\1\145\1\146\1\142\1\147\1\46\1\101\1\5\2\25\1\102\1\30" +
			"\1\105\2\10\1\105\1\150\1\107\1\146\1\142\1\147\1\32\1\101\1\5\1\151\1\25" +
			"\1\144\1\30\1\105\4\10\1\152\1\146\1\153\1\154\1\42\1\101\1\5\1\25\1\37\1" +
			"\155\1\10\1\22\1\37\2\10\1\34\1\156\1\22\1\157\1\160\1\0\1\125\1\5\1\161\1" +
			"\25\1\40\5\10\1\162\1\163\1\164\1\165\1\5\1\166\4\25\1\167\1\170\1\171\1\40" +
			"\1\172\1\173\1\162\1\174\1\175\1\47\1\5\1\176\4\25\1\131\2\25\1\177\1\5\1" +
			"\166\1\200\1\201\1\10\1\40\3\10\1\26\1\43\1\0\1\146\1\202\1\0\1\43\3\0\1\203" +
			"\1\204\7\25\5\10\1\52\1\0\1\205\1\5\1\166\1\64\1\206\1\207\1\210\1\211\1\10" +
			"\1\212\1\213\1\5\1\214\4\10\1\35\1\215\5\10\1\216\51\10\1\136\1\22\1\136\5" +
			"\10\1\136\4\10\1\136\1\22\1\136\1\10\1\22\7\10\1\136\10\10\1\217\4\25\2\10" +
			"\2\25\12\10\2\74\1\40\114\10\1\103\2\10\1\40\2\10\1\46\11\10\1\135\1\10\1" +
			"\131\1\10\1\30\1\220\1\25\2\10\1\220\1\25\2\10\1\221\1\25\1\10\1\30\1\222" +
			"\1\25\6\10\1\223\3\0\1\224\1\225\1\5\1\166\3\25\1\226\1\5\1\166\13\10\1\25" +
			"\1\227\4\10\1\230\10\10\1\74\1\25\3\10\1\22\1\0\1\2\1\0\1\2\1\125\1\5\3\10" +
			"\1\74\1\26\1\25\5\10\1\113\3\10\1\24\1\5\1\166\4\25\2\10\1\164\1\2\6\10\1" +
			"\202\1\165\3\0\1\110\1\5\1\166\1\5\1\166\1\42\1\25\1\0\1\47\10\25\1\231\5" +
			"\10\1\223\1\0\1\231\1\113\1\5\1\166\1\25\1\232\1\2\1\25\1\233\3\10\1\100\1" +
			"\210\1\5\1\66\4\10\1\64\1\0\1\2\1\25\4\10\1\223\2\0\1\25\1\5\1\234\1\5\1\66" +
			"\3\10\1\74\1\10\1\131\10\25\1\235\2\0\1\236\1\237\1\177\30\10\7\0\1\240\42" +
			"\10\2\74\4\10\2\74\1\10\1\241\3\10\1\74\6\10\1\30\1\175\1\242\1\26\1\243\1" +
			"\113\1\10\1\26\1\242\1\26\1\25\1\232\3\25\1\244\1\25\1\42\1\131\1\25\1\245" +
			"\1\25\1\146\1\0\1\41\1\42\2\25\1\10\1\26\4\10\2\25\1\0\1\203\1\246\1\0\1\247" +
			"\1\25\1\250\1\37\1\156\1\251\1\27\1\252\1\10\1\253\1\254\1\255\2\25\5\10\1" +
			"\131\116\25\5\10\1\22\5\10\1\22\20\10\1\26\1\256\1\257\1\25\4\10\1\35\1\215" +
			"\7\10\1\42\1\25\1\61\2\10\1\22\1\25\10\22\4\0\5\25\1\42\72\25\1\254\3\25\1" +
			"\40\1\212\1\251\1\26\1\40\11\10\1\22\1\260\1\40\12\10\1\216\1\254\4\10\1\22" +
			"\1\40\12\10\1\22\2\25\3\10\1\46\6\25\170\10\1\74\11\25\75\10\1\46\2\25\21" +
			"\10\1\26\10\25\5\10\1\74\41\10\1\26\2\10\1\5\1\261\2\25\5\10\1\164\1\75\1" +
			"\262\3\10\1\64\12\10\1\177\3\25\1\42\1\10\1\37\14\10\1\104\3\10\1\22\1\10" +
			"\7\25\1\42\1\10\1\263\1\264\2\10\1\52\2\25\1\131\6\10\1\113\1\25\1\265\5\10" +
			"\1\223\1\0\1\47\1\25\1\5\1\166\2\0\1\265\1\266\1\5\1\66\2\10\1\64\1\47\2\10" +
			"\1\164\1\0\1\2\1\25\3\10\1\26\1\76\5\10\1\52\1\0\1\247\1\42\1\5\1\166\1\267" +
			"\1\10\1\5\1\270\5\10\1\100\1\165\1\25\1\264\1\271\1\5\1\166\2\10\1\22\1\272" +
			"\6\10\1\207\1\273\1\230\2\25\1\274\1\10\1\52\1\275\1\25\3\276\1\25\2\22\5" +
			"\10\1\216\1\74\1\25\16\10\1\52\1\277\1\5\1\166\64\10\1\113\1\25\2\10\1\22" +
			"\1\300\5\10\1\113\40\25\55\10\1\74\15\10\1\24\4\25\1\22\1\25\1\300\1\301\1" +
			"\10\1\105\1\22\1\175\1\302\15\10\1\24\3\25\1\300\54\10\1\74\2\25\10\10\1\37" +
			"\6\10\5\25\1\10\1\26\2\0\2\25\2\0\1\114\2\25\1\254\3\25\1\41\1\30\20\10\1" +
			"\303\1\245\1\25\1\5\1\166\1\40\2\10\1\116\1\40\2\10\1\46\1\304\12\10\1\22" +
			"\3\37\1\305\1\306\2\25\1\307\1\10\1\150\2\10\1\22\2\10\1\310\1\10\1\74\1\10" +
			"\1\74\4\25\17\10\1\46\10\25\6\10\1\26\20\25\1\311\20\25\3\10\1\26\6\10\1\131" +
			"\1\25\1\247\3\25\4\10\1\25\1\254\3\10\1\46\4\10\1\64\1\312\3\10\1\74\4\10" +
			"\1\113\1\10\1\251\5\25\23\10\1\74\1\5\1\166\4\10\1\113\4\10\1\113\5\10\1\25" +
			"\6\10\1\113\23\25\46\10\1\22\1\25\2\10\1\74\1\25\1\10\23\25\1\74\1\105\4\10" +
			"\1\35\1\313\2\10\1\74\1\25\2\10\1\22\1\25\3\10\1\22\10\25\2\10\1\314\1\25" +
			"\2\10\1\74\1\25\3\10\1\24\10\25\7\10\1\304\10\25\1\315\1\75\1\150\1\40\2\10" +
			"\1\113\1\121\4\25\3\10\1\26\3\10\1\26\4\25\1\10\1\40\2\10\1\316\3\25\6\10" +
			"\1\74\1\25\2\10\1\74\1\25\2\10\1\46\1\25\2\10\1\24\15\25\11\10\1\131\6\25" +
			"\6\10\1\46\1\25\6\10\1\46\41\25\1\233\6\10\1\0\1\165\3\25\1\125\1\5\1\25\1" +
			"\61\1\233\5\10\1\0\1\317\2\25\3\10\1\131\1\5\1\166\1\233\3\10\1\164\1\0\1" +
			"\320\1\5\2\25\4\10\1\321\1\25\1\233\5\10\1\52\1\0\1\322\1\323\1\5\1\324\4" +
			"\25\2\10\1\34\2\10\1\223\1\0\1\204\10\25\1\22\1\252\1\10\1\35\1\10\1\131\5" +
			"\10\1\164\1\0\1\312\1\5\1\166\1\144\1\103\1\104\2\10\1\105\1\127\1\107\1\110" +
			"\1\122\1\143\1\254\1\325\2\203\21\25\6\10\1\202\1\0\1\205\1\46\1\5\1\166\4" +
			"\25\6\10\2\0\1\326\1\25\1\5\1\166\24\25\5\10\1\164\1\47\1\0\1\247\2\25\1\271" +
			"\4\25\6\10\2\0\1\327\1\25\1\5\1\166\4\25\5\10\1\52\1\0\1\25\1\5\1\166\6\25" +
			"\3\10\1\330\1\0\1\2\1\5\1\166\54\25\10\10\1\5\1\166\1\25\1\42\40\25\1\100" +
			"\1\233\4\10\1\52\1\331\1\61\1\25\1\100\1\76\4\10\1\243\1\212\1\0\1\177\4\25" +
			"\7\10\1\131\40\25\1\10\1\105\3\10\1\164\1\165\1\0\1\131\1\25\1\5\1\166\2\25" +
			"\1\37\3\10\1\332\2\0\1\43\1\165\11\25\1\22\1\34\4\10\1\333\1\334\1\213\1\25" +
			"\1\0\1\177\24\25\63\10\1\24\14\25\15\10\1\22\2\25\30\10\1\113\27\25\5\10\1" +
			"\22\72\25\10\10\1\22\67\25\7\10\1\131\3\10\1\22\1\5\1\166\14\25\3\10\1\74" +
			"\1\203\1\25\6\10\1\165\1\25\1\113\1\25\1\5\1\166\1\300\2\10\1\254\2\10\56" +
			"\25\10\10\1\26\1\25\1\100\4\0\1\165\1\25\1\61\1\233\1\10\10\25\1\24\3\25\75" +
			"\10\1\26\2\25\36\10\1\46\41\25\43\10\1\22\12\25\61\10\1\113\40\25\15\10\1" +
			"\46\1\10\1\26\1\10\1\131\1\10\1\335\1\2\127\25\1\336\1\337\2\0\1\340\1\2\3" +
			"\25\1\341\22\25\1\323\67\25\12\10\1\30\10\10\1\30\1\342\1\343\1\10\1\344\1" +
			"\150\7\10\1\35\1\345\2\30\3\10\1\346\1\175\1\37\1\105\51\10\1\74\3\10\1\105" +
			"\2\10\1\216\3\10\1\216\2\10\1\30\3\10\1\30\2\10\1\22\3\10\1\22\3\10\1\105" +
			"\3\10\1\105\2\10\1\216\1\347\6\5\6\0\1\165\1\232\5\0\1\203\1\311\1\25\1\350" +
			"\2\25\1\232\1\43\1\0\52\25\1\165\2\0\1\351\1\352\1\312\72\25\30\10\1\26\1" +
			"\25\1\165\5\25\10\10\1\223\1\312\1\5\1\166\24\25\1\150\3\10\1\167\1\40\1\216" +
			"\1\353\1\250\1\354\1\167\1\241\1\167\2\216\1\124\1\10\1\34\1\10\1\113\1\355" +
			"\1\34\1\10\1\113\50\25\32\10\1\22\5\25\106\10\1\26\1\25\33\10\1\74\120\10" +
			"\1\24\1\25\146\10\1\131\3\25\3\10\1\74\74\25\1\123\3\25\14\0\20\25\36\0\2" +
			"\25");

	/* The ZZ_CMAP_A table has 1904 entries */
	static final char ZZ_CMAP_A[] = zzUnpackCMap(
			"\11\61\1\66\1\63\2\0\1\64\6\61\4\0\1\66\1\62\1\46\1\0\1\34\1\35\1\0\1\47\1" +
			"\26\1\27\1\44\1\53\1\41\1\50\1\36\1\40\12\65\1\42\1\45\1\51\1\43\1\52\1\0" +
			"\1\54\4\34\1\60\15\34\1\30\1\67\1\31\1\0\1\34\1\0\1\5\1\3\1\21\1\12\1\6\1" +
			"\24\1\55\1\4\1\14\1\56\1\34\1\13\1\22\1\11\1\15\1\23\1\25\1\17\1\1\1\10\1" +
			"\2\1\16\1\20\1\7\1\57\1\34\1\32\1\0\1\33\1\0\1\61\2\0\4\34\4\0\1\34\2\0\1" +
			"\61\2\0\1\35\4\0\1\34\1\0\1\37\2\0\1\34\5\0\7\34\1\0\2\34\4\0\4\34\16\0\5" +
			"\34\7\0\1\34\1\0\1\34\1\0\5\34\1\0\2\34\2\0\4\34\1\0\1\34\6\0\1\34\1\0\3\34" +
			"\1\0\1\34\1\0\4\34\1\0\13\34\1\0\3\34\1\0\5\61\2\0\6\34\1\0\7\34\1\0\1\34" +
			"\15\0\1\34\1\0\15\61\1\0\1\61\1\0\2\61\1\0\2\61\1\0\1\61\3\34\5\0\6\61\5\0" +
			"\1\34\4\0\3\61\1\0\1\61\3\0\3\34\5\61\2\65\4\0\2\34\1\61\13\34\1\0\1\34\7" +
			"\61\2\34\2\61\1\0\4\61\2\34\2\65\3\34\2\0\1\34\7\0\1\61\1\34\1\61\6\34\3\61" +
			"\2\0\11\34\3\61\1\34\6\0\2\65\6\34\4\61\2\34\2\0\2\61\1\34\11\61\1\34\3\61" +
			"\1\34\5\61\2\0\1\34\3\61\4\0\6\34\6\0\10\61\6\34\3\61\1\34\2\61\1\34\7\61" +
			"\2\34\2\61\2\0\2\65\1\34\3\61\1\0\10\34\2\0\2\34\2\0\6\34\1\0\7\34\1\0\1\34" +
			"\3\0\4\34\2\0\1\61\1\34\7\61\2\0\2\61\2\0\3\61\1\34\5\0\2\34\1\0\5\34\7\0" +
			"\2\34\4\0\3\61\1\0\6\34\4\0\2\34\1\0\2\34\1\0\2\34\1\0\2\34\2\0\1\61\1\0\5" +
			"\61\4\0\2\61\2\0\3\61\3\0\1\61\7\0\4\34\1\0\1\34\7\0\2\65\2\61\3\34\1\61\2" +
			"\0\1\34\1\0\2\34\1\0\3\34\2\61\1\0\3\61\2\0\1\34\10\0\1\34\6\61\6\0\2\61\2" +
			"\0\1\61\1\34\1\0\6\34\3\0\3\34\1\0\4\34\3\0\2\34\1\0\1\34\1\0\4\34\4\0\5\61" +
			"\3\0\3\61\1\0\4\61\2\0\1\34\6\0\5\61\1\0\5\34\3\0\1\34\7\61\1\0\2\61\5\0\2" +
			"\61\1\0\4\34\1\0\3\34\1\0\2\34\5\0\3\34\2\61\1\34\3\61\1\0\4\61\1\34\5\0\3" +
			"\34\1\61\2\0\2\61\1\0\7\34\1\0\1\34\4\0\1\61\4\0\6\61\1\0\1\61\3\0\2\61\4" +
			"\0\1\34\1\61\2\34\7\61\4\0\10\34\10\61\1\0\2\65\7\0\2\34\1\0\1\34\2\0\2\34" +
			"\1\0\1\34\2\0\1\34\6\0\4\34\1\0\3\34\1\0\1\34\1\0\1\34\2\0\2\34\1\0\3\34\2" +
			"\61\1\0\2\61\1\34\2\0\5\34\1\0\1\34\1\0\2\65\2\0\4\34\2\61\13\0\1\61\1\0\1" +
			"\61\1\0\1\61\4\0\2\61\5\34\10\61\11\0\1\61\1\0\7\61\1\34\2\61\4\34\3\61\1" +
			"\34\3\61\2\34\7\61\3\34\4\61\5\34\14\61\1\34\1\61\2\65\4\61\7\0\1\34\2\0\3" +
			"\34\1\0\7\34\2\0\3\61\2\34\3\61\3\0\2\34\2\61\4\0\1\34\1\0\2\61\4\0\4\34\10" +
			"\61\3\0\1\34\3\0\2\34\1\61\5\0\4\61\1\0\5\34\2\61\2\34\1\61\1\34\5\0\5\61" +
			"\3\34\3\0\10\61\5\34\2\65\3\0\3\34\3\61\1\0\5\61\4\34\1\61\4\34\3\61\2\34" +
			"\3\61\1\0\5\61\1\0\1\34\1\0\1\34\1\0\1\34\1\0\1\34\2\0\3\34\1\0\6\34\2\0\2" +
			"\34\2\0\5\61\5\0\1\34\4\0\1\61\3\0\4\61\11\0\1\34\4\0\1\34\1\0\5\34\2\0\1" +
			"\34\1\0\4\34\1\0\3\34\2\0\4\34\5\0\5\34\4\0\1\34\4\0\4\34\3\61\2\34\5\0\2" +
			"\61\2\0\3\34\2\65\2\34\4\0\6\61\1\0\3\34\1\61\3\34\1\61\4\34\1\61\4\34\2\61" +
			"\6\34\3\0\1\34\1\0\1\34\2\0\5\34\1\61\2\34\2\65\5\34\1\0\4\34\2\61\4\0\1\34" +
			"\3\61\2\34\1\61\5\34\2\61\3\0\3\34\4\0\3\34\2\61\2\0\6\34\1\0\3\61\1\0\2\61" +
			"\5\0\5\34\5\0\1\34\1\61\3\34\1\0\2\34\1\0\7\34\2\0\1\61\6\0\2\34\2\0\3\34" +
			"\3\0\2\34\3\0\2\34\2\0\3\61\4\0\3\34\1\0\2\34\1\0\1\34\5\0\1\61\2\0\3\61\5" +
			"\0\1\34\3\0\1\34\2\0\4\34\1\0\2\34\2\0\1\34\3\61\1\0\2\61\1\0\5\34\2\61\1" +
			"\0\3\61\2\0\1\61\2\0\5\61\1\0\2\65\3\34\1\61\2\0\1\34\1\0\1\61\4\34\5\0\3" +
			"\61\3\0\2\65\1\34\1\0\1\34\3\0\2\34\2\61\2\0\6\61\2\34\1\0\1\34\1\61\3\0\1" +
			"\34\3\0\2\34\3\0\5\61\1\34\4\61\3\0\6\61\1\34\6\61\3\0\1\61\1\0\2\61\1\0\1" +
			"\61\2\34\3\0\2\61\6\0\5\61\3\0\6\61\2\0\3\61\2\0\4\61\4\0\1\34\2\0\2\34\2" +
			"\0\4\34\1\0\4\34\1\0\1\34\1\0\6\34\2\0\5\34\1\0\4\34\1\0\4\34\2\0\2\65\4\0" +
			"\1\61\3\0\1\61\2\0\7\61\1\0\2\61\1\0\2\61\1\0\1\34\1\0\1\34\5\0\1\34\1\0\1" +
			"\34\1\0\3\34\1\0\3\34\1\0\3\34");

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 =
			"\5\0\1\1\22\2\1\3\1\4\1\5\1\6\1\7" +
			"\1\10\1\11\1\12\1\1\1\13\1\14\1\15\1\16" +
			"\1\17\1\20\1\21\1\1\1\22\1\23\1\24\1\1" +
			"\1\22\1\25\1\26\1\27\2\26\1\30\3\26\2\2" +
			"\1\0\3\2\1\31\15\2\1\32\15\2\2\0\1\33" +
			"\1\34\1\35\2\0\1\27\1\30\1\36\1\2\1\0" +
			"\1\37\1\2\1\40\7\2\1\41\10\2\1\42\15\2" +
			"\2\43\2\0\1\44\1\45\1\2\1\0\1\46\6\2" +
			"\1\47\1\50\4\2\1\51\2\2\1\52\5\2\1\53" +
			"\1\54\6\2\1\0\1\43\1\0\1\2\1\0\4\2" +
			"\1\55\1\2\1\56\17\2\1\57\1\0\1\45\1\60" +
			"\6\2\1\61\1\62\2\2\1\63\11\2\1\64\1\2" +
			"\1\65\3\2\1\66\1\67\4\2\1\70\1\2\1\71" +
			"\1\2\1\72\1\73\1\74\1\75\1\2\1\76\1\77" +
			"\1\100\1\101\1\2\1\102\1\103\1\104";

	private static int[] zzUnpackAction() {
		int[] result = new int[252];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 =
			"\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188" +
			"\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348" +
			"\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508" +
			"\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0540\0\u0118" +
			"\0\u0578\0\u0118\0\u0118\0\u05b0\0\u0118\0\u0118\0\u0118\0\u0118" +
			"\0\u05e8\0\u0620\0\u0658\0\u0118\0\u0690\0\u06c8\0\u0700\0\u0118" +
			"\0\u0118\0\u0738\0\u0770\0\u0118\0\u07a8\0\u07e0\0\u0818\0\u0850" +
			"\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u02a0\0\u09a0\0\u09d8" +
			"\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98" +
			"\0\u0bd0\0\u0c08\0\u0c40\0\u02a0\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20" +
			"\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0" +
			"\0\u0f18\0\u0f50\0\u0f88\0\u05b0\0\u0fc0\0\u0ff8\0\u1030\0\u1068" +
			"\0\u0770\0\u07e0\0\u02a0\0\u10a0\0\u10d8\0\u02a0\0\u1110\0\u02a0" +
			"\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u02a0" +
			"\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458" +
			"\0\u02a0\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0" +
			"\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u0118\0\u0f50" +
			"\0\u1768\0\u17a0\0\u0118\0\u17d8\0\u1810\0\u1848\0\u0118\0\u1880" +
			"\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998\0\u02a0\0\u02a0\0\u19d0" +
			"\0\u1a08\0\u1a40\0\u1a78\0\u02a0\0\u1ab0\0\u1ae8\0\u02a0\0\u1b20" +
			"\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u02a0\0\u02a0\0\u1c38\0\u1c70" +
			"\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1768\0\u1dc0\0\u1df8" +
			"\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u02a0\0\u1f48\0\u02a0" +
			"\0\u1f80\0\u1fb8\0\u1ff0\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108" +
			"\0\u2140\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2290\0\u02a0" +
			"\0\u22c8\0\u22c8\0\u02a0\0\u2300\0\u2338\0\u2370\0\u23a8\0\u23e0" +
			"\0\u2418\0\u02a0\0\u02a0\0\u2450\0\u2488\0\u02a0\0\u24c0\0\u24f8" +
			"\0\u2530\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680\0\u02a0" +
			"\0\u26b8\0\u02a0\0\u26f0\0\u2728\0\u2760\0\u02a0\0\u02a0\0\u2798" +
			"\0\u27d0\0\u2808\0\u2840\0\u02a0\0\u2878\0\u02a0\0\u28b0\0\u02a0" +
			"\0\u02a0\0\u02a0\0\u02a0\0\u28e8\0\u02a0\0\u02a0\0\u02a0\0\u02a0" +
			"\0\u2920\0\u02a0\0\u02a0\0\u02a0";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[252];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 =
			"\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
			"\1\16\1\15\1\17\1\20\1\21\1\22\1\23\1\24" +
			"\1\25\1\26\1\15\1\27\1\30\1\15\1\31\1\32" +
			"\1\33\1\34\1\35\1\36\1\15\1\37\1\40\1\6" +
			"\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50" +
			"\1\51\1\6\1\52\1\53\1\54\4\15\1\6\1\55" +
			"\1\56\1\6\1\57\1\52\1\6\46\60\1\61\20\60" +
			"\1\62\43\60\1\63\23\60\1\62\47\60\1\64\17\60" +
			"\1\65\50\60\1\66\16\60\1\67\71\0\1\15\1\70" +
			"\5\15\1\71\15\15\6\0\1\15\2\0\2\37\7\0" +
			"\1\15\1\72\3\0\5\15\3\0\1\15\3\0\1\73" +
			"\24\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
			"\3\0\5\15\3\0\1\15\3\0\14\15\1\74\10\15" +
			"\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
			"\5\15\3\0\1\15\3\0\4\15\1\75\20\15\6\0" +
			"\1\15\2\0\2\37\7\0\1\15\1\72\3\0\5\15" +
			"\3\0\1\15\3\0\1\76\1\15\1\77\22\15\6\0" +
			"\1\15\2\0\2\37\7\0\1\15\1\72\3\0\5\15" +
			"\3\0\1\15\3\0\6\15\1\100\1\15\1\101\10\15" +
			"\1\102\3\15\6\0\1\15\2\0\2\37\7\0\1\15" +
			"\1\72\3\0\5\15\3\0\1\15\3\0\25\15\6\0" +
			"\1\15\2\0\2\37\7\0\1\15\1\72\3\0\5\15" +
			"\3\0\1\15\3\0\5\15\1\103\5\15\1\104\2\15" +
			"\1\105\6\15\6\0\1\15\2\0\2\37\7\0\1\15" +
			"\1\72\3\0\5\15\3\0\1\15\3\0\1\106\3\15" +
			"\1\107\1\110\5\15\1\111\1\112\10\15\6\0\1\15" +
			"\2\0\2\37\7\0\1\15\1\72\3\0\5\15\3\0" +
			"\1\15\3\0\14\15\1\113\10\15\6\0\1\15\2\0" +
			"\2\37\7\0\1\15\1\72\3\0\5\15\3\0\1\15" +
			"\3\0\1\114\7\15\1\115\14\15\6\0\1\15\2\0" +
			"\2\37\7\0\1\15\1\72\3\0\5\15\3\0\1\15" +
			"\3\0\2\15\1\116\22\15\6\0\1\15\2\0\2\37" +
			"\7\0\1\15\1\72\3\0\5\15\3\0\1\15\3\0" +
			"\4\15\1\117\7\15\1\120\10\15\6\0\1\15\2\0" +
			"\2\37\7\0\1\15\1\72\3\0\5\15\3\0\1\15" +
			"\3\0\5\15\1\121\17\15\6\0\1\15\2\0\2\37" +
			"\7\0\1\15\1\72\3\0\5\15\3\0\1\15\3\0" +
			"\13\15\1\122\1\123\10\15\6\0\1\15\2\0\2\37" +
			"\7\0\1\15\1\72\3\0\5\15\3\0\1\15\3\0" +
			"\14\15\1\124\10\15\6\0\1\15\2\0\2\37\7\0" +
			"\1\15\1\72\3\0\5\15\3\0\1\15\3\0\16\15" +
			"\1\125\6\15\6\0\1\15\2\0\2\37\7\0\1\15" +
			"\1\72\3\0\5\15\3\0\1\15\3\0\1\15\1\126" +
			"\2\15\1\127\1\130\5\15\1\131\11\15\6\0\1\15" +
			"\2\0\2\37\7\0\1\15\1\72\3\0\5\15\3\0" +
			"\1\15\3\0\25\37\6\0\1\37\2\0\2\37\7\0" +
			"\1\37\4\0\5\37\3\0\1\37\42\0\1\132\3\0" +
			"\1\133\66\0\1\134\74\0\1\135\14\0\1\136\54\0" +
			"\1\52\13\0\1\52\66\0\1\57\64\0\1\137\70\0" +
			"\1\56\42\0\1\140\26\0\1\57\12\0\2\60\5\0" +
			"\1\60\26\0\1\60\64\0\1\141\34\0\2\60\5\0" +
			"\1\60\27\0\1\60\70\0\1\142\27\0\2\60\5\0" +
			"\1\60\51\0\2\15\1\143\22\15\6\0\1\15\2\0" +
			"\2\37\7\0\1\15\1\72\3\0\5\15\3\0\1\15" +
			"\3\0\16\15\1\144\6\15\6\0\1\15\2\0\2\37" +
			"\7\0\1\15\1\72\3\0\5\15\3\0\1\15\3\0" +
			"\25\145\6\0\1\145\20\0\4\145\10\0\5\15\1\146" +
			"\17\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
			"\3\0\5\15\3\0\1\15\3\0\14\15\1\147\10\15" +
			"\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
			"\5\15\3\0\1\15\3\0\1\150\24\15\6\0\1\15" +
			"\2\0\2\37\7\0\1\15\1\72\3\0\5\15\3\0" +
			"\1\15\3\0\1\151\24\15\6\0\1\15\2\0\2\37" +
			"\7\0\1\15\1\72\3\0\5\15\3\0\1\15\3\0" +
			"\7\15\1\152\15\15\6\0\1\15\2\0\2\37\7\0" +
			"\1\15\1\72\3\0\5\15\3\0\1\15\3\0\20\15" +
			"\1\153\4\15\6\0\1\15\2\0\2\37\7\0\1\15" +
			"\1\72\3\0\5\15\3\0\1\15\3\0\22\15\1\154" +
			"\2\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
			"\3\0\5\15\3\0\1\15\3\0\16\15\1\155\6\15" +
			"\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
			"\5\15\3\0\1\15\3\0\21\15\1\156\3\15\6\0" +
			"\1\15\2\0\2\37\7\0\1\15\1\72\3\0\5\15" +
			"\3\0\1\15\3\0\1\15\1\157\23\15\6\0\1\15" +
			"\2\0\2\37\7\0\1\15\1\72\3\0\5\15\3\0" +
			"\1\15\3\0\12\15\1\160\12\15\6\0\1\15\2\0" +
			"\2\37\7\0\1\15\1\72\3\0\5\15\3\0\1\15" +
			"\3\0\7\15\1\161\15\15\6\0\1\15\2\0\2\37" +
			"\7\0\1\15\1\72\3\0\5\15\3\0\1\15\3\0" +
			"\20\15\1\162\4\15\6\0\1\15\2\0\2\37\7\0" +
			"\1\15\1\72\3\0\5\15\3\0\1\15\3\0\15\15" +
			"\1\163\7\15\6\0\1\15\2\0\2\37\7\0\1\15" +
			"\1\72\3\0\5\15\3\0\1\15\3\0\1\15\1\164" +
			"\23\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
			"\3\0\5\15\3\0\1\15\3\0\10\15\1\165\14\15" +
			"\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
			"\5\15\3\0\1\15\3\0\1\166\6\15\1\167\15\15" +
			"\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
			"\5\15\3\0\1\15\3\0\25\15\6\0\1\15\2\0" +
			"\2\37\7\0\1\15\1\72\3\0\1\15\1\170\3\15" +
			"\3\0\1\15\3\0\16\15\1\171\6\15\6\0\1\15" +
			"\2\0\2\37\7\0\1\15\1\72\3\0\5\15\3\0" +
			"\1\15\3\0\12\15\1\172\12\15\6\0\1\15\2\0" +
			"\2\37\7\0\1\15\1\72\3\0\5\15\3\0\1\15" +
			"\3\0\1\173\3\15\1\174\17\15\1\175\6\0\1\15" +
			"\2\0\2\37\7\0\1\15\1\72\3\0\5\15\3\0" +
			"\1\15\3\0\7\15\1\176\15\15\6\0\1\15\2\0" +
			"\2\37\7\0\1\15\1\72\3\0\5\15\3\0\1\15" +
			"\3\0\16\15\1\177\6\15\6\0\1\15\2\0\2\37" +
			"\7\0\1\15\1\72\3\0\5\15\3\0\1\15\3\0" +
			"\10\15\1\200\10\15\1\201\3\15\6\0\1\15\2\0" +
			"\2\37\7\0\1\15\1\72\3\0\5\15\3\0\1\15" +
			"\3\0\13\15\1\202\11\15\6\0\1\15\2\0\2\37" +
			"\7\0\1\15\1\72\3\0\5\15\3\0\1\15\3\0" +
			"\10\15\1\203\14\15\6\0\1\15\2\0\2\37\7\0" +
			"\1\15\1\72\3\0\5\15\3\0\1\15\3\0\12\15" +
			"\1\204\12\15\6\0\1\15\2\0\2\37\7\0\1\15" +
			"\1\72\3\0\5\15\3\0\1\15\3\0\4\15\1\205" +
			"\20\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
			"\3\0\5\15\3\0\1\15\3\0\10\15\1\206\14\15" +
			"\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
			"\5\15\3\0\1\15\2\0\63\132\1\207\1\210\3\132" +
			"\44\211\1\212\23\211\50\0\1\135\55\0\1\140\26\0" +
			"\1\136\2\0\63\137\1\213\4\137\65\0\1\214\3\0" +
			"\13\15\1\215\11\15\6\0\1\15\2\0\2\37\7\0" +
			"\1\15\1\72\3\0\5\15\3\0\1\15\3\0\25\145" +
			"\6\0\1\145\4\0\1\216\6\0\1\145\1\0\1\217" +
			"\2\0\5\145\3\0\1\145\3\0\12\15\1\220\12\15" +
			"\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
			"\5\15\3\0\1\15\3\0\7\15\1\221\15\15\6\0" +
			"\1\15\2\0\2\37\7\0\1\15\1\72\3\0\5\15" +
			"\3\0\1\15\3\0\5\15\1\222\17\15\6\0\1\15" +
			"\2\0\2\37\7\0\1\15\1\72\3\0\5\15\3\0" +
			"\1\15\3\0\12\15\1\223\12\15\6\0\1\15\2\0" +
			"\2\37\7\0\1\15\1\72\3\0\5\15\3\0\1\15" +
			"\3\0\7\15\1\224\15\15\6\0\1\15\2\0\2\37" +
			"\7\0\1\15\1\72\3\0\5\15\3\0\1\15\3\0" +
			"\21\15\1\225\3\15\6\0\1\15\2\0\2\37\7\0" +
			"\1\15\1\72\3\0\5\15\3\0\1\15\3\0\5\15" +
			"\1\226\17\15\6\0\1\15\2\0\2\37\7\0\1\15" +
			"\1\72\3\0\5\15\3\0\1\15\3\0\5\15\1\227" +
			"\17\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
			"\3\0\5\15\3\0\1\15\3\0\5\15\1\230\17\15" +
			"\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
			"\5\15\3\0\1\15\3\0\14\15\1\231\10\15\6\0" +
			"\1\15\2\0\2\37\7\0\1\15\1\72\3\0\5\15" +
			"\3\0\1\15\3\0\13\15\1\232\11\15\6\0\1\15" +
			"\2\0\2\37\7\0\1\15\1\72\3\0\5\15\3\0" +
			"\1\15\3\0\2\15\1\233\22\15\6\0\1\15\2\0" +
			"\2\37\7\0\1\15\1\72\3\0\5\15\3\0\1\15" +
			"\3\0\25\15\6\0\1\15\2\0\2\37\7\0\1\15" +
			"\1\72\3\0\1\234\4\15\3\0\1\15\3\0\7\15" +
			"\1\235\15\15\6\0\1\15\2\0\2\37\7\0\1\15" +
			"\1\72\3\0\5\15\3\0\1\15\3\0\5\15\1\236" +
			"\6\15\1\237\10\15\6\0\1\15\2\0\2\37\7\0" +
			"\1\15\1\72\3\0\5\15\3\0\1\15\3\0\5\15" +
			"\1\240\17\15\6\0\1\15\2\0\2\37\7\0\1\15" +
			"\1\72\3\0\5\15\3\0\1\15\3\0\4\15\1\241" +
			"\20\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
			"\3\0\5\15\3\0\1\15\3\0\14\15\1\242\10\15" +
			"\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
			"\5\15\3\0\1\15\3\0\20\15\1\243\4\15\6\0" +
			"\1\15\2\0\2\37\7\0\1\15\1\72\3\0\5\15" +
			"\3\0\1\15\3\0\1\15\1\244\23\15\6\0\1\15" +
			"\2\0\2\37\7\0\1\15\1\72\3\0\5\15\3\0" +
			"\1\15\3\0\3\15\1\245\21\15\6\0\1\15\2\0" +
			"\2\37\7\0\1\15\1\72\3\0\5\15\3\0\1\15" +
			"\3\0\11\15\1\246\13\15\6\0\1\15\2\0\2\37" +
			"\7\0\1\15\1\72\3\0\5\15\3\0\1\15\3\0" +
			"\20\15\1\247\4\15\6\0\1\15\2\0\2\37\7\0" +
			"\1\15\1\72\3\0\5\15\3\0\1\15\3\0\22\15" +
			"\1\250\2\15\6\0\1\15\2\0\2\37\7\0\1\15" +
			"\1\72\3\0\5\15\3\0\1\15\3\0\15\15\1\251" +
			"\7\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
			"\3\0\5\15\3\0\1\15\3\0\20\15\1\252\4\15" +
			"\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
			"\5\15\3\0\1\15\3\0\1\157\24\15\6\0\1\15" +
			"\2\0\2\37\7\0\1\15\1\72\3\0\5\15\3\0" +
			"\1\15\3\0\7\15\1\253\15\15\6\0\1\15\2\0" +
			"\2\37\7\0\1\15\1\72\3\0\5\15\3\0\1\15" +
			"\3\0\4\15\1\254\20\15\6\0\1\15\2\0\2\37" +
			"\7\0\1\15\1\72\3\0\5\15\3\0\1\15\2\0" +
			"\44\211\1\255\63\211\1\256\3\211\1\255\23\211\60\0" +
			"\1\257\4\0\1\214\3\0\10\15\1\260\14\15\6\0" +
			"\1\15\2\0\2\37\7\0\1\15\1\72\3\0\5\15" +
			"\3\0\1\15\3\0\25\261\6\0\1\261\15\0\1\216" +
			"\2\0\4\261\5\0\1\216\2\0\5\15\1\262\17\15" +
			"\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
			"\5\15\3\0\1\15\3\0\16\15\1\263\6\15\6\0" +
			"\1\15\2\0\2\37\7\0\1\15\1\72\3\0\5\15" +
			"\3\0\1\15\3\0\10\15\1\264\14\15\6\0\1\15" +
			"\2\0\2\37\7\0\1\15\1\72\3\0\5\15\3\0" +
			"\1\15\3\0\14\15\1\265\10\15\6\0\1\15\2\0" +
			"\2\37\7\0\1\15\1\72\3\0\5\15\3\0\1\15" +
			"\3\0\25\15\6\0\1\15\2\0\2\37\7\0\1\15" +
			"\1\72\3\0\2\15\1\266\2\15\3\0\1\15\3\0" +
			"\13\15\1\267\11\15\6\0\1\15\2\0\2\37\7\0" +
			"\1\15\1\72\3\0\5\15\3\0\1\15\3\0\6\15" +
			"\1\270\16\15\6\0\1\15\2\0\2\37\7\0\1\15" +
			"\1\72\3\0\5\15\3\0\1\15\3\0\16\15\1\271" +
			"\6\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
			"\3\0\5\15\3\0\1\15\3\0\10\15\1\272\14\15" +
			"\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
			"\5\15\3\0\1\15\3\0\12\15\1\273\12\15\6\0" +
			"\1\15\2\0\2\37\7\0\1\15\1\72\3\0\5\15" +
			"\3\0\1\15\3\0\4\15\1\274\20\15\6\0\1\15" +
			"\2\0\2\37\7\0\1\15\1\72\3\0\5\15\3\0" +
			"\1\15\3\0\25\15\6\0\1\15\2\0\2\37\7\0" +
			"\1\15\1\72\3\0\1\275\4\15\3\0\1\15\3\0" +
			"\20\15\1\276\4\15\6\0\1\15\2\0\2\37\7\0" +
			"\1\15\1\72\3\0\5\15\3\0\1\15\3\0\7\15" +
			"\1\277\15\15\6\0\1\15\2\0\2\37\7\0\1\15" +
			"\1\72\3\0\5\15\3\0\1\15\3\0\1\15\1\300" +
			"\23\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
			"\3\0\5\15\3\0\1\15\3\0\7\15\1\301\15\15" +
			"\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
			"\5\15\3\0\1\15\3\0\13\15\1\302\11\15\6\0" +
			"\1\15\2\0\2\37\7\0\1\15\1\72\3\0\5\15" +
			"\3\0\1\15\3\0\5\15\1\303\17\15\6\0\1\15" +
			"\2\0\2\37\7\0\1\15\1\72\3\0\5\15\3\0" +
			"\1\15\3\0\14\15\1\304\10\15\6\0\1\15\2\0" +
			"\2\37\7\0\1\15\1\72\3\0\5\15\3\0\1\15" +
			"\3\0\4\15\1\305\20\15\6\0\1\15\2\0\2\37" +
			"\7\0\1\15\1\72\3\0\5\15\3\0\1\15\3\0" +
			"\7\15\1\306\15\15\6\0\1\15\2\0\2\37\7\0" +
			"\1\15\1\72\3\0\5\15\3\0\1\15\3\0\1\15" +
			"\1\307\23\15\6\0\1\15\2\0\2\37\7\0\1\15" +
			"\1\72\3\0\5\15\3\0\1\15\3\0\12\15\1\310" +
			"\12\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
			"\3\0\5\15\3\0\1\15\2\0\40\211\1\207\3\211" +
			"\1\255\23\211\50\0\1\311\2\0\1\311\11\0\1\312" +
			"\3\0\25\15\6\0\1\15\2\0\2\37\7\0\1\15" +
			"\1\72\3\0\1\313\4\15\3\0\1\15\3\0\25\261" +
			"\6\0\1\261\13\0\1\261\1\0\1\217\2\0\5\261" +
			"\3\0\1\261\3\0\4\15\1\314\20\15\6\0\1\15" +
			"\2\0\2\37\7\0\1\15\1\72\3\0\5\15\3\0" +
			"\1\15\3\0\4\15\1\315\20\15\6\0\1\15\2\0" +
			"\2\37\7\0\1\15\1\72\3\0\5\15\3\0\1\15" +
			"\3\0\11\15\1\316\13\15\6\0\1\15\2\0\2\37" +
			"\7\0\1\15\1\72\3\0\5\15\3\0\1\15\3\0" +
			"\1\317\24\15\6\0\1\15\2\0\2\37\7\0\1\15" +
			"\1\72\3\0\5\15\3\0\1\15\3\0\10\15\1\320" +
			"\14\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
			"\3\0\5\15\3\0\1\15\3\0\4\15\1\321\20\15" +
			"\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
			"\5\15\3\0\1\15\3\0\5\15\1\322\17\15\6\0" +
			"\1\15\2\0\2\37\7\0\1\15\1\72\3\0\5\15" +
			"\3\0\1\15\3\0\5\15\1\323\17\15\6\0\1\15" +
			"\2\0\2\37\7\0\1\15\1\72\3\0\5\15\3\0" +
			"\1\15\3\0\10\15\1\324\14\15\6\0\1\15\2\0" +
			"\2\37\7\0\1\15\1\72\3\0\5\15\3\0\1\15" +
			"\3\0\5\15\1\325\17\15\6\0\1\15\2\0\2\37" +
			"\7\0\1\15\1\72\3\0\5\15\3\0\1\15\3\0" +
			"\7\15\1\326\15\15\6\0\1\15\2\0\2\37\7\0" +
			"\1\15\1\72\3\0\5\15\3\0\1\15\3\0\13\15" +
			"\1\327\11\15\6\0\1\15\2\0\2\37\7\0\1\15" +
			"\1\72\3\0\5\15\3\0\1\15\3\0\16\15\1\330" +
			"\6\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
			"\3\0\5\15\3\0\1\15\3\0\13\15\1\331\11\15" +
			"\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
			"\5\15\3\0\1\15\3\0\16\15\1\332\6\15\6\0" +
			"\1\15\2\0\2\37\7\0\1\15\1\72\3\0\5\15" +
			"\3\0\1\15\3\0\22\15\1\333\2\15\6\0\1\15" +
			"\2\0\2\37\7\0\1\15\1\72\3\0\5\15\3\0" +
			"\1\15\3\0\10\15\1\334\14\15\6\0\1\15\2\0" +
			"\2\37\7\0\1\15\1\72\3\0\5\15\3\0\1\15" +
			"\3\0\7\15\1\335\15\15\6\0\1\15\2\0\2\37" +
			"\7\0\1\15\1\72\3\0\5\15\3\0\1\15\3\0" +
			"\13\15\1\336\11\15\6\0\1\15\2\0\2\37\7\0" +
			"\1\15\1\72\3\0\5\15\3\0\1\15\3\0\16\15" +
			"\1\337\6\15\6\0\1\15\2\0\2\37\7\0\1\15" +
			"\1\72\3\0\5\15\3\0\1\15\67\0\1\312\3\0" +
			"\10\15\1\340\14\15\6\0\1\15\2\0\2\37\7\0" +
			"\1\15\1\72\3\0\5\15\3\0\1\15\3\0\20\15" +
			"\1\341\4\15\6\0\1\15\2\0\2\37\7\0\1\15" +
			"\1\72\3\0\5\15\3\0\1\15\3\0\1\342\24\15" +
			"\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
			"\5\15\3\0\1\15\3\0\5\15\1\343\17\15\6\0" +
			"\1\15\2\0\2\37\7\0\1\15\1\72\3\0\5\15" +
			"\3\0\1\15\3\0\4\15\1\344\20\15\6\0\1\15" +
			"\2\0\2\37\7\0\1\15\1\72\3\0\5\15\3\0" +
			"\1\15\3\0\2\15\1\345\22\15\6\0\1\15\2\0" +
			"\2\37\7\0\1\15\1\72\3\0\5\15\3\0\1\15" +
			"\3\0\7\15\1\346\15\15\6\0\1\15\2\0\2\37" +
			"\7\0\1\15\1\72\3\0\5\15\3\0\1\15\3\0" +
			"\16\15\1\347\6\15\6\0\1\15\2\0\2\37\7\0" +
			"\1\15\1\72\3\0\5\15\3\0\1\15\3\0\12\15" +
			"\1\350\12\15\6\0\1\15\2\0\2\37\7\0\1\15" +
			"\1\72\3\0\5\15\3\0\1\15\3\0\20\15\1\351" +
			"\4\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
			"\3\0\5\15\3\0\1\15\3\0\15\15\1\352\7\15" +
			"\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
			"\5\15\3\0\1\15\3\0\5\15\1\353\17\15\6\0" +
			"\1\15\2\0\2\37\7\0\1\15\1\72\3\0\5\15" +
			"\3\0\1\15\3\0\7\15\1\354\15\15\6\0\1\15" +
			"\2\0\2\37\7\0\1\15\1\72\3\0\5\15\3\0" +
			"\1\15\3\0\5\15\1\355\17\15\6\0\1\15\2\0" +
			"\2\37\7\0\1\15\1\72\3\0\5\15\3\0\1\15" +
			"\3\0\5\15\1\356\17\15\6\0\1\15\2\0\2\37" +
			"\7\0\1\15\1\72\3\0\5\15\3\0\1\15\3\0" +
			"\14\15\1\357\10\15\6\0\1\15\2\0\2\37\7\0" +
			"\1\15\1\72\3\0\5\15\3\0\1\15\3\0\5\15" +
			"\1\360\17\15\6\0\1\15\2\0\2\37\7\0\1\15" +
			"\1\72\3\0\5\15\3\0\1\15\3\0\7\15\1\361" +
			"\15\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
			"\3\0\5\15\3\0\1\15\3\0\11\15\1\362\13\15" +
			"\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
			"\5\15\3\0\1\15\3\0\12\15\1\363\12\15\6\0" +
			"\1\15\2\0\2\37\7\0\1\15\1\72\3\0\5\15" +
			"\3\0\1\15\3\0\12\15\1\364\12\15\6\0\1\15" +
			"\2\0\2\37\7\0\1\15\1\72\3\0\5\15\3\0" +
			"\1\15\3\0\5\15\1\365\17\15\6\0\1\15\2\0" +
			"\2\37\7\0\1\15\1\72\3\0\5\15\3\0\1\15" +
			"\3\0\5\15\1\366\17\15\6\0\1\15\2\0\2\37" +
			"\7\0\1\15\1\72\3\0\5\15\3\0\1\15\3\0" +
			"\5\15\1\367\17\15\6\0\1\15\2\0\2\37\7\0" +
			"\1\15\1\72\3\0\5\15\3\0\1\15\3\0\11\15" +
			"\1\370\13\15\6\0\1\15\2\0\2\37\7\0\1\15" +
			"\1\72\3\0\5\15\3\0\1\15\3\0\10\15\1\371" +
			"\14\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
			"\3\0\5\15\3\0\1\15\3\0\10\15\1\372\14\15" +
			"\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
			"\5\15\3\0\1\15\3\0\5\15\1\373\17\15\6\0" +
			"\1\15\2\0\2\37\7\0\1\15\1\72\3\0\5\15" +
			"\3\0\1\15\3\0\7\15\1\374\15\15\6\0\1\15" +
			"\2\0\2\37\7\0\1\15\1\72\3\0\5\15\3\0" +
			"\1\15\2\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[10584];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String[] ZZ_ERROR_MSG = {
			"Unknown internal scanner error",
			"Error: could not match input",
			"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 =
			"\5\0\1\11\22\1\6\11\1\1\1\11\1\1\2\11" +
			"\1\1\4\11\3\1\1\11\3\1\2\11\2\1\1\11" +
			"\5\1\1\0\37\1\2\0\3\1\2\0\4\1\1\0" +
			"\41\1\1\11\1\1\2\0\1\11\2\1\1\0\1\11" +
			"\35\1\1\0\1\1\1\0\1\1\1\0\27\1\1\0" +
			"\63\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[252];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * the input device
	 */
	private java.io.Reader zzReader;

	/**
	 * the current state of the DFA
	 */
	private int zzState;

	/**
	 * the current lexical state
	 */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is
	 * the source of the yytext() string
	 */
	private CharSequence zzBuffer = "";

	/**
	 * the textposition at the last accepting state
	 */
	private int zzMarkedPos;

	/**
	 * the current text position in the buffer
	 */
	private int zzCurrentPos;

	/**
	 * startRead marks the beginning of the yytext() string in the buffer
	 */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read
	 * from input
	 */
	private int zzEndRead;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/**
	 * zzAtEOF == true <=> the scanner is at the EOF
	 */
	private boolean zzAtEOF;

	/**
	 * denotes if the user-EOF-code has already been executed
	 */
	private boolean zzEOFDone;

	/* user code: */
	private Set<String> identifiers;
	private Project project;
	private static final String DSL = "dsl";
	private String dsl = null;

	public TaraHighlighterLex(java.io.Reader reader, Project project) {
		this.zzReader = reader;
		this.project = project;
	}

	private IElementType evaluateIdentifier() {
		String identifier = yytext().toString();
		if (identifiers == null) return TaraTypes.IDENTIFIER_KEY;
		return identifiers.contains(identifier) ? TaraTypes.METAIDENTIFIER_KEY : TaraTypes.IDENTIFIER_KEY;
	}

	private void loadHeritage() {
		if (identifiers != null) return;
		if (dsl == null) {
			String source = zzBuffer.toString().trim();
			int nl = source.indexOf('\n');
			String dslLine = nl > 0 ? source.substring(0, nl).trim() : source;
			if (!dslLine.startsWith(DSL) || dslLine.split(DSL).length < 2) return;
			dsl = dslLine.split(DSL)[1].trim();
		}
		identifiers = new HashSet<>();
		Language heritage = LanguageManager.getLanguage(project, dsl);
		if (heritage != null) Collections.addAll(identifiers, heritage.lexicon());
	}


	/**
	 * Creates a new scanner
	 *
	 * @param in the java.io.Reader to read input from.
	 */
	TaraHighlighterLex(java.io.Reader in) {
		this.zzReader = in;
	}


	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		int size = 0;
		for (int i = 0, length = packed.length(); i < length; i += 2) {
			size += packed.charAt(i);
		}
		char[] map = new char[size];
		int i = 0;  /* index in packed string  */
		int j = 0;  /* index in unpacked array */
		while (i < packed.length()) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do map[j++] = value; while (--count > 0);
		}
		return map;
	}

	public final int getTokenStart() {
		return zzStartRead;
	}

	public final int getTokenEnd() {
		return getTokenStart() + yylength();
	}

	public void reset(CharSequence buffer, int start, int end, int initialState) {
		zzBuffer = buffer;
		zzCurrentPos = zzMarkedPos = zzStartRead = start;
		zzAtEOF = false;
		zzAtBOL = true;
		zzEndRead = end;
		yybegin(initialState);
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return {@code false}, iff there was new input.
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {
		return true;
	}


	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final CharSequence yytext() {
		return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
	}


	/**
	 * Returns the character at position {@code pos} from the
	 * matched text.
	 * <p>
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch.
	 *            A value from 0 to yylength()-1.
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer.charAt(zzStartRead + pos);
	}


	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}


	/**
	 * Reports an error that occurred while scanning.
	 * <p>
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 * <p>
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * <p>
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again.
	 *               This number must not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}


	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	public IElementType advance() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		CharSequence zzBufferL = zzBuffer;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ((zzAttributes & 1) == 1) {
				zzAction = zzState;
			}


			zzForAction:
			{
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
						zzCurrentPosL += Character.charCount(zzInput);
					} else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
				zzAtEOF = true;
				return null;
			} else {
				switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
					case 1: {
						return TokenType.BAD_CHARACTER;
					}
					// fall through
					case 69:
						break;
					case 2: {
						return evaluateIdentifier();
					}
					// fall through
					case 70:
						break;
					case 3: {
						return TaraTypes.LEFT_PARENTHESIS;
					}
					// fall through
					case 71:
						break;
					case 4: {
						return TaraTypes.RIGHT_PARENTHESIS;
					}
					// fall through
					case 72:
						break;
					case 5: {
						return TaraTypes.LEFT_SQUARE;
					}
					// fall through
					case 73:
						break;
					case 6: {
						return TaraTypes.RIGHT_SQUARE;
					}
					// fall through
					case 74:
						break;
					case 7: {
						return TaraTypes.LEFT_CURLY;
					}
					// fall through
					case 75:
						break;
					case 8: {
						return TaraTypes.RIGHT_CURLY;
					}
					// fall through
					case 76:
						break;
					case 9: {
						return TaraTypes.METRIC_VALUE_KEY;
					}
					// fall through
					case 77:
						break;
					case 10: {
						return TaraTypes.DOT;
					}
					// fall through
					case 78:
						break;
					case 11: {
						return TaraTypes.COMMA;
					}
					// fall through
					case 79:
						break;
					case 12: {
						return TaraTypes.COLON;
					}
					// fall through
					case 80:
						break;
					case 13: {
						return TaraTypes.EQUALS;
					}
					// fall through
					case 81:
						break;
					case 14: {
						return TaraTypes.STAR;
					}
					// fall through
					case 82:
						break;
					case 15: {
						return TaraTypes.DSL;
					}
					// fall through
					case 83:
						break;
					case 16: {
						yybegin(QUOTED);
						return TaraTypes.QUOTE_BEGIN;
					}
					// fall through
					case 84:
						break;
					case 17: {
						yybegin(EXPRESSION);
						return TaraTypes.EXPRESSION_BEGIN;
					}
					// fall through
					case 85:
						break;
					case 18: {
						return TokenType.WHITE_SPACE;
					}
					// fall through
					case 86:
						break;
					case 19: {
						return TaraTypes.PLUS;
					}
					// fall through
					case 87:
						break;
					case 20: {
						return TaraTypes.AT;
					}
					// fall through
					case 88:
						break;
					case 21: {
						return TaraTypes.NATURAL_VALUE_KEY;
					}
					// fall through
					case 89:
						break;
					case 22: {
						return TaraTypes.CHARACTER;
					}
					// fall through
					case 90:
						break;
					case 23: {
						yybegin(YYINITIAL);
						return TaraTypes.QUOTE_END;
					}
					// fall through
					case 91:
						break;
					case 24: {
						yybegin(YYINITIAL);
						return TaraTypes.EXPRESSION_END;
					}
					// fall through
					case 92:
						break;
					case 25: {
						return TaraTypes.AS;
					}
					// fall through
					case 93:
						break;
					case 26: {
						return TaraTypes.IS;
					}
					// fall through
					case 94:
						break;
					case 27: {
						yybegin(MULTILINE);
						return TaraTypes.QUOTE_BEGIN;
					}
					// fall through
					case 95:
						break;
					case 28: {
						yybegin(EXPRESSION_MULTILINE);
						return TaraTypes.EXPRESSION_BEGIN;
					}
					// fall through
					case 96:
						break;
					case 29: {
						return TaraTypes.NEGATIVE_VALUE_KEY;
					}
					// fall through
					case 97:
						break;
					case 30: {
						return TaraTypes.SUB;
					}
					// fall through
					case 98:
						break;
					case 31: {
						return TaraTypes.USE;
					}
					// fall through
					case 99:
						break;
					case 32: {
						return TaraTypes.HAS;
					}
					// fall through
					case 100:
						break;
					case 33: {
						loadHeritage();
						return TaraTypes.DSL;
					}
					// fall through
					case 101:
						break;
					case 34: {
						return TaraTypes.VAR;
					}
					// fall through
					case 102:
						break;
					case 35: {
						return TaraTypes.COMMENT;
					}
					// fall through
					case 103:
						break;
					case 36: {
						yypushback(1);
						return TaraTypes.DOC_LINE;
					}
					// fall through
					case 104:
						break;
					case 37: {
						return TaraTypes.DOUBLE_VALUE_KEY;
					}
					// fall through
					case 105:
						break;
					case 38: {
						return TaraTypes.CLASS_TYPE;
					}
					// fall through
					case 106:
						break;
					case 39: {
						return TaraTypes.TIME_TYPE;
					}
					// fall through
					case 107:
						break;
					case 40: {
						return TaraTypes.BOOLEAN_VALUE_KEY;
					}
					// fall through
					case 108:
						break;
					case 41: {
						return TaraTypes.LONG_TYPE;
					}
					// fall through
					case 109:
						break;
					case 42: {
						return TaraTypes.INTO;
					}
					// fall through
					case 110:
						break;
					case 43: {
						return TaraTypes.WITH;
					}
					// fall through
					case 111:
						break;
					case 44: {
						return TaraTypes.WORD_TYPE;
					}
					// fall through
					case 112:
						break;
					case 45: {
						return TaraTypes.EMPTY_REF;
					}
					// fall through
					case 113:
						break;
					case 46: {
						return TaraTypes.DATE_TYPE;
					}
					// fall through
					case 114:
						break;
					case 47: {
						return TaraTypes.FINAL;
					}
					// fall through
					case 115:
						break;
					case 48: {
						return TaraTypes.STRING_TYPE;
					}
					// fall through
					case 116:
						break;
					case 49: {
						return TaraTypes.DIVINE;
					}
					// fall through
					case 117:
						break;
					case 50: {
						return TaraTypes.DOUBLE_TYPE;
					}
					// fall through
					case 118:
						break;
					case 51: {
						return TaraTypes.OBJECT_TYPE;
					}
					// fall through
					case 119:
						break;
					case 52: {
						return TaraTypes.BOOLEAN_TYPE;
					}
					// fall through
					case 120:
						break;
					case 53: {
						return TaraTypes.EXTENDS;
					}
					// fall through
					case 121:
						break;
					case 54: {
						return TaraTypes.INSTANT_TYPE;
					}
					// fall through
					case 122:
						break;
					case 55: {
						return TaraTypes.INT_TYPE;
					}
					// fall through
					case 123:
						break;
					case 56: {
						return TaraTypes.CONCEPT;
					}
					// fall through
					case 124:
						break;
					case 57: {
						return TaraTypes.PRIVATE;
					}
					// fall through
					case 125:
						break;
					case 58: {
						return TaraTypes.FEATURE;
					}
					// fall through
					case 126:
						break;
					case 59: {
						return TaraTypes.ABSTRACT;
					}
					// fall through
					case 127:
						break;
					case 60: {
						return TaraTypes.ENCLOSED;
					}
					// fall through
					case 128:
						break;
					case 61: {
						return TaraTypes.TERMINAL;
					}
					// fall through
					case 129:
						break;
					case 62: {
						return TaraTypes.VOLATILE;
					}
					// fall through
					case 130:
						break;
					case 63: {
						return TaraTypes.RESOURCE_TYPE;
					}
					// fall through
					case 131:
						break;
					case 64: {
						return TaraTypes.REACTIVE;
					}
					// fall through
					case 132:
						break;
					case 65: {
						return TaraTypes.REQUIRED;
					}
					// fall through
					case 133:
						break;
					case 66: {
						return TaraTypes.FUNCTION_TYPE;
					}
					// fall through
					case 134:
						break;
					case 67: {
						return TaraTypes.DECORABLE;
					}
					// fall through
					case 135:
						break;
					case 68: {
						return TaraTypes.COMPONENT;
					}
					// fall through
					case 136:
						break;
					default:
						zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}


}
