/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package io.intino.plugin.archetype.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import io.intino.plugin.archetype.lang.psi.ArchetypeTypes;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>archetype.flex</tt>
 */
class ArchetypeLexer implements FlexLexer {

	/**
	 * This character denotes the end of file
	 */
	public static final int YYEOF = -1;

	/**
	 * initial size of the lookahead buffer
	 */
	private static final int ZZ_BUFFERSIZE = 16384;

	/**
	 * lexical states
	 */
	public static final int YYINITIAL = 0;
	public static final int QUOTED = 2;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 * at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
			0, 0, 1, 1
	};

	/**
	 * Translates characters to character classes
	 * Chosen bits are [12, 6, 3]
	 * Total runtime size is 17328 bytes
	 */
	public static int ZZ_CMAP(int ch) {
		return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 9] << 6) | ((ch >> 3) & 0x3f)] << 3) | (ch & 0x7)];
	}

	/* The ZZ_CMAP_Z table has 2176 entries */
	static final char ZZ_CMAP_Z[] = zzUnpackCMap(
			"\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1" +
					"\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33" +
					"\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1" +
					"\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61" +
					"\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67" +
					"\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2" +
					"\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21" +
					"\1\25\1\107\u0582\21\1\110\u017f\21");

	/* The ZZ_CMAP_Y table has 4672 entries */
	static final char ZZ_CMAP_Y[] = zzUnpackCMap(
			"\1\0\1\1\1\0\1\2\1\3\1\4\1\0\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14\4\0\1\15" +
					"\1\16\1\17\1\20\2\7\1\21\3\7\1\21\71\7\1\22\1\7\1\23\1\24\1\25\1\26\2\24\16" +
					"\0\1\27\1\30\1\31\1\32\2\7\1\33\11\7\1\34\21\7\1\35\1\36\24\7\1\6\3\7\1\21" +
					"\1\37\1\6\4\7\1\40\1\41\4\0\1\42\1\43\1\24\3\7\2\44\1\24\1\45\1\46\1\0\1\47" +
					"\5\7\1\50\3\0\1\51\1\52\13\7\1\53\1\42\1\54\1\55\1\0\1\56\1\24\1\57\1\60\3" +
					"\7\3\0\1\61\12\7\1\62\1\0\1\63\1\24\1\0\1\64\3\7\1\50\1\65\1\20\2\7\1\62\1" +
					"\66\1\67\1\70\2\24\3\7\1\71\1\7\1\44\6\24\2\7\1\27\1\72\2\24\1\73\5\0\1\74" +
					"\6\7\1\75\2\0\1\76\1\7\1\77\1\0\1\6\1\7\1\100\1\101\1\102\2\7\1\103\1\104" +
					"\1\105\1\106\1\107\1\57\1\110\1\77\1\0\1\111\1\112\1\113\1\114\1\102\2\7\1" +
					"\103\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\0\1\124\1\24\1\113\1\34\1" +
					"\33\2\7\1\103\1\125\1\105\1\42\1\126\1\127\1\24\1\77\1\0\1\37\1\130\1\113" +
					"\1\101\1\102\2\7\1\103\1\125\1\105\1\106\1\120\1\123\1\110\1\77\1\0\1\37\1" +
					"\24\1\131\1\132\1\133\1\134\1\112\1\132\1\7\1\135\1\136\1\137\1\140\1\24\1" +
					"\123\1\0\1\24\1\37\1\141\1\27\1\103\2\7\1\103\1\7\1\142\1\143\1\137\1\144" +
					"\1\44\1\77\1\0\2\24\1\100\1\27\1\103\2\7\1\103\1\145\1\105\1\143\1\137\1\144" +
					"\1\31\1\77\1\0\1\146\1\24\1\141\1\27\1\103\4\7\1\147\1\143\1\150\1\151\1\40" +
					"\1\77\1\0\1\24\1\36\1\152\1\7\1\21\1\36\2\7\1\33\1\153\1\21\1\154\1\155\1" +
					"\0\1\123\1\0\1\156\1\24\1\6\5\7\1\157\1\160\1\161\1\162\1\0\1\5\4\24\1\163" +
					"\1\164\1\165\1\6\1\166\1\167\1\157\1\170\1\171\1\45\1\0\1\172\4\24\1\127\2" +
					"\24\1\5\1\0\1\5\1\173\1\174\1\7\1\6\3\7\1\25\1\41\1\0\1\143\1\175\1\0\1\41" +
					"\3\0\1\176\1\177\7\24\5\7\1\50\1\0\1\200\1\0\1\5\1\62\1\201\1\202\1\203\1" +
					"\204\1\7\1\205\1\206\1\0\1\45\4\7\1\34\1\17\5\7\1\207\51\7\1\133\1\21\1\133" +
					"\5\7\1\133\4\7\1\133\1\21\1\133\1\7\1\21\7\7\1\133\10\7\1\210\4\24\2\7\2\24" +
					"\12\7\2\72\1\6\114\7\1\101\2\7\1\6\2\7\1\44\11\7\1\132\1\7\1\127\1\7\1\27" +
					"\1\211\1\24\2\7\1\211\1\24\2\7\1\212\1\24\1\7\1\27\1\213\1\24\6\7\1\214\3" +
					"\0\1\215\1\216\1\0\1\5\3\24\1\217\1\0\1\5\13\7\1\24\1\220\4\7\1\221\10\7\1" +
					"\72\1\24\3\7\1\21\1\0\1\2\1\0\1\2\1\123\1\0\3\7\1\72\1\25\1\24\5\7\1\111\3" +
					"\7\1\23\1\0\1\5\4\24\2\7\1\161\1\2\6\7\1\175\1\162\3\0\1\106\1\0\1\5\1\0\1" +
					"\5\1\40\1\24\1\0\1\45\10\24\1\222\5\7\1\214\1\0\1\222\1\111\1\0\1\5\1\24\1" +
					"\223\1\2\1\24\1\224\3\7\1\76\1\203\1\0\1\64\4\7\1\62\1\0\1\2\1\24\4\7\1\214" +
					"\2\0\1\24\1\0\1\225\1\0\1\64\3\7\1\72\1\7\1\127\10\24\1\226\2\0\1\227\1\230" +
					"\1\5\30\7\7\0\1\231\42\7\2\72\4\7\2\72\1\7\1\232\3\7\1\72\6\7\1\27\1\171\1" +
					"\233\1\25\1\234\1\111\1\7\1\25\1\233\1\25\1\24\1\223\3\24\1\235\1\24\1\40" +
					"\1\127\1\24\1\236\1\24\1\143\1\0\1\37\1\40\2\24\1\7\1\25\4\7\2\24\1\0\1\176" +
					"\1\237\1\0\1\240\1\24\1\241\1\36\1\153\1\242\1\26\1\243\1\7\1\244\1\245\1" +
					"\246\2\24\5\7\1\127\116\24\5\7\1\21\5\7\1\21\20\7\1\25\1\247\1\250\1\24\4" +
					"\7\1\34\1\17\7\7\1\40\1\24\1\57\2\7\1\21\1\24\10\21\4\0\5\24\1\40\72\24\1" +
					"\245\3\24\1\6\1\205\1\242\1\25\1\6\11\7\1\21\1\251\1\6\12\7\1\207\1\245\4" +
					"\7\1\21\1\6\12\7\1\21\2\24\3\7\1\44\6\24\170\7\1\72\11\24\75\7\1\44\2\24\21" +
					"\7\1\25\10\24\5\7\1\72\41\7\1\25\2\7\1\0\1\250\2\24\5\7\1\161\1\73\1\252\3" +
					"\7\1\62\12\7\1\5\3\24\1\40\1\7\1\36\14\7\1\102\3\7\1\21\1\7\7\24\1\40\1\7" +
					"\1\253\1\254\2\7\1\50\2\24\1\127\6\7\1\111\1\24\1\64\5\7\1\214\1\0\1\45\1" +
					"\24\1\0\1\5\2\0\1\64\1\255\1\0\1\64\2\7\1\62\1\45\2\7\1\161\1\0\1\2\1\24\3" +
					"\7\1\25\1\74\5\7\1\50\1\0\1\240\1\40\1\0\1\5\1\256\1\7\1\0\1\257\5\7\1\76" +
					"\1\162\1\24\1\254\1\260\1\0\1\5\2\7\1\21\1\261\6\7\1\202\1\262\1\221\2\24" +
					"\1\263\1\7\1\50\1\264\1\24\3\265\1\24\2\21\5\7\1\207\1\72\1\24\16\7\1\50\1" +
					"\266\1\0\1\5\64\7\1\111\1\24\2\7\1\21\1\267\5\7\1\111\40\24\55\7\1\72\15\7" +
					"\1\23\4\24\1\21\1\24\1\267\1\270\1\7\1\103\1\21\1\171\1\271\15\7\1\23\3\24" +
					"\1\267\54\7\1\72\2\24\10\7\1\36\6\7\5\24\1\7\1\25\2\0\2\24\2\0\1\112\2\24" +
					"\1\245\3\24\1\37\1\27\20\7\1\272\1\236\1\24\1\0\1\5\1\6\2\7\1\114\1\6\2\7" +
					"\1\44\1\273\12\7\1\21\3\36\1\274\1\275\2\24\1\276\1\7\1\145\2\7\1\21\2\7\1" +
					"\277\1\7\1\72\1\7\1\72\4\24\17\7\1\44\10\24\6\7\1\25\20\24\1\300\20\24\3\7" +
					"\1\25\6\7\1\127\1\24\1\240\3\24\4\7\1\24\1\245\3\7\1\44\4\7\1\62\1\301\3\7" +
					"\1\72\4\7\1\111\1\7\1\242\5\24\23\7\1\72\1\0\1\5\4\7\1\111\4\7\1\111\5\7\1" +
					"\24\6\7\1\111\23\24\46\7\1\21\1\24\2\7\1\72\1\24\1\7\23\24\1\72\1\103\4\7" +
					"\1\34\1\302\2\7\1\72\1\24\2\7\1\21\1\24\3\7\1\21\10\24\2\7\1\303\1\24\2\7" +
					"\1\72\1\24\3\7\1\23\10\24\7\7\1\273\10\24\1\304\1\73\1\145\1\6\2\7\1\111\1" +
					"\117\4\24\3\7\1\25\3\7\1\25\4\24\1\7\1\6\2\7\1\305\3\24\6\7\1\72\1\24\2\7" +
					"\1\72\1\24\2\7\1\44\1\24\2\7\1\23\15\24\11\7\1\127\6\24\6\7\1\44\1\24\6\7" +
					"\1\44\41\24\1\224\6\7\1\0\1\162\3\24\1\123\1\0\1\24\1\57\1\224\5\7\1\0\1\306" +
					"\2\24\3\7\1\127\1\0\1\5\1\224\3\7\1\161\1\0\1\143\1\0\2\24\4\7\1\307\1\24" +
					"\1\224\5\7\1\50\1\0\1\310\1\311\1\0\1\312\4\24\2\7\1\33\2\7\1\214\1\0\1\177" +
					"\10\24\1\21\1\243\1\7\1\34\1\7\1\127\5\7\1\161\1\0\1\301\1\0\1\5\1\141\1\101" +
					"\1\102\2\7\1\103\1\125\1\105\1\106\1\120\1\140\1\245\1\77\2\176\21\24\6\7" +
					"\1\175\1\0\1\200\1\44\1\0\1\5\4\24\6\7\2\0\1\313\1\24\1\0\1\5\24\24\5\7\1" +
					"\161\1\45\1\0\1\240\2\24\1\260\4\24\6\7\2\0\1\314\1\24\1\0\1\5\4\24\5\7\1" +
					"\50\1\0\1\24\1\0\1\5\6\24\3\7\1\315\1\0\1\2\1\0\1\5\54\24\10\7\1\0\1\5\1\24" +
					"\1\40\40\24\1\76\1\224\4\7\1\50\1\316\1\57\1\24\1\76\1\74\4\7\1\234\1\205" +
					"\1\0\1\5\4\24\7\7\1\127\40\24\1\7\1\103\3\7\1\161\1\162\1\0\1\127\1\24\1\0" +
					"\1\5\2\24\1\36\3\7\1\317\2\0\1\41\1\162\11\24\1\21\1\33\4\7\1\320\1\321\1" +
					"\206\1\24\1\0\1\5\24\24\63\7\1\23\14\24\15\7\1\21\2\24\30\7\1\111\27\24\5" +
					"\7\1\21\72\24\10\7\1\21\67\24\7\7\1\127\3\7\1\21\1\0\1\5\14\24\3\7\1\72\1" +
					"\176\1\24\6\7\1\162\1\24\1\111\1\24\1\0\1\5\1\267\2\7\1\245\2\7\56\24\10\7" +
					"\1\25\1\24\1\76\4\0\1\162\1\24\1\57\1\224\1\7\10\24\1\23\3\24\75\7\1\25\2" +
					"\24\36\7\1\44\41\24\43\7\1\21\12\24\61\7\1\111\40\24\15\7\1\44\1\7\1\25\1" +
					"\7\1\127\1\7\1\322\1\2\127\24\1\323\1\324\2\0\1\325\1\2\3\24\1\326\22\24\1" +
					"\311\67\24\12\7\1\27\10\7\1\27\1\327\1\330\1\7\1\331\1\145\7\7\1\34\1\332" +
					"\2\27\3\7\1\333\1\171\1\36\1\103\51\7\1\72\3\7\1\103\2\7\1\207\3\7\1\207\2" +
					"\7\1\27\3\7\1\27\2\7\1\21\3\7\1\21\3\7\1\103\3\7\1\103\2\7\1\207\1\334\14" +
					"\0\1\162\1\223\5\0\1\176\1\300\1\24\1\335\2\24\1\223\1\41\1\0\52\24\1\162" +
					"\2\0\1\336\1\337\1\301\72\24\30\7\1\25\1\24\1\162\5\24\10\7\1\214\1\301\1" +
					"\0\1\5\24\24\1\145\3\7\1\163\1\6\1\207\1\340\1\241\1\341\1\163\1\232\1\163" +
					"\2\207\1\122\1\7\1\33\1\7\1\111\1\342\1\33\1\7\1\111\50\24\32\7\1\21\5\24" +
					"\106\7\1\25\1\24\33\7\1\72\120\7\1\23\1\24\146\7\1\127\3\24\3\7\1\72\74\24" +
					"\1\121\3\24\14\0\20\24\36\0\2\24");

	/* The ZZ_CMAP_A table has 1816 entries */
	static final char ZZ_CMAP_A[] = zzUnpackCMap(
			"\11\40\1\24\1\36\2\0\1\23\6\40\4\0\1\24\1\0\1\34\1\35\1\37\3\0\1\25\1\26\1" +
					"\33\1\32\1\0\1\31\2\0\2\40\7\0\22\37\1\27\1\41\1\30\1\0\1\37\1\0\1\20\1\37" +
					"\1\15\1\12\1\11\1\37\1\21\1\5\1\1\2\37\1\10\1\17\1\2\1\13\1\7\1\37\1\14\1" +
					"\6\1\4\1\16\1\37\1\3\1\22\2\37\1\0\1\23\2\0\1\40\2\0\4\37\4\0\1\37\2\0\1\40" +
					"\7\0\1\37\4\0\1\37\5\0\7\37\1\0\2\37\4\0\4\37\16\0\5\37\7\0\1\37\1\0\1\37" +
					"\1\0\5\37\1\0\2\37\2\0\4\37\1\0\1\37\6\0\1\37\1\0\3\37\1\0\1\37\1\0\4\37\1" +
					"\0\13\37\1\0\3\37\1\0\5\40\2\0\6\37\1\0\1\37\15\0\1\37\1\0\15\40\1\0\1\40" +
					"\1\0\2\40\1\0\2\40\1\0\1\40\3\37\5\0\6\40\5\0\1\37\4\0\3\40\1\0\1\40\3\0\3" +
					"\37\7\40\4\0\2\37\1\40\13\37\1\0\1\37\7\40\2\37\2\40\1\0\4\40\2\37\2\40\3" +
					"\37\2\0\1\37\7\0\1\40\1\37\1\40\6\37\3\40\2\0\11\37\3\40\1\37\6\0\2\40\6\37" +
					"\4\40\2\37\2\0\2\40\1\37\11\40\1\37\3\40\1\37\5\40\2\0\1\37\3\40\4\0\6\37" +
					"\6\0\10\40\6\37\3\40\1\37\2\40\1\37\7\40\2\37\2\40\2\0\2\40\1\37\3\40\1\0" +
					"\10\37\2\0\2\37\2\0\6\37\1\0\7\37\1\0\1\37\3\0\4\37\2\0\1\40\1\37\7\40\2\0" +
					"\2\40\2\0\3\40\1\37\5\0\2\37\1\0\5\37\7\0\2\37\4\0\3\40\1\0\6\37\4\0\2\37" +
					"\1\0\2\37\1\0\2\37\1\0\2\37\2\0\1\40\1\0\5\40\4\0\2\40\2\0\3\40\3\0\1\40\7" +
					"\0\4\37\1\0\1\37\7\0\4\40\3\37\1\40\2\0\1\37\1\0\2\37\1\0\3\37\2\40\1\0\3" +
					"\40\2\0\1\37\10\0\1\37\6\40\2\0\1\40\1\37\1\0\6\37\3\0\3\37\1\0\4\37\3\0\2" +
					"\37\1\0\1\37\1\0\4\37\4\0\5\40\3\0\3\40\1\0\4\40\2\0\1\37\6\0\5\40\1\0\5\37" +
					"\3\0\1\37\7\40\1\0\2\40\5\0\2\40\1\0\4\37\1\0\3\37\1\0\2\37\5\0\3\37\2\40" +
					"\1\37\3\40\1\0\4\40\1\37\5\0\3\37\1\40\2\0\2\40\1\0\7\37\1\0\1\37\4\0\1\40" +
					"\4\0\6\40\1\0\1\40\3\0\2\40\4\0\1\37\1\40\2\37\7\40\4\0\10\37\10\40\2\0\2" +
					"\37\1\0\1\37\2\0\2\37\1\0\1\37\2\0\1\37\6\0\4\37\1\0\3\37\1\0\1\37\1\0\1\37" +
					"\2\0\2\37\1\0\3\37\2\40\1\0\2\40\1\37\2\0\5\37\1\0\1\37\1\0\2\40\2\0\4\37" +
					"\5\0\1\40\1\0\1\40\1\0\1\40\4\0\2\40\5\37\10\40\11\0\1\40\1\0\7\40\1\37\2" +
					"\40\4\37\3\40\1\37\3\40\2\37\7\40\3\37\4\40\5\37\14\40\1\37\1\40\3\37\1\0" +
					"\7\37\2\0\3\40\2\37\3\40\3\0\2\37\2\40\4\0\1\37\1\0\2\40\4\0\4\37\10\40\3" +
					"\0\1\37\3\0\2\37\1\40\5\0\4\40\1\0\5\37\2\40\2\37\1\40\1\37\5\0\5\40\3\37" +
					"\3\0\10\40\5\37\2\40\3\0\3\37\3\40\1\0\5\40\4\37\1\40\4\37\3\40\2\37\3\40" +
					"\1\0\5\40\1\0\1\37\1\0\1\37\1\0\1\37\1\0\1\37\2\0\3\37\1\0\6\37\2\0\2\37\2" +
					"\0\5\40\5\0\1\37\4\0\1\40\3\0\4\40\11\0\1\37\4\0\1\37\1\0\5\37\2\0\1\37\1" +
					"\0\4\37\1\0\3\37\2\0\4\37\5\0\5\37\4\0\1\37\4\0\4\37\3\40\2\37\5\0\2\40\2" +
					"\0\3\37\6\40\1\0\3\37\1\40\3\37\1\40\4\37\1\40\4\37\3\0\1\37\1\0\1\37\2\0" +
					"\5\37\1\40\2\37\2\40\5\37\1\0\4\37\2\40\4\0\1\37\3\40\2\37\1\40\5\37\2\40" +
					"\3\0\3\37\4\0\3\37\2\40\2\0\6\37\1\0\3\40\1\0\2\40\5\0\5\37\5\0\1\37\1\40" +
					"\3\37\1\0\2\37\1\0\7\37\2\0\1\40\6\0\2\37\2\0\3\37\3\0\2\37\3\0\2\37\2\0\3" +
					"\40\4\0\3\37\1\0\2\37\1\0\1\37\5\0\1\40\2\0\3\40\5\0\1\37\3\0\1\37\2\0\4\37" +
					"\1\0\2\37\2\0\1\37\3\40\1\0\2\40\1\0\5\37\2\40\1\0\3\40\2\0\1\40\2\0\3\37" +
					"\1\40\2\0\1\37\1\0\1\40\4\37\5\0\3\40\3\0\2\40\1\37\1\0\1\37\3\0\4\40\2\37" +
					"\1\0\1\37\1\40\3\0\1\37\3\0\2\37\3\0\5\40\1\37\4\40\3\0\6\40\1\37\6\40\3\0" +
					"\1\40\1\0\2\40\1\0\1\40\2\37\3\0\2\40\6\0\5\40\3\0\6\40\2\0\3\40\2\0\4\40" +
					"\4\0\1\37\2\0\2\37\2\0\4\37\1\0\4\37\1\0\1\37\1\0\6\37\2\0\5\37\1\0\4\37\1" +
					"\0\4\37\2\0\2\40\4\0\1\40\3\0\1\40\2\0\7\40\1\0\2\40\1\0\2\40\1\0\1\37\1\0" +
					"\1\37\5\0\1\37\1\0\1\37\1\0\3\37\1\0\3\37\1\0\3\37");

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 =
			"\2\0\1\1\10\2\1\1\1\3\1\4\1\5\1\6" +
					"\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\14" +
					"\1\16\5\2\2\0\12\2\1\17\3\2";

	private static int[] zzUnpackAction() {
		int[] result = new int[46];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 =
			"\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356" +
					"\0\u0110\0\u0132\0\u0154\0\u0176\0\104\0\104\0\104\0\104" +
					"\0\104\0\104\0\104\0\104\0\u0198\0\104\0\104\0\u01ba" +
					"\0\210\0\u01dc\0\u01fe\0\u0220\0\u0242\0\u0264\0\u0176\0\u0286" +
					"\0\u02a8\0\u02ca\0\u02ec\0\u030e\0\u0330\0\u0352\0\u0374\0\u0396" +
					"\0\u03b8\0\u03da\0\210\0\u03fc\0\u041e\0\u0440";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[46];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 =
			"\1\3\1\4\1\5\1\6\2\5\1\7\4\5\1\10" +
					"\1\11\1\12\2\5\1\13\2\5\1\14\1\3\1\15" +
					"\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
					"\1\14\1\5\2\3\34\26\1\27\4\26\1\30\43\0" +
					"\1\5\1\31\20\5\6\0\1\5\5\0\2\5\2\0" +
					"\22\5\6\0\1\5\5\0\2\5\2\0\1\32\21\5" +
					"\6\0\1\5\5\0\2\5\2\0\6\5\1\33\13\5" +
					"\6\0\1\5\5\0\2\5\2\0\2\5\1\34\17\5" +
					"\6\0\1\5\5\0\2\5\2\0\10\5\1\35\11\5" +
					"\6\0\1\5\5\0\2\5\2\0\12\5\1\36\7\5" +
					"\6\0\1\5\5\0\2\5\2\0\5\5\1\31\14\5" +
					"\6\0\1\5\5\0\2\5\24\0\1\37\1\40\10\0" +
					"\1\25\1\37\3\0\36\25\1\0\3\25\2\0\1\26" +
					"\1\0\1\26\7\0\1\26\17\0\1\26\6\0\3\5" +
					"\1\41\16\5\6\0\1\5\5\0\2\5\2\0\7\5" +
					"\1\42\12\5\6\0\1\5\5\0\2\5\2\0\1\5" +
					"\1\43\20\5\6\0\1\5\5\0\2\5\2\0\20\5" +
					"\1\44\1\5\6\0\1\5\5\0\2\5\2\0\1\5" +
					"\1\45\20\5\6\0\1\5\5\0\2\5\25\0\1\40" +
					"\10\0\1\25\5\0\4\5\1\31\15\5\6\0\1\5" +
					"\5\0\2\5\2\0\1\46\21\5\6\0\1\5\5\0" +
					"\2\5\2\0\10\5\1\47\11\5\6\0\1\5\5\0" +
					"\2\5\2\0\10\5\1\50\11\5\6\0\1\5\5\0" +
					"\2\5\2\0\5\5\1\51\14\5\6\0\1\5\5\0" +
					"\2\5\2\0\3\5\1\52\16\5\6\0\1\5\5\0" +
					"\2\5\2\0\13\5\1\53\6\5\6\0\1\5\5\0" +
					"\2\5\2\0\21\5\1\31\6\0\1\5\5\0\2\5" +
					"\2\0\15\5\1\54\4\5\6\0\1\5\5\0\2\5" +
					"\2\0\3\5\1\55\16\5\6\0\1\5\5\0\2\5" +
					"\2\0\16\5\1\43\3\5\6\0\1\5\5\0\2\5" +
					"\2\0\10\5\1\56\11\5\6\0\1\5\5\0\2\5" +
					"\2\0\11\5\1\31\10\5\6\0\1\5\5\0\2\5" +
					"\1\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[1122];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String[] ZZ_ERROR_MSG = {
			"Unknown internal scanner error",
			"Error: could not match input",
			"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 =
			"\2\0\1\11\11\1\10\11\1\1\2\11\7\1\2\0" +
					"\16\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[46];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * the input device
	 */
	private java.io.Reader zzReader;

	/**
	 * the current state of the DFA
	 */
	private int zzState;

	/**
	 * the current lexical state
	 */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is
	 * the source of the yytext() string
	 */
	private CharSequence zzBuffer = "";

	/**
	 * the textposition at the last accepting state
	 */
	private int zzMarkedPos;

	/**
	 * the current text position in the buffer
	 */
	private int zzCurrentPos;

	/**
	 * startRead marks the beginning of the yytext() string in the buffer
	 */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read
	 * from input
	 */
	private int zzEndRead;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/**
	 * zzAtEOF == true <=> the scanner is at the EOF
	 */
	private boolean zzAtEOF;

	/**
	 * denotes if the user-EOF-code has already been executed
	 */
	private boolean zzEOFDone;


	/**
	 * Creates a new scanner
	 *
	 * @param in the java.io.Reader to read input from.
	 */
	ArchetypeLexer(java.io.Reader in) {
		this.zzReader = in;
	}


	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		int size = 0;
		for (int i = 0, length = packed.length(); i < length; i += 2) {
			size += packed.charAt(i);
		}
		char[] map = new char[size];
		int i = 0;  /* index in packed string  */
		int j = 0;  /* index in unpacked array */
		while (i < packed.length()) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do map[j++] = value; while (--count > 0);
		}
		return map;
	}

	public final int getTokenStart() {
		return zzStartRead;
	}

	public final int getTokenEnd() {
		return getTokenStart() + yylength();
	}

	public void reset(CharSequence buffer, int start, int end, int initialState) {
		zzBuffer = buffer;
		zzCurrentPos = zzMarkedPos = zzStartRead = start;
		zzAtEOF = false;
		zzAtBOL = true;
		zzEndRead = end;
		yybegin(initialState);
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return {@code false}, iff there was new input.
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {
		return true;
	}


	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final CharSequence yytext() {
		return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
	}


	/**
	 * Returns the character at position {@code pos} from the
	 * matched text.
	 * <p>
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch.
	 *            A value from 0 to yylength()-1.
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer.charAt(zzStartRead + pos);
	}


	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}


	/**
	 * Reports an error that occurred while scanning.
	 * <p>
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 * <p>
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * <p>
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again.
	 *               This number must not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}


	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	public IElementType advance() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		CharSequence zzBufferL = zzBuffer;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ((zzAttributes & 1) == 1) {
				zzAction = zzState;
			}


			zzForAction:
			{
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
						zzCurrentPosL += Character.charCount(zzInput);
					} else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
				zzAtEOF = true;
				return null;
			} else {
				switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
					case 1: {
						return ArchetypeTypes.TEXT;
					}
					// fall through
					case 16:
						break;
					case 2: {
						return ArchetypeTypes.IDENTIFIER_KEY;
					}
					// fall through
					case 17:
						break;
					case 3: {
						return ArchetypeTypes.LEFT_PARENTHESIS;
					}
					// fall through
					case 18:
						break;
					case 4: {
						return ArchetypeTypes.RIGHT_PARENTHESIS;
					}
					// fall through
					case 19:
						break;
					case 5: {
						return ArchetypeTypes.LEFT_SQUARE;
					}
					// fall through
					case 20:
						break;
					case 6: {
						return ArchetypeTypes.RIGHT_SQUARE;
					}
					// fall through
					case 21:
						break;
					case 7: {
						return ArchetypeTypes.MINUS;
					}
					// fall through
					case 22:
						break;
					case 8: {
						return ArchetypeTypes.PLUS;
					}
					// fall through
					case 23:
						break;
					case 9: {
						return ArchetypeTypes.STAR;
					}
					// fall through
					case 24:
						break;
					case 10: {
						yybegin(QUOTED);
						return ArchetypeTypes.QUOTE_BEGIN;
					}
					// fall through
					case 25:
						break;
					case 11: {
						return ArchetypeTypes.COMMENT;
					}
					// fall through
					case 26:
						break;
					case 12: {
						return ArchetypeTypes.CHARACTER;
					}
					// fall through
					case 27:
						break;
					case 13: {
						yybegin(YYINITIAL);
						return ArchetypeTypes.QUOTE_END;
					}
					// fall through
					case 28:
						break;
					case 14: {
						return ArchetypeTypes.KEYWORD;
					}
					// fall through
					case 29:
						break;
					case 15: {
						return ArchetypeTypes.ANNOTATION;
					}
					// fall through
					case 30:
						break;
					default:
						zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}


}
