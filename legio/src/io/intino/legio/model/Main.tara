dsl Proteo

Concept:{1..1}:Named Artifact
	var string groupId
	var string version
	var string description = empty
	Concept:{0..1} Model
		var string language
		var string version
		var string sdkVersion
		var string sdk = "io.intino.magritte:builder"
		var string effectiveVersion = "" is private
		var string outLanguage = 'self.graph().artifact().name$()'
		var word[]:{ExcludeFrameworkCode ExcludeLanguageCode} exclude = empty
	Concept:{0..1} License
		var word:{GPL BSD LGPL} type
	Concept:{0..1} DataHub extends Artifact.Imports.Dependency
	Concept:{0..1} Archetype extends Artifact.Imports.Dependency
	Concept:{0..1} Imports
		Concept Dependency
			var string identifier = 'self.groupId() + ":" + self.artifactId() + ":" + self.version()' is private reactive
			var string name = '"Legio: " + self.identifier()' is private reactive
			var string groupId
			var string artifactId
			var string version
			var string effectiveVersion = "" is private
			var boolean transitive = true
			var boolean resolved = false is private
			var boolean toModule = false is private
			Concept Exclude
				var string groupId
				var string artifactId
			sub Compile
			sub Runtime
			sub Provided
			sub Test
		Concept Web
			var string identifier = 'self.groupId() + ":" + self.artifactId() + ":" + self.version()' is private reactive
			var string groupId
			var string artifactId
			var string version
			var boolean resolved = false is private
	Concept:{0..1} WebImports
		var string webDirectory = "lib"
		Concept Resolution
			var string name
			var string version
		Concept WebComponent
			var string url = ""
			var string version
		Concept:Named WebArtifact
			var string identifier = 'self.groupId() + ":" + self.artifactId() + ":" + self.version()' is private reactive
			var string groupId
			var string artifactId
			var string version
	Concept:{0..1} Box
		var string language
		var string version
		var string sdk = empty
		var string effectiveVersion = "" is private
		var string targetPackage = "box"
	Concept:{0..1} Code
		var string targetPackage =  'return self.core$().ownerAs(io.intino.legio.model.Artifact.class).groupId() + "." + self.core$().ownerAs(io.intino.legio.model.Artifact.class).name$().replace("-","").replace("_","");'
		var string modelSubPackage = "model"
		var string boxSubPackage = "box"
	Concept IntinoPlugin
		var string identifier = 'self.groupId() + ":" + self.artifactId() + ":" + self.version()' is private reactive
		var string groupId
		var string artifactId
		var string version
		var word:{Export PostCompilation PrePackage PostPackage PostDistribution} phase = PrePackage

	Concept:{0..1} Package
		var word:{ModulesAndLibrariesExtracted LibrariesLinkedByManifest ModulesAndLibrariesLinkedByManifest} mode
		var boolean createMavenPom = false
		var boolean attachSources = false
		var boolean attachDoc = false
		var boolean includeTests = false
		var boolean signArtifactWithGpg = false
		var string classpathPrefix = empty
		var string finalName = empty
		var string defaultJVMOptions = ""
		Concept MavenPlugin
			var string code
		Facet Runnable
        	var string mainClass
		Facet MacOS with Runnable
        	var string macIcon
        	var string resourceDirectory = empty
        Facet Windows with Runnable
        	var string windowsIcon
		Facet LinuxService with Runnable
			var string user
			var RunConfiguration runConfiguration
			var boolean restartOnFailure
			var integer managementPort

	has Parameter
	Concept:{0..1} Distribution
		var boolean distributeLanguage = true
		Concept Artifactory
			var string identifier
			Concept:{0..1} Release > var string url
			Concept:{0..1} Snapshot > var string url
		Concept:{0..1} OnBitbucket
			var string owner
			var string slugName

	Concept:{0..1} QualityAnalytics
		var string url
		Concept:{0..1} Authentication
			var string token

	Concept:MustHaveDistribution Deployment
		var Server server
		var RunConfiguration runConfiguration
		Concept:{0..1} BugTracking
			var string[] slackUsers = empty
		Concept:{0..1} Requirements
			Concept:{0..1} HDD
				var double:{GB} min
			Concept:{0..1} Memory
				var integer:{Mb} min
				var integer:{Mb} max
			Concept:{0..1} CPU
				var integer cores
			Concept:{0..1} JVM
				var string version
			Concept:{0..1} R
				var string version
				var string[] libraries
			Concept:{0..1} SyncDirectories > Concept:{1..*} To
					var string module
					var Server server

Concept:CheckDuplicatedArguments RunConfiguration
	var string mainClass = ""
	var string vmOptions = ""
	has Argument

Concept:Named Server
	var word:{Dev Pre Pro Demo} type

Concept Repository
	var string identifier
	Concept Type
		var string url
		var word:{Always Daily Never} updatePolicy = Daily
		sub:{0..1} Release
			var word:{Always Daily Never} updatePolicy = Daily
		sub:{0..1} Snapshot
			var word:{Always Daily Never} updatePolicy = Always

Concept Parameter is component
	var string name
	var string defaultValue = empty
	var string description = ""
	Facet ArchetypeRoot

Concept Argument is component
	var string name
	var string value

Concept:{0..1} Project
	var string description = empty
	Concept:{0..1} Scm
		var string url
		var string connection
	Concept Developer
		var string name
		var string email
		var string organization
		var string organizationUrl
	has Server
	has Repository